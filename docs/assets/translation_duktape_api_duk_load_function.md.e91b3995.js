import{_ as a,o as s,c as n,Q as o}from"./chunks/framework.43c433ff.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_load_function.md","filePath":"translation/duktape/api/duk_load_function.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/api/duk_load_function.md"},t=o(`<h2 id="duk-load-function" tabindex="-1">duk_load_function() <a class="header-anchor" href="#duk-load-function" aria-label="Permalink to &quot;duk_load_function()&quot;">​</a></h2><p>1.3.0 stack byte code</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_load_function</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_load_function</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | bytecode | -&gt; | ... | function |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>バイトコードを含むバッファをロードし、オリジナルのECMAScript関数を再現します（いくつかの制限付き）。バイトコードが互換性のあるDuktapeのバージョンでダンプされ、それ以降にバイトコードが変更されていないことを確認する必要があります。信頼できないソースからバイトコードをロードすると、メモリが安全でなくなり、悪用可能な脆弱性につながる可能性があります。</p><p>Duktapeのバイトコードダンプ/ロード、サポートされている機能、既知の制限に関するより詳細な情報は、bytecode.rstを参照してください。Duktapeバイトコード・フォーマットは難読化を意図したものではないので、難読化についての注意を参照してください。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">duk_eval_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;(function helloWorld() { print(&#39;hello world&#39;); })&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_dump_function</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#6A737D;">/* stack top now contains a buffer containing helloWorld bytecode */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">duk_load_function</span><span style="color:#E1E4E8;">(ctx);</span><span style="color:#6A737D;">  /* [ ... bytecode ] -&gt; [ ... function ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_call</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">duk_eval_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;(function helloWorld() { print(&#39;hello world&#39;); })&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_dump_function</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#6A737D;">/* stack top now contains a buffer containing helloWorld bytecode */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">duk_load_function</span><span style="color:#24292E;">(ctx);</span><span style="color:#6A737D;">  /* [ ... bytecode ] -&gt; [ ... function ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_call</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_dump_function</p>`,13),e=[t];function p(c,r,i,d,u,_){return s(),n("div",null,e)}const k=a(l,[["render",p]]);export{h as __pageData,k as default};
