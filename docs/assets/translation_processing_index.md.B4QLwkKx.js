import{_ as t,c as d,o as r,a4 as a}from"./chunks/framework.C5O6QHj3.js";const m=JSON.parse('{"title":"リファレンス","description":"","frontmatter":{},"headers":[],"relativePath":"translation/processing/index.md","filePath":"translation/processing/index.md","lastUpdated":1676129847000}'),e={name:"translation/processing/index.md"},h=a('<h1 id="リファレンス" tabindex="-1">リファレンス <a class="header-anchor" href="#リファレンス" aria-label="Permalink to &quot;リファレンス&quot;">​</a></h1><p>ショートカット:</p><h2 id="Data" tabindex="-1">データ <a class="header-anchor" href="#Data" aria-label="Permalink to &quot;データ {#Data}&quot;">​</a></h2><h3 id="コンポジット" tabindex="-1">コンポジット <a class="header-anchor" href="#コンポジット" aria-label="Permalink to &quot;コンポジット&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>Array</td><td>Arrayはデータのリストです</td></tr><tr><td>ArrayList</td><td>ArrayListは可変数のオブジェクトを格納します。</td></tr><tr><td>FloatDict</td><td>Stringをfloat値のルックアップとして使用するシンプルなテーブルクラス</td></tr><tr><td>FloatList</td><td>浮動小数点数のリストのヘルパークラス</td></tr><tr><td>HashMap</td><td>HashMapはオブジェクトのコレクションを保存し、それぞれがキーで参照されます。</td></tr><tr><td>IntDict</td><td>Stringをint値のルックアップとして使用するシンプルなクラスです。</td></tr><tr><td>IntList</td><td>int型のリストのヘルパークラスです。</td></tr><tr><td>JSONArray</td><td>JSONArrayは順序付けられた一連の値です。</td></tr><tr><td>JSONObject</td><td>JSONObjectは名前と値のペアの順序不同のコレクションです。</td></tr><tr><td>Object</td><td>Objectはクラスのインスタンス</td></tr><tr><td>String</td><td>Stringとは文字の並びのことです</td></tr><tr><td>StringDict</td><td>String値のルックアップとしてStringを使用するシンプルなクラスです。</td></tr><tr><td>StringList</td><td>文字列のリストのヘルパークラスです。</td></tr><tr><td>Table</td><td>表形式のデータを扱うための汎用クラスです。</td></tr><tr><td>TableRow</td><td>テーブルからカラムに格納されたデータ値の1行を表現する</td></tr><tr><td>XML</td><td>Processing XMLライブラリの基本クラスで、XMLツリーの1つのノードを表す</td></tr></tbody></table><h3 id="配列関数" tabindex="-1">配列関数 <a class="header-anchor" href="#配列関数" aria-label="Permalink to &quot;配列関数&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>append()</td><td>配列を1要素ずつ拡張し、新しい位置にデータを追加する。</td></tr><tr><td>arrayCopy()</td><td>配列（または配列の一部）を別の配列にコピーします．</td></tr><tr><td>concat()</td><td>2つの配列を連結する</td></tr><tr><td>expand()</td><td>配列のサイズを増加させる</td></tr><tr><td>reverse()</td><td>配列の順序を逆順にする</td></tr><tr><td>shorten()</td><td>配列の要素を 1 つ減らし、短縮された配列を返します。</td></tr><tr><td>sort()</td><td>数字の配列を小さいものから大きいものへ並べ替えたり、単語の配列をアルファベット順に並べたりします。</td></tr><tr><td>splice()</td><td>既存の配列に値または値の配列を挿入します。</td></tr><tr><td>subset()</td><td>既存の配列から要素を抽出します。</td></tr></tbody></table><h3 id="変換" tabindex="-1">変換 <a class="header-anchor" href="#変換" aria-label="Permalink to &quot;変換&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>binary()</td><td>int, byte, char, colorを等価な2進数表記を含むStringに変換する。</td></tr><tr><td>boolean()</td><td>int または String を boolean 表現に変換します。</td></tr><tr><td>byte()</td><td>プリミティブデータ型（boolean, byte, char, color, double, float, int, long）の任意の値をバイト表現に変換する。</td></tr><tr><td>char()</td><td>プリミティブデータ型（boolean, byte, char, color, double, float, int, long）の任意の値を、その数値文字表現に変換する。</td></tr><tr><td>float()</td><td>int または String を浮動小数点表現に変換します。</td></tr><tr><td>hex()</td><td>byte, char, int, color を，同等の16進数表記を含む String に変換する。</td></tr><tr><td>int()</td><td>プリミティブデータ型（boolean, byte, char, color, float, int, long）またはStringの値を、整数表現に変換します。</td></tr><tr><td>str()</td><td>プリミティブデータ型（boolean, byte, char, int, float）の値をString表現に変換する。</td></tr><tr><td>unbinary()</td><td>2進数の文字列表現を同等の整数値に変換する</td></tr><tr><td>unhex()</td><td>16進数の文字列表現を，同等の整数値に変換する。</td></tr></tbody></table><h3 id="プリミティブ" tabindex="-1">プリミティブ <a class="header-anchor" href="#プリミティブ" aria-label="Permalink to &quot;プリミティブ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>boolean</td><td>ブール値 true および false に対応するデータ型</td></tr><tr><td>byte</td><td>バイトのデータ型。127から-128までの数値を格納する8ビットの情報。</td></tr><tr><td>char</td><td>文字，A,d,$などのタイポグラフィシンボルのデータ型</td></tr><tr><td>color</td><td>色値を格納するためのデータ型</td></tr><tr><td>double</td><td>float に格納できる数よりも大きな浮動小数点数用のデータ型</td></tr><tr><td>float</td><td>浮動小数点数のデータ型, e</td></tr><tr><td>int</td><td>整数（小数点以下の数値）用のデータ型</td></tr><tr><td>long</td><td>大きな整数を扱うデータ型</td></tr></tbody></table><h3 id="文字列関数" tabindex="-1">文字列関数 <a class="header-anchor" href="#文字列関数" aria-label="Permalink to &quot;文字列関数&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>join()</td><td>separator パラメータで指定した文字で区切られた文字列の配列を、1 つの文字列に結合します。</td></tr><tr><td>matchAll()</td><td>この関数は、テキストに正規表現を適用するために使用されます。</td></tr><tr><td>match()</td><td>この関数は、テキストに正規表現を適用し、マッチしたグループ（括弧の中にある要素）をString配列として返すために使用されます。</td></tr><tr><td>nf()</td><td>数値を文字列にフォーマットするユーティリティ関数</td></tr><tr><td>nfc()</td><td>数値を文字列にフォーマットし、1000単位を示す適切なカンマを配置するユーティリティ関数</td></tr><tr><td>nfp()</td><td>数値を文字列にフォーマットするユーティリティ関数</td></tr><tr><td>nfs()</td><td>数値を文字列にフォーマットするユーティリティ関数</td></tr><tr><td>splitTokens()</td><td>splitTokens() 関数は、1 つまたは複数の文字の &quot;トークン&quot; で文字列を分割します。</td></tr><tr><td>split()</td><td>split() 関数は、文字または文字列を区切りとして文字列を分割する関数です。</td></tr><tr><td>trim()</td><td>Stringの先頭と末尾から空白文字を削除します。</td></tr></tbody></table><h2 id="Input" tabindex="-1">入力 <a class="header-anchor" href="#Input" aria-label="Permalink to &quot;入力 {#Input}&quot;">​</a></h2><h3 id="ファイル" tabindex="-1">ファイル <a class="header-anchor" href="#ファイル" aria-label="Permalink to &quot;ファイル&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>BufferedReader</td><td>BufferedReaderオブジェクトは、ファイルを一行ごとに個別のStringオブジェクトとして読み込むために使用されます。</td></tr><tr><td>createInput()</td><td>Java InputStreamをオープンする上級プログラマー向けの機能です。</td></tr><tr><td>createReader()</td><td>ファイルを一行ずつ読み込むための BufferedReader オブジェクトを作成する。</td></tr><tr><td>launch()</td><td>プラットフォームのランチャーを使用してアプリケーションやファイルを開こうとした場合</td></tr><tr><td>loadBytes()</td><td>ファイルまたはURLの内容を読み込み、バイト配列に格納する。</td></tr><tr><td>loadJSONArray()</td><td>Stringを受け取り、その内容をパースして、JSONArrayを返す。</td></tr><tr><td>loadJSONObject()</td><td>データフォルダまたはURLからJSONを読み込み、JSONObjectを返す。</td></tr><tr><td>loadStrings()</td><td>ファイルあるいは url の内容を読み込み、その個々の行の String 配列を作成します。</td></tr><tr><td>loadTable()</td><td>ファイルやURLの内容を読み取り、その値でTableオブジェクトを作成する</td></tr><tr><td>loadXML()</td><td>ファイルまたはURLの内容を読み取り、その値を持つXMLオブジェクトを作成する</td></tr><tr><td>parseJSONArray()</td><td>Stringを受け取り、その内容をパースして、JSONArrayを返す。</td></tr><tr><td>parseJSONObject()</td><td>Stringを受け取り、その内容をパースして、JSONObjectを返す。</td></tr><tr><td>parseXML()</td><td>StringコンテンツをXMLオブジェクトに変換する。</td></tr><tr><td>selectFolder()</td><td>プラットフォーム固有のファイル選択ダイアログを開き、フォルダを選択する</td></tr><tr><td>selectInput()</td><td>プラットフォーム固有のファイル選択ダイアログを開き、入力用ファイルを選択する</td></tr></tbody></table><h3 id="時刻と日付" tabindex="-1">時刻と日付 <a class="header-anchor" href="#時刻と日付" aria-label="Permalink to &quot;時刻と日付&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>day()</td><td>現在の日を1～31の値で返します。</td></tr><tr><td>hour()</td><td>現在の時刻を0～23の値で返します。</td></tr><tr><td>millis()</td><td>アプレットを起動してからのミリ秒数（1000 分の 1 秒）を返します。</td></tr><tr><td>minute()</td><td>現在の「分」を0～59の値で返します。</td></tr><tr><td>month()</td><td>現在の月を1～12までの値で返します。</td></tr><tr><td>second()</td><td>現在の秒を0～59の値で返します。</td></tr><tr><td>year()</td><td>現在の年を整数で返す（2003, 2004, 2005, etc.）</td></tr></tbody></table><h3 id="キーボード" tabindex="-1">キーボード <a class="header-anchor" href="#キーボード" aria-label="Permalink to &quot;キーボード&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>key</td><td>キーボードで最も最近使われたキー（押されたか離されたかのどちらか）の値を常に含むシステム変数です。</td></tr><tr><td>keyCode</td><td>UP、DOWN、LEFT、RIGHTの矢印キーやALT、CONTROL、SHIFTなどの特殊キーを検出するために使用します。</td></tr><tr><td>keyPressed</td><td>キーが押された場合は真、押されていない場合は偽となるブーリアン変数</td></tr><tr><td>keyPressed()</td><td>キーが押されるたびに1回呼び出される</td></tr><tr><td>keyReleased()</td><td>キーが離されるたびに1回呼び出される</td></tr><tr><td>keyTyped()</td><td>キーが押されるたびに1回呼び出されるが、Ctrl、Shift、Altのようなアクションキーは無視される</td></tr></tbody></table><h3 id="マウス" tabindex="-1">マウス <a class="header-anchor" href="#マウス" aria-label="Permalink to &quot;マウス&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>mouseButton</td><td>どのマウスボタンが押されたかを表示する</td></tr><tr><td>mouseClicked()</td><td>マウスボタンが押された後、離された後に一度だけ呼ばれる</td></tr><tr><td>mouseDragged()</td><td>マウスが移動し、マウスボタンが押されるたびに1回呼び出される</td></tr><tr><td>mouseMoved()</td><td>マウスが移動し、マウスボタンが押されていない時に毎回呼び出される</td></tr><tr><td>mousePressed</td><td>マウスボタンが押された場合に格納される変数</td></tr><tr><td>mousePressed()</td><td>マウスボタンが押されるたびに1回呼び出される</td></tr><tr><td>mouseReleased()</td><td>マウスボタンが離されるたびに呼び出される</td></tr><tr><td>mouseWheel()</td><td>mouseWheel()イベント関数内のコードは、マウスホイールが動かされたときに実行されます。</td></tr><tr><td>mouseX</td><td>常にマウスの現在の水平座標を格納するシステム変数</td></tr><tr><td>mouseY</td><td>常にマウスの現在の垂直座標を格納するシステム変数</td></tr><tr><td>pmouseX</td><td>現在のフレームより前のフレームにおけるマウスの水平位置を常に格納するシステム変数</td></tr><tr><td>pmouseY</td><td>現在のフレームより前のフレームにおけるマウスの垂直位置を常に格納するシステム変数</td></tr></tbody></table><h2 id="Constants" tabindex="-1">定数 <a class="header-anchor" href="#Constants" aria-label="Permalink to &quot;定数 {#Constants}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>HALF_PI</td><td>HALF_PIは数学定数で、値は1.57079632679489661923です。</td></tr><tr><td>PI</td><td>PIは、値3.14159265358979323846の数学定数です。</td></tr><tr><td>QUARTER_PI</td><td>QUARTER_PIは数学定数で、値は0.7853982です。</td></tr><tr><td>TAU</td><td>TWO_PIの別名。</td></tr><tr><td>TWO_PI</td><td>TWO_PIは数学定数で、値は6.28318530717958647693です。</td></tr></tbody></table><h2 id="Typography" tabindex="-1">タイポグラフィ <a class="header-anchor" href="#Typography" aria-label="Permalink to &quot;タイポグラフィ {#Typography}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PFont</td><td>Processing で使用されるグレースケールビットマップフォントクラス</td></tr></tbody></table><h3 id="読み込みと表示" tabindex="-1">読み込みと表示 <a class="header-anchor" href="#読み込みと表示" aria-label="Permalink to &quot;読み込みと表示&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>createFont()</td><td>フォントをProcessingで使用される形式に動的に変換する</td></tr><tr><td>loadFont()</td><td>PFont 型の変数にフォントをロードします。</td></tr><tr><td>textFont()</td><td>text() 関数で描画される現在のフォントを設定します。</td></tr><tr><td>text()</td><td>画面にテキストを描画する</td></tr></tbody></table><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>textAlign()</td><td>テキストを描画する際の現在のアライメントを設定します</td></tr><tr><td>textLeading()</td><td>テキストの行間をピクセル単位で設定する</td></tr><tr><td>textMode()</td><td>テキストの画面への描画方法を設定する</td></tr><tr><td>textSize()</td><td>現在のフォントサイズを設定する</td></tr><tr><td>textWidth()</td><td>任意の文字またはテキスト文字列の幅を計算し、返します。</td></tr></tbody></table><h3 id="マトリクス" tabindex="-1">マトリクス <a class="header-anchor" href="#マトリクス" aria-label="Permalink to &quot;マトリクス&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>textAscent()</td><td>現在のフォントの現在のサイズでの上昇値を返す</td></tr><tr><td>textDescent()</td><td>現在のフォントの、現在のサイズでの降下を返す</td></tr></tbody></table><h2 id="Rendering" tabindex="-1">レンダリング <a class="header-anchor" href="#Rendering" aria-label="Permalink to &quot;レンダリング {#Rendering}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PGraphics</td><td>メイングラフィックスとレンダリングコンテキスト、および &quot;コア&quot; を処理するためのベース API 実装。</td></tr><tr><td>blendMode()</td><td>定義されたモードに従って、ディスプレイウィンドウのピクセルをブレンドする</td></tr><tr><td>clip()</td><td>パラメータで定義された矩形の境界線にレンダリングを制限します。</td></tr><tr><td>createGraphics()</td><td>P2D 型または P3D 型の PGraphics オブジェクトを新規に作成し、返します。</td></tr><tr><td>hint()</td><td>この機能は、グラフィックの描画方法を制御する特別な機能を有効または無効にするために使用します。</td></tr><tr><td>noClip()</td><td>clip()関数によって開始されたクリッピングを無効にします。</td></tr></tbody></table><h3 id="シェーダー" tabindex="-1">シェーダー <a class="header-anchor" href="#シェーダー" aria-label="Permalink to &quot;シェーダー&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PShader</td><td>このクラスは、頂点シェーダとフラグメントシェーダを含むGLSLシェーダプログラムをカプセル化します。</td></tr><tr><td>loadShader()</td><td>PShader オブジェクトにシェーダーをロードします。</td></tr><tr><td>resetShader()</td><td>デフォルトのシェーダーを復元する</td></tr><tr><td>shader()</td><td>パラメータで指定されたシェーダーを適用する</td></tr></tbody></table><h2 id="Image" tabindex="-1">画像 <a class="header-anchor" href="#Image" aria-label="Permalink to &quot;画像 {#Image}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PImage</td><td>画像を格納するためのデータ型</td></tr><tr><td>createImage()</td><td>PImage（画像を格納するためのデータ型）を新規に作成する。</td></tr></tbody></table><h3 id="ピクセル" tabindex="-1">ピクセル <a class="header-anchor" href="#ピクセル" aria-label="Permalink to &quot;ピクセル&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>blend()</td><td>さまざまなブレンドモードを使用して、ピクセルまたはピクセルの矩形をコピーします。</td></tr><tr><td>copy()</td><td>画像全体をコピーする</td></tr><tr><td>filter()</td><td>画像をグレースケールまたは白黒に変換する</td></tr><tr><td>get()</td><td>任意のピクセルの色を読み取るか、ピクセルの矩形を取得します。</td></tr><tr><td>loadPixels()</td><td>表示ウィンドウのピクセルデータをpixels[]配列にロードします。</td></tr><tr><td>mask()</td><td>画像の一部をアルファチャンネルとして別の画像でマスクする</td></tr><tr><td>pixels[]</td><td>表示ウィンドウ内の全画素の値を含む配列</td></tr><tr><td>set()</td><td>任意の画素に色を書き込んだり、別の画素に画像を書き込んだりします。</td></tr><tr><td>updatePixels()</td><td>ピクセル[]配列のデータで表示ウィンドウを更新します。</td></tr></tbody></table><h3 id="読み込みと表示-1" tabindex="-1">読み込みと表示 <a class="header-anchor" href="#読み込みと表示-1" aria-label="Permalink to &quot;読み込みと表示&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>imageMode()</td><td>画像の描画位置を変更する</td></tr><tr><td>image()</td><td>画像をスクリーンに表示する</td></tr><tr><td>loadImage()</td><td>PImage 型の変数に画像を読み込む。</td></tr><tr><td>noTint()</td><td>画像を表示する際の現在の塗りつぶし値を削除し、元の色相で画像を表示するように戻す</td></tr><tr><td>requestImage()</td><td>画像を別スレッドでロードするので、setup()中に画像をロードしている間にスケッチがフリーズすることはありません。</td></tr><tr><td>tint()</td><td>画像を表示する際の塗りつぶし値を設定する</td></tr></tbody></table><h3 id="テクスチャ" tabindex="-1">テクスチャ <a class="header-anchor" href="#テクスチャ" aria-label="Permalink to &quot;テクスチャ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>textureMode()</td><td>テクスチャマッピングのための座標空間を設定する</td></tr><tr><td>textureWrap()</td><td>テクスチャマップ内でテクスチャを繰り返すか、一度だけ描画するかを定義します。</td></tr><tr><td>texture()</td><td>頂点に適用するテクスチャを設定します。</td></tr></tbody></table><h2 id="Shape" tabindex="-1">シェイプ <a class="header-anchor" href="#Shape" aria-label="Permalink to &quot;シェイプ {#Shape}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PShape</td><td>形状を格納するためのデータ型</td></tr><tr><td>createShape()</td><td>createShape()関数は、新しい図形を定義するために使用されます。</td></tr><tr><td>loadShape()</td><td>PShape 型の変数にジオメトリをロードする。</td></tr></tbody></table><h3 id="_2dプリミティブ" tabindex="-1">2Dプリミティブ <a class="header-anchor" href="#_2dプリミティブ" aria-label="Permalink to &quot;2Dプリミティブ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>arc()</td><td>表示ウィンドウに円弧を描画する</td></tr><tr><td>circle()</td><td>画面に円を描画する</td></tr><tr><td>ellipse()</td><td>表示ウィンドウに楕円（オーバル）を描画する</td></tr><tr><td>line()</td><td>画面にライン（2点間の直接の経路）を描画します。</td></tr><tr><td>point()</td><td>1画素の大きさの空間座標である点を描画します。</td></tr><tr><td>quad()</td><td>クワッドとは、四角形のことで、4辺の多角形のことです</td></tr><tr><td>rect()</td><td>画面に矩形を描画する</td></tr><tr><td>square()</td><td>画面に正方形を描画する</td></tr><tr><td>triangle()</td><td>三角形は3つの点を結んでできる平面です</td></tr></tbody></table><h3 id="バーテックス" tabindex="-1">バーテックス <a class="header-anchor" href="#バーテックス" aria-label="Permalink to &quot;バーテックス&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>beginContour()</td><td>形状の頂点の記録を開始する。</td></tr><tr><td>beginShape()</td><td>beginShape()、endShape()関数を使用すると、より複雑なフォームを作成することができます。</td></tr><tr><td>bezierVertex()</td><td>ベジェ曲線の頂点座標を指定する。</td></tr><tr><td>curveVertex()</td><td>曲線の頂点座標を指定する</td></tr><tr><td>endContour()</td><td>シェイプの頂点の記録を停止する</td></tr><tr><td>endShape()</td><td>beginShape() のコンパニオンで、beginShape() の後にのみ呼び出すことができます。</td></tr><tr><td>quadraticVertex()</td><td>二次ベジェ曲線の頂点座標を指定する。</td></tr><tr><td>vertex()</td><td>すべての図形は、一連の頂点を結ぶことで構成される</td></tr></tbody></table><h3 id="カーブ" tabindex="-1">カーブ <a class="header-anchor" href="#カーブ" aria-label="Permalink to &quot;カーブ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>bezierDetail()</td><td>ベジェの表示解像度を設定する</td></tr><tr><td>bezierPoint()</td><td>点 a, b, c, d の点 t でのベジェを評価する。</td></tr><tr><td>bezierTangent()</td><td>ベジェ曲線上の点の正接を計算する</td></tr><tr><td>bezier()</td><td>画面上にベジェ曲線を描画する</td></tr><tr><td>curveDetail()</td><td>カーブ表示の解像度を設定する</td></tr><tr><td>curvePoint()</td><td>点a,b,c,dについて、点tでの曲線を評価する。</td></tr><tr><td>curveTangent()</td><td>曲線上の点の正接を計算する</td></tr><tr><td>curveTightness()</td><td>curve()およびcurveVertex()で作成されたフォームの品質を変更する。</td></tr><tr><td>curve()</td><td>画面上に曲線を描画する</td></tr></tbody></table><h3 id="_3dプリミティブ" tabindex="-1">3Dプリミティブ <a class="header-anchor" href="#_3dプリミティブ" aria-label="Permalink to &quot;3Dプリミティブ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>box()</td><td>ボックスは、押し出された長方形です</td></tr><tr><td>sphereDetail()</td><td>球体メッシュの頂点数を調整することで、球体のレンダリングに使用するディテールをコントロールします。</td></tr><tr><td>sphere()</td><td>球はテッセレーションされた三角形でできた中空の球です</td></tr></tbody></table><h3 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>ellipseMode()</td><td>楕円の原点は、ellipseMode()関数で変更されます。</td></tr><tr><td>rectMode()</td><td>矩形が描画される位置を変更する</td></tr><tr><td>strokeCap()</td><td>行末のレンダリングスタイルを設定する</td></tr><tr><td>strokeJoin()</td><td>線分と線分をつなぐジョイントのスタイルを設定します。</td></tr><tr><td>strokeWeight()</td><td>線、点、図形周囲の境界線に使用するストロークの幅を設定します。</td></tr></tbody></table><h3 id="読み込みと表示-2" tabindex="-1">読み込みと表示 <a class="header-anchor" href="#読み込みと表示-2" aria-label="Permalink to &quot;読み込みと表示&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>shapeMode()</td><td>シェイプの描画位置を変更する</td></tr><tr><td>shape()</td><td>図形を画面に表示する</td></tr></tbody></table><h2 id="Math" tabindex="-1">数学 <a class="header-anchor" href="#Math" aria-label="Permalink to &quot;数学 {#Math}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PVector</td><td>2次元または3次元のベクトルを記述するクラスです．</td></tr></tbody></table><h3 id="計算" tabindex="-1">計算 <a class="header-anchor" href="#計算" aria-label="Permalink to &quot;計算&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>abs()</td><td>数値の絶対値（大きさ）を計算する</td></tr><tr><td>ceil()</td><td>パラメータ値以上に最も近いint値を計算する。</td></tr><tr><td>constrain()</td><td>値が最大値および最小値を超えないように制約する</td></tr><tr><td>dist()</td><td>2点間の距離を計算する</td></tr><tr><td>exp()</td><td>オイラー数e (2.71828...)を値パラメータのべき乗にしたものを返します。</td></tr><tr><td>floor()</td><td>パラメータ値以下の最も近い int 値を計算します。</td></tr><tr><td>lerp()</td><td>2つの数値の間の数値を、特定の増分で計算します。</td></tr><tr><td>log()</td><td>数値の自然対数（底e対数）を計算します。</td></tr><tr><td>mag()</td><td>ベクトルの大きさ（または長さ）を計算します。</td></tr><tr><td>map()</td><td>ある範囲から別の範囲に数値を再マップする</td></tr><tr><td>max()</td><td>数列の中で最大の値を決定します。</td></tr><tr><td>min()</td><td>数列の中で最小の値を決定します。</td></tr><tr><td>norm()</td><td>他の範囲の数値を0から1の間の値に正規化します。</td></tr><tr><td>pow()</td><td>指数表現が容易に</td></tr><tr><td>round()</td><td>パラメータ値に最も近い整数を計算する。</td></tr><tr><td>sq()</td><td>数値を二乗する（数値とそれとを掛け合わせる）。</td></tr><tr><td>sqrt()</td><td>数値の平方根を計算する</td></tr></tbody></table><h3 id="三角関数" tabindex="-1">三角関数 <a class="header-anchor" href="#三角関数" aria-label="Permalink to &quot;三角関数&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>acos()</td><td>cos()の逆数で、値のアークコサインを返します。</td></tr><tr><td>asin()</td><td>sin()の逆数で、値のアークサインを返します。</td></tr><tr><td>atan2()</td><td>指定した点から、正のX軸から測定した座標原点までの角度（ラジアン単位）を計算します。</td></tr><tr><td>atan()</td><td>tan()の逆で、値のアークタンジェントを返します。</td></tr><tr><td>cos()</td><td>角度の余弦を計算する</td></tr><tr><td>degrees()</td><td>ラジアン測定値から対応する度数単位の値に変換します。</td></tr><tr><td>radians()</td><td>度数測定値をラジアン単位で対応する値に変換します。</td></tr><tr><td>sin()</td><td>角度の正弦を計算する</td></tr><tr><td>tan()</td><td>角度の正弦と余弦の比を計算する</td></tr></tbody></table><h3 id="演算子" tabindex="-1">演算子 <a class="header-anchor" href="#演算子" aria-label="Permalink to &quot;演算子&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>+= (add assign)</td><td>加算と代入の組み合わせ</td></tr><tr><td>+ (addition)</td><td>2つの値を足したり、文字列の値を連結したりする。</td></tr><tr><td>-- (decrement)</td><td>整数型変数の値を1だけ抽象化する</td></tr><tr><td>/ (divide)</td><td>第一パラメーターの値を第二パラメーターの値で割る</td></tr><tr><td>/= (divide assign)</td><td>除算と代入の組み合わせ</td></tr><tr><td>++ (increment)</td><td>整数型変数の値を1増加させる</td></tr><tr><td>- (minus)</td><td>ある値から別の値を引きます。また、値を否定するために使用することもできます。</td></tr><tr><td>% (modulo)</td><td>ある数を別の数で割ったときの余りを計算します。</td></tr><tr><td>* (multiply)</td><td>2つのパラメーターの値を掛け合わせる</td></tr><tr><td>*= (multiply assign)</td><td>乗算と代入の組み合わせ</td></tr><tr><td>-= (subtract assign)</td><td>減算と代入の組み合わせ</td></tr></tbody></table><h3 id="ビット演算子" tabindex="-1">ビット演算子 <a class="header-anchor" href="#ビット演算子" aria-label="Permalink to &quot;ビット演算子&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>&amp; (bitwise AND)</td><td>値の2進表現における対応する各ビットを比較する。</td></tr><tr><td>｜ (bitwise OR)</td><td>値の2進表現における対応する各ビットを比較する。</td></tr><tr><td>&lt;&lt; (left shift)</td><td>ビットを左にシフトする</td></tr><tr><td>&gt;&gt; (right shift)</td><td>ビットを右にシフトする</td></tr></tbody></table><h3 id="ランダム" tabindex="-1">ランダム <a class="header-anchor" href="#ランダム" aria-label="Permalink to &quot;ランダム&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>noiseDetail()</td><td>パーリンノイズ機能で生成されるディテールの特性やレベルを調整します。</td></tr><tr><td>noiseSeed()</td><td>noise()のシード値を設定する。</td></tr><tr><td>noise()</td><td>指定された座標におけるPerlinノイズの値を返します。</td></tr><tr><td>randomGaussian()</td><td>平均が 0、標準偏差が 1 の乱数列から float を返します。</td></tr><tr><td>randomSeed()</td><td>random()のシード値を設定します。</td></tr><tr><td>random()</td><td>乱数生成</td></tr></tbody></table><h2 id="Output" tabindex="-1">出力 <a class="header-anchor" href="#Output" aria-label="Permalink to &quot;出力 {#Output}&quot;">​</a></h2><h3 id="ファイル-1" tabindex="-1">ファイル <a class="header-anchor" href="#ファイル-1" aria-label="Permalink to &quot;ファイル&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>PrintWriter</td><td>テキスト出力ストリームへの文字の印刷を許可する</td></tr><tr><td>beginRaw()</td><td>3Dデータからベクトルを作成するには、beginRaw()とendRaw()コマンドを使用します</td></tr><tr><td>beginRecord()</td><td>新規ファイルを開き、それ以降のすべての描画機能は、表示ウィンドウと同様にこのファイルにエコーされる</td></tr><tr><td>createOutput()</td><td>createInput() と同様に、与えられたファイル名またはパスに対して Java OutputStream を作成します。</td></tr><tr><td>createWriter()</td><td>スケッチフォルダに新しいファイルを作成し、そこに書き込むためのPrintWriterオブジェクトを作成する</td></tr><tr><td>endRaw()</td><td>beginRaw() を補完するもので、常に一緒に使用する必要があります。</td></tr><tr><td>endRecord()</td><td>beginRecord()で開始した記録処理を停止し、ファイルをクローズする。</td></tr><tr><td>saveBytes()</td><td>loadBytes()の反対で、バイトの配列全体をファイルに書き込みます。</td></tr><tr><td>saveJSONArray()</td><td>JSONArray オブジェクトの内容をファイルに書き出す。</td></tr><tr><td>saveJSONObject()</td><td>JSONObjectオブジェクトの内容をファイルに書き込む</td></tr><tr><td>saveStream()</td><td>ストリームの内容をスケッチフォルダ内のファイルに保存する</td></tr><tr><td>saveStrings()</td><td>文字列の配列を1行ずつファイルに書き出す</td></tr><tr><td>saveTable()</td><td>Table オブジェクトの内容をファイルに書き込む</td></tr><tr><td>saveXML()</td><td>XMLオブジェクトの内容をファイルに書き込む</td></tr><tr><td>selectOutput()</td><td>プラットフォーム固有のファイル選択ダイアログを開き、出力するファイルを選択する</td></tr></tbody></table><h3 id="テキストエリア" tabindex="-1">テキストエリア <a class="header-anchor" href="#テキストエリア" aria-label="Permalink to &quot;テキストエリア&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>printArray()</td><td>Processing環境のコンソールのテキストエリアに配列データを書き込みます。</td></tr><tr><td>print()</td><td>Processing環境のコンソールエリアに書き込みます。</td></tr><tr><td>println()</td><td>Processing 環境のコンソールのテキストエリアに書き込みます。</td></tr></tbody></table><h3 id="画像" tabindex="-1">画像 <a class="header-anchor" href="#画像" aria-label="Permalink to &quot;画像&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>saveFrame()</td><td>この関数を実行するたびに1枚ずつ、番号順に画像を保存します。</td></tr><tr><td>save()</td><td>ディスプレイウィンドウの画像を保存する</td></tr></tbody></table><h2 id="Color" tabindex="-1">カラー <a class="header-anchor" href="#Color" aria-label="Permalink to &quot;カラー {#Color}&quot;">​</a></h2><h3 id="生成と読み込み" tabindex="-1">生成と読み込み <a class="header-anchor" href="#生成と読み込み" aria-label="Permalink to &quot;生成と読み込み&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>alpha()</td><td>色からアルファ値を抽出する</td></tr><tr><td>blue()</td><td>色から青の値を抽出し、現在のcolorMode()と一致するようにスケーリングします。</td></tr><tr><td>brightness()</td><td>色から輝度値を抽出する</td></tr><tr><td>color()</td><td>color データ型の変数に格納するための色を作成する。</td></tr><tr><td>green()</td><td>色から緑の値を抽出し、現在のcolorMode()と一致するようにスケーリングします。</td></tr><tr><td>hue()</td><td>色から色相値を抽出する</td></tr><tr><td>lerpColor()</td><td>特定の増分で2色間の色または色を計算する</td></tr><tr><td>red()</td><td>色から赤の値を抽出し、現在のcolorMode()と一致するようにスケーリングします。</td></tr><tr><td>saturation()</td><td>色から彩度値を抽出する</td></tr></tbody></table><h3 id="設定" tabindex="-1">設定 <a class="header-anchor" href="#設定" aria-label="Permalink to &quot;設定&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>background()</td><td>処理ウィンドウの背景に使用する色を設定する</td></tr><tr><td>clear()</td><td>バッファ内の画素をクリアする</td></tr><tr><td>colorMode()</td><td>プロセッシングによるカラーデータの解釈方法を変更</td></tr><tr><td>fill()</td><td>図形の塗りつぶしに使用する色を設定します</td></tr><tr><td>noFill()</td><td>塗りつぶし形状を無効にする</td></tr><tr><td>noStroke()</td><td>ストローク（輪郭）の描画を無効にする</td></tr><tr><td>stroke()</td><td>図形の周囲に線や枠を描くときの色を設定します。</td></tr></tbody></table><h2 id="Lights_Camera" tabindex="-1">ライト・カメラ <a class="header-anchor" href="#Lights_Camera" aria-label="Permalink to &quot;ライト・カメラ {#Lights_Camera}&quot;">​</a></h2><h3 id="ライト" tabindex="-1">ライト <a class="header-anchor" href="#ライト" aria-label="Permalink to &quot;ライト&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>ambientLight()</td><td>アンビエントライトを追加</td></tr><tr><td>directionalLight()</td><td>指向性ライトを追加</td></tr><tr><td>lightFalloff()</td><td>ポイントライト、スポットライト、アンビエントライトのフォールオフ率を設定します。</td></tr><tr><td>lightSpecular()</td><td>ライトのスペキュラカラーを設定する</td></tr><tr><td>lights()</td><td>アンビエントライト、ディレクショナルライト、フォールオフ、スペキュラのデフォルト値を設定します。</td></tr><tr><td>noLights()</td><td>すべての照明を無効にする</td></tr><tr><td>normal()</td><td>現在の法線ベクトルを設定する</td></tr><tr><td>pointLight()</td><td>点光源を追加する</td></tr><tr><td>spotLight()</td><td>スポットライトを追加</td></tr></tbody></table><h3 id="マテリアル・プロパティ" tabindex="-1">マテリアル・プロパティ <a class="header-anchor" href="#マテリアル・プロパティ" aria-label="Permalink to &quot;マテリアル・プロパティ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>ambient()</td><td>スクリーンに描画される形状の環境反射率を設定する</td></tr><tr><td>emissive()</td><td>画面に描画される図形に使用される素材の放射色を設定する</td></tr><tr><td>shininess()</td><td>シェイプの表面の光沢の量を設定する</td></tr><tr><td>specular()</td><td>画面に描画される図形に使用される素材のスペキュラカラーを設定し、ハイライトの色を設定します</td></tr></tbody></table><h3 id="カメラ" tabindex="-1">カメラ <a class="header-anchor" href="#カメラ" aria-label="Permalink to &quot;カメラ&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>beginCamera()</td><td>beginCamera()および endCamera()関数により、カメラ空間の高度なカスタマイズが可能です。</td></tr><tr><td>camera()</td><td>カメラの位置を設定する</td></tr><tr><td>endCamera()</td><td>beginCamera()および endCamera()関数により、カメラ空間の高度なカスタマイズが可能です。</td></tr><tr><td>ortho()</td><td>正投影を設定し、平行クリッピングボリュームを定義する</td></tr><tr><td>perspective()</td><td>遠くのものを近くのものよりも小さく見せるフォアショートを適用した透視投影を設定します。</td></tr><tr><td>frustum()</td><td>パラメータで定義されたパースペクティブマトリクスを設定します。</td></tr><tr><td>printCamera()</td><td>現在のカメラマトリクスをコンソール（Processingの下部にあるテキストウィンドウ）に出力します。</td></tr><tr><td>printProjection()</td><td>現在の投影行列をコンソールに表示します。</td></tr></tbody></table><h3 id="コーディネート" tabindex="-1">コーディネート <a class="header-anchor" href="#コーディネート" aria-label="Permalink to &quot;コーディネート&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>modelX()</td><td>モデル空間における X、Y、Z の 3 次元位置を返します。</td></tr><tr><td>modelY()</td><td>モデル空間における X、Y、Z の 3 次元位置を返します。</td></tr><tr><td>modelZ()</td><td>モデル空間における X、Y、Z の 3 次元位置を返します。</td></tr><tr><td>screenX()</td><td>3次元のX、Y、Zの位置を取り、（2次元の）画面上に表示される位置のX値を返す。</td></tr><tr><td>screenY()</td><td>3次元のX、Y、Zの位置を取り、（2次元の）画面上に表示される位置のY値を返す。</td></tr><tr><td>screenZ()</td><td>3次元のX、Y、Zの位置を取り、（2次元の）画面上に表示される位置のZ値を返す。</td></tr></tbody></table><h2 id="Transform" tabindex="-1">トランスフォーム <a class="header-anchor" href="#Transform" aria-label="Permalink to &quot;トランスフォーム {#Transform}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>applyMatrix()</td><td>現在の行列とパラメータで指定された行列を掛け合わせます。</td></tr><tr><td>popMatrix()</td><td>行列スタックから現在の変換行列をポップアップします．</td></tr><tr><td>printMatrix()</td><td>現在の行列をコンソール（Processingの下部にあるテキストウィンドウ）に表示します。</td></tr><tr><td>pushMatrix()</td><td>現在の変換行列を行列スタックにプッシュします．</td></tr><tr><td>resetMatrix()</td><td>現在の行列を単位行列で置き換えます。</td></tr><tr><td>rotateX()</td><td>x軸を中心に、angleパラメータで指定された量だけ図形を回転させます。</td></tr><tr><td>rotateY()</td><td>Y軸を中心に、angleパラメータで指定された量だけ図形を回転させます。</td></tr><tr><td>rotateZ()</td><td>z 軸を中心に、angle パラメータで指定された量だけ図形を回転させます。</td></tr><tr><td>rotate()</td><td>angleパラメータで指定された量だけ、図形を回転させます。</td></tr><tr><td>scale()</td><td>頂点の拡大・縮小により、形状のサイズを拡大・縮小することができる</td></tr><tr><td>shearX()</td><td>X軸を中心に、angleパラメータで指定された量だけ図形を切り取ります。</td></tr><tr><td>shearY()</td><td>y 軸を中心に、angle パラメータで指定された量だけ図形を切り取ります。</td></tr><tr><td>translate()</td><td>表示ウィンドウ内のオブジェクトを移動させる量を指定する</td></tr></tbody></table><h2 id="Structure" tabindex="-1">構造 <a class="header-anchor" href="#Structure" aria-label="Permalink to &quot;構造 {#Structure}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>[] (array access)</td><td>配列アクセス演算子は、配列内の位置を指定するために使用します。</td></tr><tr><td>= (assign)</td><td>変数に値を代入する</td></tr><tr><td>catch</td><td>catch キーワードは try と共に使用し、例外を処理します。</td></tr><tr><td>class</td><td>クラスの宣言を示すために使用されるキーワード</td></tr><tr><td>, (comma)</td><td>関数呼び出し時のパラメータと代入時の要素の分離</td></tr><tr><td>// (comment)</td><td>コードに埋め込まれた説明文</td></tr><tr><td>{} (curly braces)</td><td>関数ブロックやfor構造、if構造などのステートメントブロックの開始と終了を定義することができる</td></tr><tr><td>/** */ (doc comment)</td><td>コードに埋め込まれた説明文</td></tr><tr><td>. (dot)</td><td>オブジェクトのメソッドやデータへのアクセスを提供します。</td></tr><tr><td>draw()</td><td>setup()の直後に呼び出され、プログラムが停止するか、noLoop()が呼び出されるまで、そのブロックに含まれるコード行を連続的に実行する。</td></tr><tr><td>exit()</td><td>プログラムを終了する／停止する／終了する</td></tr><tr><td>extends</td><td>新しいクラスが既存のクラスのメソッドやデータフィールド（変数や定数）を継承できるようにします。</td></tr><tr><td>false</td><td>論理値 &quot;false &quot;を表す予約語</td></tr><tr><td>final</td><td>値、クラス、またはメソッドを変更できないことを示すために使用されるキーワード。</td></tr><tr><td>implements</td><td>インターフェースまたはインターフェースのグループを実装する</td></tr><tr><td>import</td><td>キーワード import は、ライブラリを Processing スケッチに読み込むために使用されます。</td></tr><tr><td>loop()</td><td>Processingにdraw()内のコードを連続実行させる。</td></tr><tr><td>/* */ (multiline comment)</td><td>コードに埋め込まれた説明文</td></tr><tr><td>new</td><td>新しい &quot;オブジェクトを作成する</td></tr><tr><td>noLoop()</td><td>draw()内のコードの連続実行を停止します。</td></tr><tr><td>null</td><td>対象が有効なデータ要素でないことを示すために使用される特別な値</td></tr><tr><td>() (parentheses)</td><td>式やパラメーターのグループ化・内包化</td></tr><tr><td>popStyle()</td><td>現在のスタイル設定を保存し、popStyle()で以前の設定を復元します。</td></tr><tr><td>pop()</td><td>pop()関数は、push()で変更された描画スタイル設定や変形を元に戻す関数である</td></tr><tr><td>private</td><td>このキーワードは、他のクラスがクラス内のフィールドやメソッドにアクセスできないようにするために使用します。</td></tr><tr><td>public</td><td>他のクラスがクラス内のフィールドやメソッドにアクセスできるようにするためのキーワードです。</td></tr><tr><td>pushStyle()</td><td>現在のスタイル設定を保存し、popStyle()で以前の設定を復元します。</td></tr><tr><td>push()</td><td>push() 関数は現在の描画スタイル設定と変換を保存し、pop() 関数はこれらの設定を復元します。</td></tr><tr><td>redraw()</td><td>draw()内のコードを1回だけ実行します。</td></tr><tr><td>return</td><td>関数から返す値を示すために使用するキーワード</td></tr><tr><td>; (semicolon)</td><td>プログラムの要素を区切るステートメントターミネータ</td></tr><tr><td>setLocation()</td><td>setLocation()関数は、コンピュータ画面の左上隅に対するProcessingスケッチの位置を定義します。</td></tr><tr><td>setResizable()</td><td>デフォルトでは、Processingスケッチのサイズを変更することはできません。</td></tr><tr><td>setTitle()</td><td>setTitle()関数は、スケッチウィンドウの上部に表示されるタイトルを定義します。</td></tr><tr><td>setup()</td><td>setup()関数は、プログラム起動時に一度だけ呼び出されます。</td></tr><tr><td>static</td><td>変数を &quot;クラス変数&quot;、メソッドを &quot;クラスメソッド &quot;として定義するためのキーワード</td></tr><tr><td>super</td><td>サブクラスのスーパークラスを参照するために使用されるキーワード</td></tr><tr><td>this</td><td>現在のオブジェクトを参照する（i</td></tr><tr><td>thread()</td><td>新しいスレッドを起動し、その新しいスレッドから指定された関数を呼び出す</td></tr><tr><td>true</td><td>論理値 &quot;true &quot;を表す予約語</td></tr><tr><td>try</td><td>try キーワードは、catch と共に例外処理に使用します。</td></tr><tr><td>void</td><td>関数が値を返さないことを示すために使用するキーワード</td></tr></tbody></table><h2 id="Control" tabindex="-1">制御 <a class="header-anchor" href="#Control" aria-label="Permalink to &quot;制御 {#Control}&quot;">​</a></h2><h3 id="条件付き" tabindex="-1">条件付き <a class="header-anchor" href="#条件付き" aria-label="Permalink to &quot;条件付き&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>break</td><td>switch, for, while などの構造体の実行を終了し、次の文にジャンプする。</td></tr><tr><td>case</td><td>switch 構造体のパラメータで評価される異なる名称を示す。</td></tr><tr><td>?: (conditional)</td><td>ifとelseの構造体を書くためのショートカット</td></tr><tr><td>continue</td><td>forやwhileの中で実行すると、ブロックの残りをスキップして次の繰り返しを開始します。</td></tr><tr><td>default</td><td>スイッチのデフォルト条件を定義するためのキーワード</td></tr><tr><td>else</td><td>if 構造を拡張し、プログラムが 2 つ以上のコードブロックのどちらかを選択できるようにした。</td></tr><tr><td>if</td><td>どのコードを実行するか、プログラムが判断できるようにする</td></tr><tr><td>switch</td><td>if else構造のように動作するが、3つ以上の選択肢から選ぶ必要がある場合はswitchの方が便利</td></tr></tbody></table><h3 id="関係演算子" tabindex="-1">関係演算子 <a class="header-anchor" href="#関係演算子" aria-label="Permalink to &quot;関係演算子&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>== (equality)</td><td>2つの値が等価であるかどうかを判定する</td></tr><tr><td>&gt; (greater than)</td><td>左の値が右の値より大きいかどうかをテストする</td></tr><tr><td>&gt;= (greater than or equal to)</td><td>左の値が右の値より大きいか、または同等の値であるかをテストします。</td></tr><tr><td>!= (inequality)</td><td>ある式が別の式と等価でないかを判定する</td></tr><tr><td>&lt; (less than)</td><td>左側の値が右側の値より小さいかどうかをテストする</td></tr><tr><td>&lt;= (less than or equal to)</td><td>左の値が右の値より小さいか、または同等の値であるかをテストします。</td></tr></tbody></table><h3 id="イテレーション" tabindex="-1">イテレーション <a class="header-anchor" href="#イテレーション" aria-label="Permalink to &quot;イテレーション&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>for</td><td>繰り返しのシーケンスを制御する</td></tr><tr><td>while</td><td>繰り返しのシーケンスを制御する</td></tr></tbody></table><h3 id="論理演算子" tabindex="-1">論理演算子 <a class="header-anchor" href="#論理演算子" aria-label="Permalink to &quot;論理演算子&quot;">​</a></h3><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>&amp;&amp; (logical AND)</td><td>2つの式を比較し、両方がtrueと評価された場合のみtrueを返します。</td></tr><tr><td>! (logical NOT)</td><td>式のブール値を反転させる</td></tr><tr><td>｜｜ (logical OR)</td><td>2つの式を比較し、一方または両方が真と評価された場合に真を返す</td></tr></tbody></table><h2 id="Environment" tabindex="-1">環境 <a class="header-anchor" href="#Environment" aria-label="Permalink to &quot;環境 {#Environment}&quot;">​</a></h2><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>cursor()</td><td>カーソルをあらかじめ定義されたシンボルや画像に設定する、またはすでに非表示になっている場合は表示状態にする</td></tr><tr><td>delay()</td><td>delay()関数は、指定された時間だけプログラムを停止させる関数です。</td></tr><tr><td>displayDensity()</td><td>画面が高密度であれば &quot;2&quot;、そうでなければ &quot;1 &quot;を返す。</td></tr><tr><td>displayHeight</td><td>コンピュータ画面の高さを格納する変数</td></tr><tr><td>displayWidth</td><td>コンピュータ画面の幅を格納する変数</td></tr><tr><td>focused</td><td>Processingプログラムが &quot;focused&quot; されているかどうかを確認する。</td></tr><tr><td>frameCount</td><td>プログラム起動時から表示されたフレーム数を格納するシステム変数</td></tr><tr><td>frameRate</td><td>ソフトウェアが実行される際のおおよそのフレームレートを格納するシステム変数</td></tr><tr><td>height</td><td>表示ウィンドウの高さを格納するシステム変数</td></tr><tr><td>noCursor()</td><td>カーソルを非表示にする</td></tr><tr><td>noSmooth()</td><td>すべてのジオメトリとフォントをピクセル補間するのではなく、ギザギザ（エイリアス）のエッジと拡大時のピクセル間のハードエッジを持つ画像を描画します。</td></tr><tr><td>pixelDensity()</td><td>高解像度のスクリーンで、Processingがすべてのピクセルを使ってレンダリングできるようにします。</td></tr><tr><td>pixelHeight</td><td>高解像度ディスプレイ使用時の実際の画素の高さです。</td></tr><tr><td>pixelWidth</td><td>高解像度ディスプレイ使用時の実際の画素幅。</td></tr><tr><td>fullScreen()</td><td>コンピュータのディスプレイのフルサイズを使用してスケッチを開く</td></tr><tr><td>frameRate()</td><td>1秒間に表示するフレーム数を指定します。</td></tr><tr><td>settings()</td><td>size()のパラメータを変数で定義することが絶対に必要な場合に使用します。</td></tr><tr><td>size()</td><td>表示ウィンドウの寸法をピクセル単位で定義します。</td></tr><tr><td>smooth()</td><td>すべてのジオメトリを滑らかな（アンチエイリアス）エッジで描画する</td></tr><tr><td>width</td><td>表示ウィンドウの幅を格納するシステム変数</td></tr></tbody></table>',106),o=[h];function l(i,n,s,b,c,u){return r(),d("div",null,o)}const p=t(e,[["render",l]]);export{m as __pageData,p as default};
