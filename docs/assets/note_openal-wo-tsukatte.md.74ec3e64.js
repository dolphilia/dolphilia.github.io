import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"OpenALを使ってホワイトノイズを再生する","description":"","frontmatter":{},"headers":[],"relativePath":"note/openal-wo-tsukatte.md","filePath":"note/openal-wo-tsukatte.md","lastUpdated":1676126774000}'),p={name:"note/openal-wo-tsukatte.md"},o=l(`<h1 id="openalを使ってホワイトノイズを再生する" tabindex="-1">OpenALを使ってホワイトノイズを再生する <a class="header-anchor" href="#openalを使ってホワイトノイズを再生する" aria-label="Permalink to &quot;OpenALを使ってホワイトノイズを再生する&quot;">​</a></h1><p>ほとんどのコンピュータには音を再生したり録音したりする端子がついています。あなたのコンピュータにもヘッドフォン端子が付いていることでしょう。それらの端子はサウンドカードと呼ばれる基板とつながっています</p><p>サウンドカードはコンピュータの信号を再生できる波形として出力したり、マイクからの電気信号を一時的に蓄積してそれをコンピュータが取り出せるようにしたりしています。しかしプログラムがサウンドカードにある端子を直接操作することはできません。そのためデバイスドライバと呼ばれるハードウェアを制御するためのソフトウェアを用いて、データを読み書きします</p><p>デバイスドライバはサウンドカードごとに異なります。とはいえオペレーティングシステムは多くのサウンドカードやデバイスドライバをサポートしています。そして共通のコードを書くための機能を提供しています</p><p>プログラマが音を再生するプログラムを書くには、オペレーティングシステムの用意する方法に精通しなければなりません。それぞれ次のような方法が用意されています。</p><ul><li>Windows – Win32 マルチメディア API</li><li>Mac OSX – Core Audio Frameworks</li><li>Linux – ALSA</li></ul><p>これらは原始的なものです。そのため、さらに抽象的な方法が開発者によって備えられてきました。そのうちの１つがOpenALです</p><h2 id="多様なオペレーティングシステムで動作するサウンドライブラリ" tabindex="-1">多様なオペレーティングシステムで動作するサウンドライブラリ <a class="header-anchor" href="#多様なオペレーティングシステムで動作するサウンドライブラリ" aria-label="Permalink to &quot;多様なオペレーティングシステムで動作するサウンドライブラリ&quot;">​</a></h2><p>OpenALは多様なサウンド処理を行なうためのサウンドライブラリです。多様なオペレーティングシステムに対応しているため、異なるハードウェアのサウンド機能をほぼ同じコードで呼び出すことができます。例えばWindowsやLinuxの他に、WiiやPlayStation 3などのゲーム機、iOSやAndroidといったモバイルOSでも採用されています</p><p>現在はクリエイティブテクノロジーが開発を担っていますが、開発元はコンピュータゲームの移植を行っていたLoki Software です。Windows のゲームをLinuxに移植しやすくするために開発したものであり、OpenGLに似せて作られています。OpenGLは3Dグラフィックスのためのライブラリです</p><h2 id="openalを構成する3つの要素-buffer-source-listener" tabindex="-1">OpenALを構成する３つの要素：Buffer, Source, Listener <a class="header-anchor" href="#openalを構成する3つの要素-buffer-source-listener" aria-label="Permalink to &quot;OpenALを構成する３つの要素：Buffer, Source, Listener&quot;">​</a></h2><p>Buffer、Source、Listenerの３つがOpenALのプログラムを構成します。Bufferによって音声データが管理され、Sourceによってそのデータを再生します。Source（音源）とListener（音の検出点）は3D空間上に配置することができ、音の聞こえ方をシミュレートすることができます</p><ul><li>Buffer – 音声データを保存しておくメモリ領域</li><li>Source – 空間上の位置、再生や音量の情報などの音源の情報</li><li>Listener – 空間上の位置、移動や向きの情報など音の検出点の情報</li></ul><p>OpenALはMP3やAACなどの圧縮フォーマットに対応していないので、それらのファイルを用いる場合は、別途ライブラリを利用する必要があります</p><h2 id="openalでホワイトノイズを再生するプログラムを作る" tabindex="-1">OpenALでホワイトノイズを再生するプログラムを作る <a class="header-anchor" href="#openalでホワイトノイズを再生するプログラムを作る" aria-label="Permalink to &quot;OpenALでホワイトノイズを再生するプログラムを作る&quot;">​</a></h2><ol><li>OpenALの準備</li></ol><p>OpenALのCプログラムを書く場合、まずOpenALを使える状態にしなければなりません。Linuxの例とMacOSXの場合とを説明します</p><p>MacOSXでは最初からOpenALが開発環境に含まれています。そのためXcodeをインストールしたら、すでに開発環境が整っていることになります。次のようなプリプロセッサで機能を読み込むことができます</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (macOSの場合)</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;OpenAL/al.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;OpenAL/alc.h&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (macOSの場合)</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;OpenAL/al.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;OpenAL/alc.h&gt;</span></span></code></pre></div><p>コンパイルには -framework OpenAL オプションをつけます。たとえば次のようにコンパイルします</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># (macOSの場合)</span></span>
<span class="line"><span style="color:#B392F0;">gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-framework</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">OpenAL</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># (macOSの場合)</span></span>
<span class="line"><span style="color:#6F42C1;">gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-framework</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OpenAL</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p>Linuxでは最初にopenal開発環境をインストールする必要があるでしょう。Ubuntuであれば端末に次のように入力することで、環境をインストールすることができます</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt-get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">libopenal-dev</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt-get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">libalut-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">libopenal-dev</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">libalut-dev</span></span></code></pre></div><p>プリプロセッサは次のようにします</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;AL/al.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;AL/alc.h&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;AL/al.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;AL/alc.h&gt;</span></span></code></pre></div><p>コンパイルは次のようにします</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#B392F0;">gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.c</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-lalut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-lopenal</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># (Ubuntuの場合)</span></span>
<span class="line"><span style="color:#6F42C1;">gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.c</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-lalut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-lopenal</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><ol start="2"><li>OpenALの初期化</li></ol><p>OpenALを使うには、まず初期化を行なう必要があります。最初にOpenALデバイスを開き、次にOpenALコンテキストを作成します。操作に使うコンテキストを選択する必要もあります</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ALCdevice </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">device;</span></span>
<span class="line"><span style="color:#E1E4E8;">ALCcontext </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">context;</span></span>
<span class="line"><span style="color:#E1E4E8;">device </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alcOpenDevice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alcCreateContext</span><span style="color:#E1E4E8;">(device, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ALCdevice </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">device;</span></span>
<span class="line"><span style="color:#24292E;">ALCcontext </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">context;</span></span>
<span class="line"><span style="color:#24292E;">device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alcOpenDevice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alcCreateContext</span><span style="color:#24292E;">(device, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span></code></pre></div><p>プログラムに出てくるALCはOpenALのコンテキスト管理のためのAPIです。この例では alcOpenDevice関数 を使ってプログラムがデバイスに接続します。またalcCreateContextでコンテキストを生成します。もし関数でエラーがあった場合はNULLが返ります</p><p>次に操作に使うコンテキストを選択するために alcMakeContextCurrent関数 を使います</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alcMakeContextCurrent</span><span style="color:#E1E4E8;">(context);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alcMakeContextCurrent</span><span style="color:#24292E;">(context);</span></span></code></pre></div><p>戻り値が ALC_TRUE の場合は成功で、ALC_FALSE の場合はエラーを意味します</p><ol start="3"><li>乱数でノイズ成分を生成する</li></ol><p>ノイズ成分を生成するために、C言語のrand関数を用います。任意の範囲の乱数を得る関数を用意します</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rnd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">min</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">max</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> min </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)(</span><span style="color:#B392F0;">rand</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">min </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> RAND_MAX));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rnd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">min</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">max</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)(</span><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">min </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> RAND_MAX));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>この関数を用いて、ホワイトノイズの波形データを作ります</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ALshort </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">44100</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> //44.1kHで３秒のデータ</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//ノイズを生成</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">44100</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[i]</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">rnd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ALshort </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">44100</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> //44.1kHで３秒のデータ</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//ノイズを生成</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">44100</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[i]</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">rnd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">);</span></span></code></pre></div><p>ALshort型はC言語のshort型と同等です</p><ol start="4"><li>バッファとソースを作成する</li></ol><p>alGenBuffersを使って任意の数のバッファを要求します。この関数はいつでも呼び出し可能で、複数呼び出したときは複数のバッファの組を生成します</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alGenBuffers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">buffer</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alGenBuffers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">buffer</span><span style="color:#24292E;">);</span></span></code></pre></div><p>バッファの内容、つまりサンプルデータを設定するにはalBufferData関数を使います。使用できるフォーマットは次のとおりです</p><ul><li>AL_FORMAT_MONO8</li><li>AL_FORMAT_MONO16</li><li>AL_FORMAT_STEREO8</li><li>AL_FORMAT_STEREO16</li></ul><p>８ビットデータは０から２５５の符号なし値で表現されます。１２８が無音の出力となります。１６ビットデータは-32768から32767の符号あり値で表現されます。０が無音の出力です</p><p>１チャネル以上のオーディオデータを含むバッファは3D空間化機能なしで再生されます。そのため、それらの形式はBGMに向いていると言えます</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alBufferData</span><span style="color:#E1E4E8;">(ALuint </span><span style="color:#FFAB70;">buffer</span><span style="color:#E1E4E8;">,ALenum </span><span style="color:#FFAB70;">format</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ALvoid </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">,ALsizei </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">,ALsizei </span><span style="color:#FFAB70;">freq</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alBufferData</span><span style="color:#24292E;">(ALuint </span><span style="color:#E36209;">buffer</span><span style="color:#24292E;">,ALenum </span><span style="color:#E36209;">format</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ALvoid </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">data</span><span style="color:#24292E;">,ALsizei </span><span style="color:#E36209;">size</span><span style="color:#24292E;">,ALsizei </span><span style="color:#E36209;">freq</span><span style="color:#24292E;">);</span></span></code></pre></div><p>それぞれ次のように設定します</p><ul><li>buffer – バッファ</li><li>format – データのフォーマット</li><li>data – サンプルデータ</li><li>size – データのサイズ</li><li>freq – 周波数</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alBufferData</span><span style="color:#E1E4E8;">(buffer, AL_FORMAT_MONO16, data, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(data), </span><span style="color:#79B8FF;">44100</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alBufferData</span><span style="color:#24292E;">(buffer, AL_FORMAT_MONO16, data, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(data), </span><span style="color:#005CC5;">44100</span><span style="color:#24292E;">);</span></span></code></pre></div><p>次にソースを作成します。ソースは、位置や速度、サンプルデータを伴うバッファのような属性を持ちます。alGensourcesを使って任意の数のソースを要求します</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alGenSources</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alGenSources</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">source</span><span style="color:#24292E;">);</span></span></code></pre></div><p>ソースの各種設定はalSourceiで行います。alSourcei（ソース、設定したい項目を表す定数、設定値）;というように設定します</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alSourcei</span><span style="color:#E1E4E8;">(source, AL_BUFFER, buffer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alSourcei</span><span style="color:#24292E;">(source, AL_BUFFER, buffer);</span></span></code></pre></div><ol start="5"><li>ソースを再生する</li></ol><p>プログラムは、alGetSourceとパラメータ AL_SOURCE_STAT を使用して、現在のソースのステートを取得することができます。現在のステートはAL_INITIAL、AL_PLAYING、AL_PAUSED、AL_STOPPEDの４つのうちの１つでしょう。AL_PLAYINGかAL_PAUSEDであればソースは有効であり、AL_STOPPEDかAL_INITIALのどちらかであればソースは無効であると考えられます。既定のステートはINITIALです</p><p>ソースを操作する以下のような関数があります</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alSourcePlay</span><span style="color:#E1E4E8;"> (ALuint </span><span style="color:#FFAB70;">sName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alSourcePause</span><span style="color:#E1E4E8;"> (ALuint </span><span style="color:#FFAB70;">sName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alSourceStop</span><span style="color:#E1E4E8;"> (ALuint </span><span style="color:#FFAB70;">sName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alSourceRewind</span><span style="color:#E1E4E8;"> (ALuint </span><span style="color:#FFAB70;">sName</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alSourcePlay</span><span style="color:#24292E;"> (ALuint </span><span style="color:#E36209;">sName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alSourcePause</span><span style="color:#24292E;"> (ALuint </span><span style="color:#E36209;">sName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alSourceStop</span><span style="color:#24292E;"> (ALuint </span><span style="color:#E36209;">sName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alSourceRewind</span><span style="color:#24292E;"> (ALuint </span><span style="color:#E36209;">sName</span><span style="color:#24292E;">);</span></span></code></pre></div><p>ソースを再生するには以下のようにします</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alSourcePlay</span><span style="color:#E1E4E8;">(source);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alSourcePlay</span><span style="color:#24292E;">(source);</span></span></code></pre></div><p>プログラムがすぐに終了してしまわないように、sleep関数を用いて指定の時間スリープさせます</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span></code></pre></div><p>その後、ソースに割り当てられているバッファを停止します。これはsourceをAL_STOPEDすなわち停止状態にします</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alSourceStop</span><span style="color:#E1E4E8;">(source);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alSourceStop</span><span style="color:#24292E;">(source);</span></span></code></pre></div><ol start="6"><li>ソースの削除とバッファの解放</li></ol><p>alDeleteSourcesを使って任意の数のソースの削除を要求できます。再生中のソースも削除可能です。ソースは自動的に停止され、そして削除されます</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alDeleteSources</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alDeleteSources</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">source</span><span style="color:#24292E;">);</span></span></code></pre></div><p>alDeleteBuffersを使って任意の数のバッファの削除を要求できます。alIsBuffer(bname)はバッファの削除を証明するのに使う事ができます。ソースに割り当てられたバッファは削除不能です</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alDeleteBuffers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">buffer</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alDeleteBuffers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">buffer</span><span style="color:#24292E;">);</span></span></code></pre></div><ol start="7"><li>終了処理</li></ol><p>コンテキストを破棄するためには、まずそのコンテキストをalcMakeCurrent関数にNULLコンテキストを渡して解放する必要があります。そのようにしてコンテキストをカレントから解除しています。コンテキストに含まれる全てのソースはコンテキスト破棄時に自動的に削除されます。コンテキストの削除はalcDestroyContext関数で行います</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alcMakeContextCurrent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">alcDestroyContext</span><span style="color:#E1E4E8;">(context);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alcMakeContextCurrent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">alcDestroyContext</span><span style="color:#24292E;">(context);</span></span></code></pre></div><p>プログラムをデバイスから切断するにはalcCloseDevice関数を用います。成功すればALC_TRUEが、失敗したならALC_FALSEが返ります。一旦クローズするとコンテキストとソースは使えなくなります</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">alcCloseDevice</span><span style="color:#E1E4E8;">(device);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alcCloseDevice</span><span style="color:#24292E;">(device);</span></span></code></pre></div><ol start="8"><li>作成したプログラム例（Linuxの例）</li></ol><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Macの場合は</span></span>
<span class="line"><span style="color:#6A737D;">// #include &lt;OpenAL/al.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// #include &lt;OpenAL/alc.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// とする。コンパイルは</span></span>
<span class="line"><span style="color:#6A737D;">// gcc test.c -framework OpenAL -o test</span></span>
<span class="line"><span style="color:#6A737D;">// などとする。</span></span>
<span class="line"><span style="color:#6A737D;">// Linuxの場合、コンパイルは</span></span>
<span class="line"><span style="color:#6A737D;">// gcc test.c -lalut -lopenal -o test</span></span>
<span class="line"><span style="color:#6A737D;">// などとする。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;AL/al.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;AL/alc.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rnd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">min</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">max</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> min </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)(</span><span style="color:#B392F0;">rand</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (max – min </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> RAND_MAX));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ALCdevice </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">device;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ALCcontext </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">context;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ALshort </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">44100</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    ALuint buffer,source;</span></span>
<span class="line"><span style="color:#E1E4E8;">    device </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alcOpenDevice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">alcCreateContext</span><span style="color:#E1E4E8;">(device, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alcMakeContextCurrent</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alGenBuffers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">44100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[i]</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">rnd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32767</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alBufferData</span><span style="color:#E1E4E8;">(buffer, AL_FORMAT_MONO16, data, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(data), </span><span style="color:#79B8FF;">44100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alGenSources</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">source);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alSourcei</span><span style="color:#E1E4E8;">(source, AL_BUFFER, buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alSourcePlay</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alSourceStop</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alDeleteSources</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">source);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alDeleteBuffers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alcMakeContextCurrent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alcDestroyContext</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">alcCloseDevice</span><span style="color:#E1E4E8;">(device);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Macの場合は</span></span>
<span class="line"><span style="color:#6A737D;">// #include &lt;OpenAL/al.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// #include &lt;OpenAL/alc.h&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// とする。コンパイルは</span></span>
<span class="line"><span style="color:#6A737D;">// gcc test.c -framework OpenAL -o test</span></span>
<span class="line"><span style="color:#6A737D;">// などとする。</span></span>
<span class="line"><span style="color:#6A737D;">// Linuxの場合、コンパイルは</span></span>
<span class="line"><span style="color:#6A737D;">// gcc test.c -lalut -lopenal -o test</span></span>
<span class="line"><span style="color:#6A737D;">// などとする。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;AL/al.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;AL/alc.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rnd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">min</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">max</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)(</span><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (max – min </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> RAND_MAX));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    ALCdevice </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">device;</span></span>
<span class="line"><span style="color:#24292E;">    ALCcontext </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">context;</span></span>
<span class="line"><span style="color:#24292E;">    ALshort </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">44100</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    ALuint buffer,source;</span></span>
<span class="line"><span style="color:#24292E;">    device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alcOpenDevice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">alcCreateContext</span><span style="color:#24292E;">(device, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alcMakeContextCurrent</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alGenBuffers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">buffer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">44100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[i]</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">rnd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32767</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alBufferData</span><span style="color:#24292E;">(buffer, AL_FORMAT_MONO16, data, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(data), </span><span style="color:#005CC5;">44100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alGenSources</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">source);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alSourcei</span><span style="color:#24292E;">(source, AL_BUFFER, buffer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alSourcePlay</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alSourceStop</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alDeleteSources</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">source);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alDeleteBuffers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">buffer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alcMakeContextCurrent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alcDestroyContext</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alcCloseDevice</span><span style="color:#24292E;">(device);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,77),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const A=s(p,[["render",c]]);export{u as __pageData,A as default};
