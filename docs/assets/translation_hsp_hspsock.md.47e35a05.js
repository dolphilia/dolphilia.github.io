import{_ as s,o as p,c as a,Q as e}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"ソケット通信","description":"","frontmatter":{},"headers":[],"relativePath":"translation/hsp/hspsock.md","filePath":"translation/hsp/hspsock.md","lastUpdated":1676126774000}'),n={name:"translation/hsp/hspsock.md"},o=e(`<h1 id="ソケット通信" tabindex="-1">ソケット通信 <a class="header-anchor" href="#ソケット通信" aria-label="Permalink to &quot;ソケット通信&quot;">​</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li></ul><h2 id="sockopen" tabindex="-1">sockopen <a class="header-anchor" href="#sockopen" aria-label="Permalink to &quot;sockopen {#sockopen}&quot;">​</a></h2><p>ソケットを初期化して接続</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,&quot;url&quot;,p2 p1=0〜31(0) : ソケットID番号 &quot;url&quot; : URL指定文字列 p2=0〜(0) : ポート番号</p><p><strong>説明</strong>:</p><p>ソケットを初期化して使用できるようにします。 TCP/IP通信を行なう際には、必ず最初に初期化して相手のサーバーに接続しなければなりません。</p><p>p1でソケットID番号を指定します。</p><p>&quot;url&quot;で接続先のURLを文字列で指定します。 これは、「www.yahoo.co.jp」のようなドメイン名か、「202.132.50.7」のようなIPアドレスを直接指定したもののどちらでもかまいません。「http://」や「ftp://」 のようなスキーム名は入れないでください。</p><p>p2で、接続するポート番号を指定します。これは、どのようなサーバーに接続するかによって違います。オリジナルのポートを作成する場合は、1024以降を使用するようにしてください。</p><p>sockopen命令が実行された結果が、システム変数statに代入されます。 結果がエラーの場合は、0以外の値になります。 初期化でエラーが起こった場合は、通信を行なうことはできません。</p><p>システム変数statの値の詳細は以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">stat : エラー内容</span></span>
<span class="line"><span style="color:#e1e4e8;"> ----------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">   1   : TCP/IPがWindowsにインストールされていない</span></span>
<span class="line"><span style="color:#e1e4e8;">   2   : ソケットの初期化に失敗した</span></span>
<span class="line"><span style="color:#e1e4e8;">   3   : URLのサーバー名取得に失敗した</span></span>
<span class="line"><span style="color:#e1e4e8;">   4   : サーバーに接続できなかった</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">stat : エラー内容</span></span>
<span class="line"><span style="color:#24292e;"> ----------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">   1   : TCP/IPがWindowsにインストールされていない</span></span>
<span class="line"><span style="color:#24292e;">   2   : ソケットの初期化に失敗した</span></span>
<span class="line"><span style="color:#24292e;">   3   : URLのサーバー名取得に失敗した</span></span>
<span class="line"><span style="color:#24292e;">   4   : サーバーに接続できなかった</span></span></code></pre></div><p><strong>参照</strong>:</p><p>sockmake sockclose</p><h2 id="sockclose" tabindex="-1">sockclose <a class="header-anchor" href="#sockclose" aria-label="Permalink to &quot;sockclose {#sockclose}&quot;">​</a></h2><p>ソケットを切断</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1 p1=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>接続されているソケットを切断します。 初期化したソケットは必ず sockclose命令で切断するようにしてください。</p><p><strong>参照</strong>:</p><p>sockopen sockmake</p><h2 id="sockput" tabindex="-1">sockput <a class="header-anchor" href="#sockput" aria-label="Permalink to &quot;sockput {#sockput}&quot;">​</a></h2><p>データを送信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>&quot;message&quot;,p1 &quot;message&quot; : 送信するメッセージ p1=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>ソケットにデータを送信します。 &quot;message&quot;で指定した文字列か、または文字列型変数の内容をそのまま送信します。</p><p>送信中にエラーが発生した場合は、システム変数 statに0以外の値が代入されます。</p><p><strong>参照</strong>:</p><p>sockputc sockputb</p><h2 id="sockputc" tabindex="-1">sockputc <a class="header-anchor" href="#sockputc" aria-label="Permalink to &quot;sockputc {#sockputc}&quot;">​</a></h2><p>データを1byte送信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2 p1=0〜255(0) : 送信するメッセージ(1byte) p2=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>ソケットにデータを送信します。p1で指定した数値を1byte送信します。</p><p>送信中にエラーが発生した場合は、システム変数 statに0以外の値が代入されます。</p><p><strong>参照</strong>:</p><p>sockput sockputb</p><h2 id="sockputb" tabindex="-1">sockputb <a class="header-anchor" href="#sockputb" aria-label="Permalink to &quot;sockputb {#sockputb}&quot;">​</a></h2><p>バッファのデータを送信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3,p4 p1=変数 : 送信内容が格納されている変数名 p2=0〜(0) : バッファオフセット(byte単位) p3=0〜(64) : 送信サイズ(byte単位) p4=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>p1で指定した変数バッファの内容をバイナリデータとしてソケットに送信します。 p1で指定される変数は、文字列型、数値型のどちらでも構いません。変数が確保しているメモリの内容が直接送信されます。</p><p>p2で、変数バッファのオフセットを指定できます。たとえば、p2が100の場合は、先頭から100byte目からの内容を送信することになります。p2が省略された場合は0になります。</p><p>p3で送信サイズを指定します。送信サイズは、変数バッファにあらかじめ確保されているサイズ以内でなければなりません。p3が省略されるか、0の場合は、64(byte)が指定されます。</p><p>sockputb命令の実行後は、システム変数statに実際に送信されたサイズ(byte)が代入されます。システム変数 statの内容が0だった場合は、通信エラー、もしくはタイムアウトでまったく送信されていないことを示しています。 (変数バッファの内容は、peek命令、poke命令などで操作することが可能です)</p><p><strong>参照</strong>:</p><p>sockput sockputc</p><h2 id="sockcheck" tabindex="-1">sockcheck <a class="header-anchor" href="#sockcheck" aria-label="Permalink to &quot;sockcheck {#sockcheck}&quot;">​</a></h2><p>データの到着を調べる</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1 p1=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>指定したソケットに sockget系の命令で取得できるデータが到着しているかどうか調べます。 受信可能なデータがある場合は、システム変数 statに0が代入されます。データが到着していない場合は、システム変数statは1になります。</p><p>通信エラーなどが起こった場合は、システム変数 statは2以上の値になります。エラーが起こった場合は、通信を行なうことはできません。</p><p>システム変数statの値の詳細は以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">stat : 内容</span></span>
<span class="line"><span style="color:#e1e4e8;"> ---------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">   0   : 受信データが到着している</span></span>
<span class="line"><span style="color:#e1e4e8;">   1   : 受信データは到着していない(タイムアウト)</span></span>
<span class="line"><span style="color:#e1e4e8;">   2   : 通信中にエラーが発生した</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">stat : 内容</span></span>
<span class="line"><span style="color:#24292e;"> ---------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">   0   : 受信データが到着している</span></span>
<span class="line"><span style="color:#24292e;">   1   : 受信データは到着していない(タイムアウト)</span></span>
<span class="line"><span style="color:#24292e;">   2   : 通信中にエラーが発生した</span></span></code></pre></div><p>sockcheckはデータの到着を調べるだけです。 実際のデータを取得するには、sockget, sockgetc, sockgetbなどの命令で受信する必要があります。</p><p><strong>参照</strong>:</p><p>sockget sockgetc sockgetb</p><h2 id="sockget" tabindex="-1">sockget <a class="header-anchor" href="#sockget" aria-label="Permalink to &quot;sockget {#sockget}&quot;">​</a></h2><p>データを受信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3 p1=変数 : 受信内容が格納される変数名 p2=0〜(64) : 受信サイズ(byte単位) p3=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>ソケットからデータを受信し、p1で指定した文字列型の変数に内容を代入します。p2で最大受信サイズを指定します。</p><p>受信中にエラーが発生した場合は、システム変数 statに0以外の値が代入されます。</p><p><strong>参照</strong>:</p><p>sockgetc sockgetb</p><h2 id="sockgetc" tabindex="-1">sockgetc <a class="header-anchor" href="#sockgetc" aria-label="Permalink to &quot;sockgetc {#sockgetc}&quot;">​</a></h2><p>データを1byte受信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2 p1=変数 : 受信内容が格納される変数名 p2=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>ソケットからデータを 1byte受信し、p1で指定した数値型の変数に内容を代入します。</p><p>受信中にエラーが発生した場合は、システム変数 statに0以外の値が代入されます。</p><p><strong>参照</strong>:</p><p>sockget sockgetb</p><h2 id="sockgetb" tabindex="-1">sockgetb <a class="header-anchor" href="#sockgetb" aria-label="Permalink to &quot;sockgetb {#sockgetb}&quot;">​</a></h2><p>バッファにデータを受信</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3,p4 p1=変数 : 受信内容が格納される変数名 p2=0〜(0) : バッファオフセット (byte単位) p3=0〜(64) : 受信サイズ (byte単位) p4=0〜31(0) : ソケットID番号</p><p><strong>説明</strong>:</p><p>ソケットからデータを受信し、p1で指定した変数バッファに内容をバイナリデータとして格納します。 p1で指定される変数は、文字列型、数値型のどちらでも構いません。変数が確保しているメモリに直接受信内容を読み込みます。</p><p>p2で、格納されるバッファのオフセットを指定できます。 たとえば、p2が100の場合は、先頭から100byte目から受信データを格納することになります。p2が省略された場合は0になります。</p><p>p3で最大受信サイズを指定します。 受信サイズを指定する場合は、変数バッファに指定したサイズを格納できるだけのメモリが、あらかじめ確保されていなければなりません。 p3が省略されるか、0の場合は、64(byte)が指定されます。</p><p>sockgetb命令の実行後は、システム変数statに実際に受信されたサイズ(byte)が代入されます。システム変数 statの内容が0だった場合は、通信エラー、もしくはタイムアウトでまったく受信されていないことを示しています。 (変数バッファの内容は、peek命令、poke命令などで操作することが可能です)</p><p><strong>参照</strong>:</p><p>sockget sockgetc</p><h2 id="sockmake" tabindex="-1">sockmake <a class="header-anchor" href="#sockmake" aria-label="Permalink to &quot;sockmake {#sockmake}&quot;">​</a></h2><p>ソケットをサーバーとして初期化</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2 p1=0〜31(0) : ソケットID番号 p2=0〜(0) : ポート番号</p><p><strong>説明</strong>:</p><p>ソケットを初期化してサーバーとして使用できるようにします。 p1でソケットID番号を指定します。 p2で、ポート番号を指定します。既にシステムで予約されているソケット番号は使用できません。独自のプロトコルを定義する場合は、1024以降の番号を使うようにするといいでしょう。</p><p>sockmake命令が実行されると、サーバーとしての準備が整います。 この後、実際にクライアントと接続するためには、sockwait命令でクライアントの接続が完了するまで待つ必要があります。</p><p>結果がエラーの場合は、 0以外の値になります。初期化でエラーが起こった場合は、通信を行なうことはできません。</p><p>システム変数 statの値の詳細は以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">stat : エラー内容</span></span>
<span class="line"><span style="color:#e1e4e8;"> ----------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">   1   : TCP/IPがWindowsにインストールされていない</span></span>
<span class="line"><span style="color:#e1e4e8;">   2   : ソケットの初期化に失敗した</span></span>
<span class="line"><span style="color:#e1e4e8;">   3   : Socketのバインドに失敗した</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">stat : エラー内容</span></span>
<span class="line"><span style="color:#24292e;"> ----------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">   1   : TCP/IPがWindowsにインストールされていない</span></span>
<span class="line"><span style="color:#24292e;">   2   : ソケットの初期化に失敗した</span></span>
<span class="line"><span style="color:#24292e;">   3   : Socketのバインドに失敗した</span></span></code></pre></div><p><strong>参照</strong>:</p><p>sockwait sockopen sockclose</p><h2 id="sockwait" tabindex="-1">sockwait <a class="header-anchor" href="#sockwait" aria-label="Permalink to &quot;sockwait {#sockwait}&quot;">​</a></h2><p>クライアントの着信を待つ</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2 p1=0〜31(0) : ソケットID番号 p2=0〜31(0) : 代替ソケットID番号</p><p><strong>説明</strong>:</p><p>sockmake命令でサーバーとして準備されたソケットで、クライアントの着信を待ちます。 sockwait命令は、必ずsockmake命令が正常に終了した後に実行される必要があります。</p><p>sockwait命令は、クライアントの着信がない場合や、エラーが発生した場合には、システム変数 statに0以外の値を返します。 システム変数 statに0が代入された場合にはじめてクライアントとの接続に成功し、sockget命令、sockput命令などの通信を行なうことができるようになります。</p><p>サーバーとして着信を待つ場合には、sockmake命令でソケットをサーバーとして初期化した後、sockwait命令でシステム変数 statが0になるまでループして待機して下さい。その際には、必ずループ内に waitやawait命令を入れて間をあける必要があります。 そうしないと、 Windowsの他のアプリケーションにタスクが回らなくなってしまいます。</p><p>p2が0か省略された場合は、p1で指定されたソケットID番号を通して、クライアントとの通信を行なうことが可能になります。 p2に0以外の値を指定した場合は、着信したクライアントとの通信をp2で指定した代替ソケットIDを通して行なうことができます。 この場合、p1で指定したソケットID番号では、引き続きsockmake命令でサーバー動作を行なうことが可能です。同一のポートで、複数のクライアント着信を受け付ける場合は、代替ソケットID番号を使用するようにしてください。</p><p>結果がエラーの場合は、 0以外の値になります。エラーが起こった場合は、通信を行なうことはできません。</p><p>システム変数 statの値の詳細は以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">stat : エラー内容</span></span>
<span class="line"><span style="color:#e1e4e8;"> -----------------------------------------------------</span></span>
<span class="line"><span style="color:#e1e4e8;">   1   : クライアントから接続要求が来ていない</span></span>
<span class="line"><span style="color:#e1e4e8;">   2   : sockmake命令でサーバーの準備ができていない</span></span>
<span class="line"><span style="color:#e1e4e8;">   3   : Socketが受信状態になっていない</span></span>
<span class="line"><span style="color:#e1e4e8;">   4   : Socketを受信状態にするのに失敗した</span></span>
<span class="line"><span style="color:#e1e4e8;">   5   : クライアントとの接続に失敗した</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">stat : エラー内容</span></span>
<span class="line"><span style="color:#24292e;"> -----------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">   1   : クライアントから接続要求が来ていない</span></span>
<span class="line"><span style="color:#24292e;">   2   : sockmake命令でサーバーの準備ができていない</span></span>
<span class="line"><span style="color:#24292e;">   3   : Socketが受信状態になっていない</span></span>
<span class="line"><span style="color:#24292e;">   4   : Socketを受信状態にするのに失敗した</span></span>
<span class="line"><span style="color:#24292e;">   5   : クライアントとの接続に失敗した</span></span></code></pre></div><p><strong>参照</strong>:</p><p>sockmake</p><h2 id="ipget" tabindex="-1">ipget <a class="header-anchor" href="#ipget" aria-label="Permalink to &quot;ipget {#ipget}&quot;">​</a></h2><p>ホストのIPアドレスを取得</p><p><strong>グループ</strong>:</p><p>通信制御命令</p><p><strong>パラメーター</strong>:</p><p><strong>説明</strong>:</p><p>ホストのIPアドレスを取得して、システム変数refstrに代入します。</p><p>IPアドレスを取得する際にエラーが発生すると、システム変数 statに1が代入されます。正常にIPアドレスが取得できた場合には、システム変数statの値は0になります。</p>`,151),t=[o];function c(l,r,i,k,g,h){return p(),a("div",null,t)}const b=s(n,[["render",c]]);export{u as __pageData,b as default};
