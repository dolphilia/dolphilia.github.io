import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.43c433ff.js";const g=JSON.parse('{"title":"配列を繰り返し処理する方法","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/wiki/how_to_iterate_over_an_array.md","filePath":"translation/duktape/wiki/how_to_iterate_over_an_array.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/wiki/how_to_iterate_over_an_array.md"},o=p(`<h1 id="配列を繰り返し処理する方法" tabindex="-1">配列を繰り返し処理する方法 <a class="header-anchor" href="#配列を繰り返し処理する方法" aria-label="Permalink to &quot;配列を繰り返し処理する方法&quot;">​</a></h1><h2 id="ecmascript-コード" tabindex="-1">ECMAScript コード <a class="header-anchor" href="#ecmascript-コード" aria-label="Permalink to &quot;ECMAScript コード&quot;">​</a></h2><p>配列を繰り返し処理する最も速い方法は、次のとおりです。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i, n, e;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// operate on &#39;e&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i, n, e;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// operate on &#39;e&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ループ条件（i &lt; arr.length）で .length を調べるのは少し遅く、arr.forEach()を使うのはかなり遅くなります。</p><h2 id="ネイティブコード" tabindex="-1">ネイティブコード <a class="header-anchor" href="#ネイティブコード" aria-label="Permalink to &quot;ネイティブコード&quot;">​</a></h2><p>基本的なアプローチは、配列の長さを取得するために duk_get_length() を使用し、配列の要素を要求するために duk_get_prop_index() を使用します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_length</span><span style="color:#E1E4E8;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_get_prop_index</span><span style="color:#E1E4E8;">(ctx, idx_target, i);</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_length</span><span style="color:#24292E;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_get_prop_index</span><span style="color:#24292E;">(ctx, idx_target, i);</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>明示的に配列をチェックしない場合、ループはforでも動作します。</p><ul><li>.length プロパティを持つオブジェクト (バッファオブジェクト、型付き配列ビューなど)</li><li>プレーンな文字列 (コードポイントに対する反復処理)</li><li>プレーンなバッファ（バイト単位での繰り返し処理）</li></ul><p>これが好ましくない場合は、duk_is_array() を使って値の型をチェックします。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">duk_is_array</span><span style="color:#E1E4E8;">(ctx, idx_target)) {</span></span>
<span class="line"><span style="color:#6A737D;">    /* 配列でない */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_length</span><span style="color:#E1E4E8;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_get_prop_index</span><span style="color:#E1E4E8;">(ctx, idx_target, i);</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">duk_is_array</span><span style="color:#24292E;">(ctx, idx_target)) {</span></span>
<span class="line"><span style="color:#6A737D;">    /* 配列でない */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_length</span><span style="color:#24292E;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_get_prop_index</span><span style="color:#24292E;">(ctx, idx_target, i);</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>欠落した要素を（単に未定義の値のように扱うのではなく）特別に処理する必要がある場合。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_length</span><span style="color:#E1E4E8;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">duk_get_prop_index</span><span style="color:#E1E4E8;">(ctx, idx_target, i)) {</span></span>
<span class="line"><span style="color:#6A737D;">        /* 要素が存在する */</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        /* 要素が存在しない */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> i, n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_length</span><span style="color:#24292E;">(ctx, idx_target);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">duk_get_prop_index</span><span style="color:#24292E;">(ctx, idx_target, i)) {</span></span>
<span class="line"><span style="color:#6A737D;">        /* 要素が存在する */</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        /* 要素が存在しない */</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,14),e=[o];function t(c,r,E,i,y,d){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
