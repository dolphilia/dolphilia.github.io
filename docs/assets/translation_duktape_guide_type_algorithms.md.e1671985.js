import{_ as t,c as d,o as r,a as e}from"./app.e18c80f2.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"タイプ・アルゴリズム","slug":"type_algorithms","link":"#type_algorithms","children":[{"level":3,"title":"表記方法","slug":"表記方法","link":"#表記方法","children":[]},{"level":3,"title":"等価性（非厳格）","slug":"等価性-非厳格","link":"#等価性-非厳格","children":[]},{"level":3,"title":"厳密な等価性","slug":"厳密な等価性","link":"#厳密な等価性","children":[]},{"level":3,"title":"セイムバリュー","slug":"セイムバリュー","link":"#セイムバリュー","children":[]},{"level":3,"title":"型の変換とテスト","slug":"型の変換とテスト","link":"#型の変換とテスト","children":[]},{"level":3,"title":"カスタム強制（ToBuffer, ToPointer）","slug":"カスタム強制-tobuffer-topointer","link":"#カスタム強制-tobuffer-topointer","children":[]},{"level":3,"title":"加算演算子","slug":"加算演算子","link":"#加算演算子","children":[]},{"level":3,"title":"プロパティ・アクセス","slug":"プロパティ・アクセス","link":"#プロパティ・アクセス","children":[]}]}],"relativePath":"translation/duktape/guide/type_algorithms.md","lastUpdated":1676126774000}'),a={name:"translation/duktape/guide/type_algorithms.md"},o=e(`<h2 id="type_algorithms" tabindex="-1">タイプ・アルゴリズム <a class="header-anchor" href="#type_algorithms" aria-hidden="true">#</a></h2><p>このセクションでは、比較や強制などの型に関連するECMAScriptアルゴリズムが、どのようにDuktapeカスタム型に拡張されるかについて説明します。Duktape特有の型アルゴリズム（ToBuffer()とToPointer()）も説明します。</p><h3 id="表記方法" tabindex="-1">表記方法 <a class="header-anchor" href="#表記方法" aria-hidden="true">#</a></h3><p>値がどのように比較されるかを示すために、次のような省略記法が使われます。</p><table><thead><tr><th>値</th><th>説明</th></tr></thead><tbody><tr><td>t</td><td>真と比較する</td></tr><tr><td>f</td><td>偽と比較する</td></tr><tr><td>s</td><td>単純比較：ブーリアン同士、文字列同士（文字列の内容を比較する）</td></tr><tr><td>n</td><td>数値の比較。NaN 値は偽を比較し、0 は符号に関係なく真を比較します (例: +0 == -0)。</td></tr><tr><td>N</td><td>SameValue での数値比較。NaN 値は真を比較し、0 は符号に関係なく比較します (例: SameValue(+0,-0) は偽)</td></tr><tr><td>p</td><td>ヒープポインタの比較</td></tr><tr><td>L</td><td>lightfuncの比較： Duktape/Cの関数ポインタと内部制御フラグ（「マジック」値を含む）が等しいと見なすには、一致する必要があります。</td></tr><tr><td>1</td><td>string vs. number: ToNumber()で文字列を強制し、比較を再試行。</td></tr><tr><td>2</td><td>boolean vs. any: ToNumber() で boolean を 0 または 1 に固定し、比較を再試行。</td></tr><tr><td>3</td><td>object vs. string/number: ToPrimitive() で object を強制し、比較を再試行。</td></tr></tbody></table><blockquote><p>Booleanオブジェクト、Stringオブジェクト、Numberオブジェクトは、自動的にアンボックスされるのではなく、他のオブジェクトと同様に比較されることに注意してください。例えば、非厳格な等式では、プレーンな文字列の値をバイト単位で比較しますが、Stringオブジェクトはオブジェクト参照で比較します（他のオブジェクトと同様）。</p></blockquote><h3 id="等価性-非厳格" tabindex="-1">等価性（非厳格） <a class="header-anchor" href="#等価性-非厳格" aria-hidden="true">#</a></h3><p>非厳格な等式比較は、標準型についてはThe Abstract Equality Comparison Algorithmで規定されています。カスタム型の動作は以下の通りです。</p><ul><li>Buffer: プレーンバッファーはヒープポインタ（参照）によって比較され、内容の比較は行われません。これはUint8Arrayの動作と一致します。</li><li>ポインター：他の型との比較はfalseを返します。ポインタとの比較は、ポインタの値が同じ場合にのみ、真を返します。特に、数値とポインタの比較はfalseを返すことに注意してください。これは少し直感的でないように思えますが、数値は 64 ポインターを正確に表すことができないので、数値とポインターを比較するとエラーが発生しやすくなる可能性があります。</li><li>Lightfunc: 他の型と比較すると、false が返されます。lightfuncとの比較は、Duktape/C関数ポインタと内部制御フラグ（「マジック」値を含む）の両方が一致する場合にのみ、真を返します。たとえ、Functionオブジェクトがlightfuncをオブジェクトに強制することによって作成されたとしても、lightfuncは通常のFunctionオブジェクトと等しく比較されないことに注意してください。</li></ul><p>標準的な動作とDuktapeカスタム・タイプの動作は、以下の表にまとめられています。</p><table><thead><tr><th></th><th>und</th><th>nul</th><th>boo</th><th>num</th><th>str</th><th>obj</th><th>buf</th><th>ptr</th><th>lfn</th></tr></thead><tbody><tr><td>und</td><td>t</td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>nul</td><td></td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>boo</td><td></td><td></td><td>s</td><td>2</td><td>2</td><td>2</td><td>f</td><td>f</td><td>f</td></tr><tr><td>num</td><td></td><td></td><td></td><td>n</td><td>1</td><td>3</td><td>f</td><td>f</td><td>f</td></tr><tr><td>str</td><td></td><td></td><td></td><td></td><td>s</td><td>3</td><td>f</td><td>f</td><td>f</td></tr><tr><td>obj</td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td><td>f</td></tr><tr><td>buf</td><td></td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td></tr><tr><td>ptr</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>s</td><td>f</td></tr><tr><td>lfn</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>L</td></tr></tbody></table><h3 id="厳密な等価性" tabindex="-1">厳密な等価性 <a class="header-anchor" href="#厳密な等価性" aria-hidden="true">#</a></h3><p>厳密な等式はより単純で、単純さとパフォーマンスのために可能な限り望ましいものです。これは、標準的な型のための厳密な等式比較のアルゴリズムで説明されています。カスタム型の動作は以下の通りです。</p><ul><li>バッファ: 非厳格な等式と同様です。</li><li>ポインタ：非厳格な等価性のようなもの。</li><li>Lightfunc: 非厳格な等価性のようなものです。</li></ul><p>標準の動作とDuktapeカスタム型の動作は、以下の表にまとめられています。</p><table><thead><tr><th></th><th>und</th><th>nul</th><th>boo</th><th>num</th><th>str</th><th>obj</th><th>buf</th><th>ptr</th><th>lfn</th></tr></thead><tbody><tr><td>und</td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>nul</td><td></td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>boo</td><td></td><td></td><td>s</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>num</td><td></td><td></td><td></td><td>n</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>str</td><td></td><td></td><td></td><td></td><td>s</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>obj</td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td><td>f</td></tr><tr><td>buf</td><td></td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td></tr><tr><td>ptr</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>s</td><td>f</td></tr><tr><td>lfn</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>L</td></tr></tbody></table><h3 id="セイムバリュー" tabindex="-1">セイムバリュー <a class="header-anchor" href="#セイムバリュー" aria-hidden="true">#</a></h3><p>SameValue アルゴリズムは、ユーザー・コードから呼び出すのは簡単ではありません。これは、例えば Object.defineProperty() で、プロパティの値が変更されようとしているかどうかをチェックするときに使用されます。SameValue は厳密な等値比較よりもさらに厳しく、最も顕著なのは数値の比較方法が異なることです。これは、The SameValue algorithm for standard typesで規定されています。カスタム型の動作は以下の通りです。</p><ul><li>バッファ：非厳格（および厳密）等値のようなものです。</li><li>ポインター：非厳格な（および厳密な）等価性のようなものです。</li><li>Lightfunc: 非厳格な(および厳密な)等式と同じです。</li></ul><p>標準の動作とDuktapeカスタム型の動作は、以下の表にまとめられています。</p><table><thead><tr><th></th><th>und</th><th>nul</th><th>boo</th><th>num</th><th>str</th><th>obj</th><th>buf</th><th>ptr</th><th>lfn</th></tr></thead><tbody><tr><td>und</td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>nul</td><td></td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>boo</td><td></td><td></td><td>s</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>num</td><td></td><td></td><td></td><td>N</td><td>f</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>str</td><td></td><td></td><td></td><td></td><td>s</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>obj</td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td><td>f</td></tr><tr><td>buf</td><td></td><td></td><td></td><td></td><td></td><td></td><td>p</td><td>f</td><td>f</td></tr><tr><td>ptr</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>s</td><td>f</td></tr><tr><td>lfn</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>L</td></tr></tbody></table><h3 id="型の変換とテスト" tabindex="-1">型の変換とテスト <a class="header-anchor" href="#型の変換とテスト" aria-hidden="true">#</a></h3><p>カスタム型は、型変換とテストについて説明したECMAScriptの強制力に対して、以下のように動作します（すでに上で説明したSameValueは除く）。</p><table><thead><tr><th></th><th>buffer</th><th>pointer</th><th>lightfunc</th></tr></thead><tbody><tr><td>DefaultValue</td><td>Usually &quot;[object Uint8Array]&quot;; like Uint8Array</td><td>TypeError</td><td>&quot;light_&lt;PTR&gt;_&lt;FLAGS&gt;&quot; (toString/valueOf)</td></tr><tr><td>ToPrimitive</td><td>Usually &quot;[object Uint8Array]&quot;; like Uint8Array</td><td>identity</td><td>&quot;light_&lt;PTR&gt;_&lt;FLAGS&gt;&quot; (toString/valueOf)</td></tr><tr><td>ToBoolean</td><td>true</td><td>false for NULL pointer, true otherwise</td><td>true</td></tr><tr><td>ToNumber</td><td>ToNumber(String(buffer)), usually ToNumber(&quot;[object Uint8Array]&quot;) = NaN</td><td>0 for NULL pointer, 1 otherwise</td><td>NaN</td></tr><tr><td>ToInteger</td><td>same as ToNumber; usually 0</td><td>same as ToNumber</td><td>0</td></tr><tr><td>ToInt32</td><td>same as ToNumber; usually 0</td><td>same as ToNumber</td><td>0</td></tr><tr><td>ToUint32</td><td>same as ToNumber; usually 0</td><td>same as ToNumber</td><td>0</td></tr><tr><td>ToUint16</td><td>same as ToNumber; usually 0</td><td>same as ToNumber</td><td>0</td></tr><tr><td>ToString</td><td>Usually [object Uint8Array]; like Uint8Array</td><td>sprintf() with %p format (platform specific)</td><td>&quot;light_&lt;PTR&gt;_&lt;FLAGS&gt;&quot;</td></tr><tr><td>ToObject</td><td>Uint8Array object (backs to argument plain buffer)</td><td>Pointer object</td><td>Function object</td></tr><tr><td>CheckObjectCoercible</td><td>allow (no error)</td><td>allow (no error)</td><td>allow (no error)</td></tr><tr><td>IsCallable</td><td>false</td><td>false</td><td>true</td></tr><tr><td>SameValue</td><td>(covered above)</td><td>(covered above)</td><td>(covered above)</td></tr></tbody></table><p>バッファが文字列強制されると、Uint8Arrayのように振る舞い、その結果は通常&quot;[object Uint8Array]&quot;となります。この動作はDuktape 2.0で変更されました。バッファの内容から文字列を生成するには、Node.jsのBufferバインディングやEncoding APIなどを使用します。</p><p>バッファがオブジェクト強制されると、新しい Uint8Array オブジェクトが作成され、新しい ArrayBuffer がプレーン バッファにバックアップされます (コピーは作成されません)。</p><p>Lightfunc が ToPrimitive() で強制されると、普通の関数のように動作します。それは Function.prototype.toString() で強制され、結果は（通常） ToString() 強制と同じになります。</p><p>lightfunc がオブジェクト強制されると、新しい Function オブジェクトが作成され、仮想プロパティ (name と length) と内部の &quot;magic&quot; 値が Function オブジェクトにコピーされます。</p><h3 id="カスタム強制-tobuffer-topointer" tabindex="-1">カスタム強制（ToBuffer, ToPointer） <a class="header-anchor" href="#カスタム強制-tobuffer-topointer" aria-hidden="true">#</a></h3><p>ToBuffer() は、例えば duk_to_buffer() API 呼び出しで、値がバッファ型に強制されるときに使用されます。強制は以下の通りです。</p><ul><li>バッファはそれ自身に強制される(identity)。同じバッファの値が返されます。</li><li>その他の型（ポインタと lightfunc を含む）は、まず ToString で文字列強制され、次に結果の文字列がバイト単位で固定サイズのバッファにコピーされます。</li></ul><p>ToPointer() の強制は、例えば、duk_to_pointer() の呼び出しで使用されます。この強制は次のようなものです。</p><ul><li>ポインタはそれ自身に強制される。</li><li>ヒープで確保された型(文字列、オブジェクト、バッファ)は、その内部ヒープヘッダーを指すポインタ値に強制されます。このポインタは診断値のみを持つ。特に、バッファや文字列に対して返されるポインタは、バッファや文字列のデータ領域を指さないことに注意してください。(この強制はマイナーバージョンでも変更される可能性がありますので、依存しないようにしてください）。</li><li>その他の型 (数値を含む) は、NULL ポインタを指すように強制されます。</li><li>Lightfunc は NULL ポインタに強制されます。これは、C 関数ポインターを移植可能な方法で void * に強制できないためです。</li></ul><p>オブジェクトが作成され、仮想プロパティ（名前と長さ、および内部の「マジック」値）が Function オブジェクトにコピーされます。</p><table><thead><tr><th></th><th>ToBuffer</th><th>ToPointer</th></tr></thead><tbody><tr><td>undefined</td><td>buffer with &quot;undefined&quot;</td><td>NULL</td></tr><tr><td>null</td><td>buffer with &quot;null&quot;</td><td>NULL</td></tr><tr><td>boolean</td><td>buffer with &quot;true&quot; or &quot;false&quot;</td><td>NULL</td></tr><tr><td>number</td><td>buffer with string coerced number</td><td>NULL</td></tr><tr><td>string</td><td>buffer with copy of string data</td><td>ptr to heap hdr</td></tr><tr><td>object</td><td>buffer with ToString(value)</td><td>ptr to heap hdr</td></tr><tr><td>buffer</td><td>identity</td><td>ptr to heap hdr</td></tr><tr><td>pointer</td><td>sprintf() with %p format (platform specific)</td><td>identity</td></tr><tr><td>lightfunc</td><td>buffer with ToString(value)</td><td>NULL</td></tr></tbody></table><blockquote><p>現在、ToLightFunc()の強制はありません。Lightfuncは、Duktape C APIを使ってのみ作成することができます。</p></blockquote><h3 id="加算演算子" tabindex="-1">加算演算子 <a class="header-anchor" href="#加算演算子" aria-hidden="true">#</a></h3><p>ECMAScript の加算演算子は The Addition operator (+) で指定されています。加算は、どちらかの引数が文字列である場合に特別な動作をします：もう一方の引数は文字列に強制され、その後文字列は連結されます。この動作は、以下のようにカスタム型にも拡張されます。</p><ul><li>標準の型では、オブジェクトの値は最初に ToPrimitive() で強制され、プレーン バッファと lightfuncs は通常 ToString() で強制されます。プレーン バッファの場合、結果は通常 &quot;[object Uint8Array]&quot; になり、lightfuncs の場合は &quot;[object Function]&quot; になります。</li><li>ポインタの値は、デフォルトの数値加算のケースに該当します。これらは ToNumber() で強制された後、数値として追加されます。NULL ポインタは 0 に、NULL 以外は 1 になります。</li></ul><p>加算は、一般にカスタム型には有用ではありません。たとえば、2 つのプレーンなバッファを加算すると、結果は通常 &quot;[object Uint8Array] [object Uint8Array]&quot; となり、これは 2 つの Uint8Array インスタンスに対する標準的な加算の動作と同じになります。</p><h3 id="プロパティ・アクセス" tabindex="-1">プロパティ・アクセス <a class="header-anchor" href="#プロパティ・アクセス" aria-hidden="true">#</a></h3><p>プロパティ・アクセスのベース値としてプレーン・バッファまたはポインタが使用 される場合、プロパティは（初期の）組み込みプロトタイプ・オブジェクト（Uint8Array.prototype または Duktape.Pointer.prototype）から検索されることになります。これは、標準的な型の動作を模倣しています。</p><p>例えば</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">duk&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Duktape.dec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">414243</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">plain</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buffer</span></span>
<span class="line"><span style="color:#FFCB6B;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ABC</span></span>
<span class="line"><span style="color:#FFCB6B;">duk&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buf.subarray</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#FFCB6B;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">subarray</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">native</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">duk&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buf.toString</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#FFCB6B;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">string</span></span>
<span class="line"></span></code></pre></div><p>Lightfuncs は、設定や書き込みができない仮想プロパティ（name と length）をいくつか持ち、残りのプロパティは Function.prototype を継承し、継承された通常の Function メソッドを呼び出すことができるようになっています。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bound </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myLightFunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dummy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,46),n=[o];function l(s,p,i,u,f,h){return r(),d("div",null,n)}const b=t(a,[["render",l]]);export{y as __pageData,b as default};
