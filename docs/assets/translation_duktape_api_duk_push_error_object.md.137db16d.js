import{_ as s,o as a,c as o,Q as e}from"./chunks/framework.43c433ff.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_push_error_object.md","filePath":"translation/duktape/api/duk_push_error_object.md","lastUpdated":1676126774000}'),n={name:"translation/duktape/api/duk_push_error_object.md"},p=e(`<h2 id="duk-push-error-object" tabindex="-1">duk_push_error_object() <a class="header-anchor" href="#duk-push-error-object" aria-label="Permalink to &quot;duk_push_error_object()&quot;">​</a></h2><p>1.0.0 stack object error</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_push_error_object</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_errcode_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">err_code</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">fmt</span><span style="color:#E1E4E8;">, ...);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_push_error_object</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_errcode_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">err_code</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">fmt</span><span style="color:#24292E;">, ...);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | -&gt; | ... | err |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>新しいエラーオブジェクトを作成し、それをバリュースタックにプッシュします（エラーはスローされません）。プッシュされたエラーオブジェクトの非負のインデックス（スタックの底からの相対値）を返します。</p><p>エラーオブジェクトの message プロパティには、fmt と残りの引数を使用して sprintf フォーマットの文字列が設定されます。作成されたエラーオブジェクトの内部プロトタイプは err_code に基づいて選択されます。例えば、DUK_ERR_RANGE_ERROR は、組み込みの RangeError プロトタイプが使用されるようにします。ユーザーエラーコードの有効範囲は [1,16777215] です。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> err_idx;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">err_idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_push_error_object</span><span style="color:#E1E4E8;">(ctx, DUK_ERR_TYPE_ERROR, </span><span style="color:#9ECBFF;">&quot;invalid argument value: </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, arg_value);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> err_idx;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">err_idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_push_error_object</span><span style="color:#24292E;">(ctx, DUK_ERR_TYPE_ERROR, </span><span style="color:#032F62;">&quot;invalid argument value: </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, arg_value);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_push_error_object_va</p>`,13),l=[p];function r(t,c,d,_,i,u){return a(),o("div",null,l)}const y=s(n,[["render",r]]);export{h as __pageData,y as default};
