import{_ as s,o as i,c as a,R as t}from"./chunks/framework.c2IVng1e.js";const E=JSON.parse('{"title":"Lua/C API Extensions","description":"","frontmatter":{},"headers":[],"relativePath":"translation/luajit/lua_c_api.md","filePath":"translation/luajit/lua_c_api.md","lastUpdated":null}'),e={name:"translation/luajit/lua_c_api.md"},n=t(`<h1 id="lua-c-api-extensions" tabindex="-1">Lua/C API Extensions <a class="header-anchor" href="#lua-c-api-extensions" aria-label="Permalink to &quot;Lua/C API Extensions&quot;">​</a></h1><p>LuaJIT adds some extensions to the standard Lua/C API. The LuaJIT include directory must be in the compiler search path (-Ipath) to be able to include the required header for C code:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;luajit.h&quot;</span></span></code></pre></div><p>Or for C++ code:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lua.hpp&quot;</span></span></code></pre></div><h2 id="luajit-setmode-l-idx-mode-—-control-vm" tabindex="-1">luaJIT_setmode(L, idx, mode) — Control VM <a class="header-anchor" href="#luajit-setmode-l-idx-mode-—-control-vm" aria-label="Permalink to &quot;luaJIT_setmode(L, idx, mode) — Control VM&quot;">​</a></h2><p>This is a C API extension to allow control of the VM from C code. The full prototype of LuaJIT_setmode is:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LUA_API </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> luaJIT_setmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lua_State </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> idx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The returned status is either success (1) or failure (0). The second argument is either 0 or a stack index (similar to the other Lua/C API functions).</p><p>The third argument specifies the mode, which is &#39;or&#39;ed with a flag. The flag can be LUAJIT_MODE_OFF to turn a feature off, LUAJIT_MODE_ON to turn a feature on, or LUAJIT_MODE_FLUSH to flush cached code.</p><p>The following modes are defined:</p><h4 id="luajit-setmode-l-0-luajit-mode-engine-flag" tabindex="-1">luaJIT_setmode(L, 0, LUAJIT_MODE_ENGINE|flag) <a class="header-anchor" href="#luajit-setmode-l-0-luajit-mode-engine-flag" aria-label="Permalink to &quot;luaJIT_setmode(L, 0, LUAJIT_MODE_ENGINE|flag)&quot;">​</a></h4><p>Turn the whole JIT compiler on or off or flush the whole cache of compiled code.</p><h4 id="luajit-setmode-l-idx-luajit-mode-func-flag" tabindex="-1">luaJIT_setmode(L, idx, LUAJIT_MODE_FUNC|flag) <a class="header-anchor" href="#luajit-setmode-l-idx-luajit-mode-func-flag" aria-label="Permalink to &quot;luaJIT_setmode(L, idx, LUAJIT_MODE_FUNC|flag)&quot;">​</a></h4><h4 id="luajit-setmode-l-idx-luajit-mode-allfunc-flag" tabindex="-1">luaJIT_setmode(L, idx, LUAJIT_MODE_ALLFUNC|flag) <a class="header-anchor" href="#luajit-setmode-l-idx-luajit-mode-allfunc-flag" aria-label="Permalink to &quot;luaJIT_setmode(L, idx, LUAJIT_MODE_ALLFUNC|flag)&quot;">​</a></h4><h4 id="luajit-setmode-l-idx-luajit-mode-allsubfunc-flag" tabindex="-1">luaJIT_setmode(L, idx, LUAJIT_MODE_ALLSUBFUNC|flag) <a class="header-anchor" href="#luajit-setmode-l-idx-luajit-mode-allsubfunc-flag" aria-label="Permalink to &quot;luaJIT_setmode(L, idx, LUAJIT_MODE_ALLSUBFUNC|flag)&quot;">​</a></h4><p>This sets the mode for the function at the stack index idx or the parent of the calling function (idx = 0). It either enables JIT compilation for a function, disables it and flushes any already compiled code, or only flushes already compiled code. This applies recursively to all sub-functions of the function with LUAJIT_MODE_ALLFUNC or only to the sub-functions with LUAJIT_MODE_ALLSUBFUNC.</p><h4 id="luajit-setmode-l-trace-luajit-mode-trace-luajit-mode-flush" tabindex="-1">luaJIT_setmode(L, trace, LUAJIT_MODE_TRACE|LUAJIT_MODE_FLUSH) <a class="header-anchor" href="#luajit-setmode-l-trace-luajit-mode-trace-luajit-mode-flush" aria-label="Permalink to &quot;luaJIT_setmode(L, trace, LUAJIT_MODE_TRACE|LUAJIT_MODE_FLUSH)&quot;">​</a></h4><p>Flushes the specified root trace and all of its side traces from the cache. The code for the trace will be retained as long as there are any other traces which link to it.</p><h4 id="luajit-setmode-l-idx-luajit-mode-wrapcfunc-flag" tabindex="-1">luaJIT_setmode(L, idx, LUAJIT_MODE_WRAPCFUNC|flag) <a class="header-anchor" href="#luajit-setmode-l-idx-luajit-mode-wrapcfunc-flag" aria-label="Permalink to &quot;luaJIT_setmode(L, idx, LUAJIT_MODE_WRAPCFUNC|flag)&quot;">​</a></h4><p>This mode defines a wrapper function for calls to C functions. If called with LUAJIT_MODE_ON, the stack index at idx must be a lightuserdata object holding a pointer to the wrapper function. From now on, all C functions are called through the wrapper function. If called with LUAJIT_MODE_OFF this mode is turned off and all C functions are directly called.</p><p>The wrapper function can be used for debugging purposes or to catch and convert foreign exceptions. But please read the section on C++ exception interoperability first. Recommended usage can be seen in this C++ code excerpt:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;exception&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lua.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Catch C++ exceptions and convert them to Lua error messages.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Customize as needed for your own exception classes.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wrap_exceptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_CFunction</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Call wrapped function and return result.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Catch and convert exceptions.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_pushstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (...) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lua_pushliteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;caught (...)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lua_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Rethrow as a Lua error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lua_State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Define wrapper function and enable it.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lua_pushlightuserdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)wrap_exceptions);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  luaJIT_setmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LUAJIT_MODE_WRAPCFUNC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LUAJIT_MODE_ON);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lua_pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Note that you can only define a single global wrapper function, so be careful when using this mechanism from multiple C++ modules. Also note that this mechanism is not without overhead.</p>`,24),l=[n];function h(p,k,d,o,r,c){return i(),a("div",null,l)}const g=s(e,[["render",h]]);export{E as __pageData,g as default};
