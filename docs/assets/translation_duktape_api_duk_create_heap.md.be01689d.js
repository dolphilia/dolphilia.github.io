import{_ as s,c as a,o as n,a as l}from"./app.e18c80f2.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"duk_create_heap()","slug":"duk-create-heap","link":"#duk-create-heap","children":[{"level":3,"title":"プロトタイプ","slug":"プロトタイプ","link":"#プロトタイプ","children":[]},{"level":3,"title":"スタック","slug":"スタック","link":"#スタック","children":[]},{"level":3,"title":"要約","slug":"要約","link":"#要約","children":[]},{"level":3,"title":"例","slug":"例","link":"#例","children":[]},{"level":3,"title":"参照","slug":"参照","link":"#参照","children":[]}]}],"relativePath":"translation/duktape/api/duk_create_heap.md","lastUpdated":1676126774000}'),e={name:"translation/duktape/api/duk_create_heap.md"},p=l(`<h2 id="duk-create-heap" tabindex="-1">duk_create_heap() <a class="header-anchor" href="#duk-create-heap" aria-hidden="true">#</a></h2><p>1.0.0 heap</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-hidden="true">#</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">duk_create_heap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_alloc_function </span><span style="color:#A6ACCD;font-style:italic;">alloc_func</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             duk_realloc_function </span><span style="color:#A6ACCD;font-style:italic;">realloc_func</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             duk_free_function </span><span style="color:#A6ACCD;font-style:italic;">free_func</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">heap_udata</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             duk_fatal_function </span><span style="color:#A6ACCD;font-style:italic;">fatal_handler</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-hidden="true">#</a></h3><p>(バリュースタックに影響なし。)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-hidden="true">#</a></h3><p>新しいDuktapeヒープを作成し、初期コンテキスト(スレッド)を返す。ヒープの初期化に失敗した場合、NULLが返されます。現在のところ、より詳細なエラー情報を得る方法はない。</p><p>呼び出し側は、alloc_func、realloc_func、free_func でカスタムメモリ管理関数を提供することができます。ポインタはすべてNULLでなければなりませんし、すべて非NULLでなければなりません。ポインタが NULL の場合，デフォルトのメモリ管理関数 (ANSI C の malloc(), realloc() および free()) が使用される．メモリ管理関数は、同じ不透明なユーザデータポインタである heap_udata を共有します。このユーザーデータポインターは、致命的なエラー処理や低メモリーポインター圧縮マクロなど、他のDuktape機能にも使用されています。</p><p>致命的なエラー・ハンドラはfatal_handlerで提供されます。このハンドラは、キャッチできないエラー、ガベージコレクションで解決できないメモリ不足のエラー、セルフテストエラーなどの回復不能なエラー状況で呼び出されます。呼び出し側は、ほとんどのアプリケーションで致命的なエラーハンドラを実装すべきです(SHOULD)。もし指定がなければ、Duktapeに組み込まれたデフォルトの致命的なエラーハンドラが代わりに使われます。デフォルトの致命的エラーハンドラは、(duk_config.h で上書きされない限り) abort() を呼び出し、stdout や stderr にエラーメッセージを表示しない。より詳細な情報と例については、致命的なエラーの処理方法を参照してください。</p><p>デフォルトの設定で Duktape ヒープを作成するには、 duk_create_heap_default() を使用して下さい。</p><p>同じヒープにリンクされた新しいコンテキストは、 duk_push_thread() と duk_push_thread_new_globalenv() で作成できます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-hidden="true">#</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  Simple case: use default allocation functions and fatal error handler</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_create_heap</span><span style="color:#89DDFF;">(NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* success */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* error */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  Customized handlers</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_create_heap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">my_alloc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_realloc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_free</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                   </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_fatal</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* success */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* ... after heap is no longer needed: */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_destroy_heap</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* error */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-hidden="true">#</a></h3><p>duk_create_heap_default duk_destroy_heap</p>`,16),o=[p];function t(c,r,i,y,D,d){return n(),a("div",null,o)}const C=s(e,[["render",t]]);export{A as __pageData,C as default};
