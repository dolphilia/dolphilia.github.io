import{_ as s,c as n,o as a,a as l}from"./app.e18c80f2.js";const C=JSON.parse('{"title":"チュートリアル","description":"","frontmatter":{},"headers":[{"level":2,"title":"謙虚な始まり","slug":"謙虚な始まり","link":"#謙虚な始まり","children":[]},{"level":2,"title":"依存関係の追加","slug":"依存関係の追加","link":"#依存関係の追加","children":[]}],"relativePath":"translation/meson/tutorial.md","lastUpdated":1676126774000}'),p={name:"translation/meson/tutorial.md"},o=l(`<h1 id="チュートリアル" tabindex="-1">チュートリアル <a class="header-anchor" href="#チュートリアル" aria-hidden="true">#</a></h1><p>このページでは、単純なプロジェクトの Meson ビルド定義を作成する方法を一から説明します。そして、それを拡張して外部の依存関係を使用し、いかに簡単にプロジェクトに統合できるかを紹介します。</p><p>このチュートリアルは、主に Linux での使用を想定して書かれています。システム上に GTK 開発ライブラリーがあることを想定しています。UbuntuのようなDebian由来のシステムでは、以下のコマンドでインストールすることができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sudo apt install libgtk-3-dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>WindowsやmacOSなど、他のプラットフォームでGUIアプリケーションを構築することも可能ですが、必要な依存関係をインストールする必要があります。</p><h2 id="謙虚な始まり" tabindex="-1">謙虚な始まり <a class="header-anchor" href="#謙虚な始まり" aria-hidden="true">#</a></h2><p>最も基本的なプログラム、古典的なhelloの例から始めましょう。まず、ソースを格納するファイルmain.cを作成します。これは次のようなものです。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// mainはすべてのプログラムの実行を開始する場所</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello there.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>次に、Mesonのビルド記述を作成し、同じディレクトリのmeson.buildというファイルに記述します。その内容は以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">project(&#39;tutorial&#39;, &#39;c&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">executable(&#39;demo&#39;, &#39;main.c&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以上です。Autotoolsとは異なり、ソースヘッダをソースのリストに追加する必要はないことに注意してください。</p><p>これで、アプリケーションをビルドする準備ができました。まず、ソースディレクトリに移動して、以下のコマンドを実行して、ビルドを初期化する必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ meson setup builddir</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>コンパイラの出力をすべて保持するために、別のビルドディレクトリを作成します。Meson は他のいくつかのビルドシステムと異なり、インソースビルドを許可していません。常に別のビルドディレクトリを作成する必要があります。一般的な慣例では、デフォルトのビルドディレクトリをトップレベルのソースディレクトリのサブディレクトリに配置します。</p><p>Mesonを実行すると、次のような出力が表示されます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">The Meson build system</span></span>
<span class="line"><span style="color:#A6ACCD;"> version: 0.13.0-research</span></span>
<span class="line"><span style="color:#A6ACCD;">Source dir: /home/jpakkane/mesontutorial</span></span>
<span class="line"><span style="color:#A6ACCD;">Build dir: /home/jpakkane/mesontutorial/builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">Build type: native build</span></span>
<span class="line"><span style="color:#A6ACCD;">Project name is &quot;tutorial&quot;.</span></span>
<span class="line"><span style="color:#A6ACCD;">Using native c compiler &quot;ccache cc&quot;. (gcc 4.8.2)</span></span>
<span class="line"><span style="color:#A6ACCD;">Creating build target &quot;demo&quot; with 1 files.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これで、コードをビルドする準備ができました。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ cd builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ ninja</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Meson のバージョンが 0.55.0 より新しい場合、新しい backend-agnostic ビルドコマンドを使用することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ cd builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson compile</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>この文書では、後者の形式を使用します。</p><p>実行ファイルがビルドされたら、それを実行することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ./demo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これにより、期待通りの出力が得られます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Hello there.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="依存関係の追加" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#依存関係の追加" aria-hidden="true">#</a></h2><p>テキストを印刷するだけでは少し古い。代わりにグラフィカルなウィンドウを作成するようにプログラムを更新してみましょう。GTK+ ウィジェットツールキットを使いましょう。まず、メインファイルを編集してGTK+を使うようにします。新しいバージョンは次のようなものです。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">gtk/gtk.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Should provided the active view for a GTK application</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">activate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GtkApplication</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> gpointer </span><span style="color:#A6ACCD;font-style:italic;">user_data</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  GtkWidget </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  GtkWidget </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  window </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">gtk_application_window_new</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  label </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">gtk_label_new</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello GNOME!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">gtk_container_add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">GTK_CONTAINER</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> label</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">gtk_window_set_title</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">GTK_WINDOW</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Welcome to GNOME</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">gtk_window_set_default_size</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">GTK_WINDOW</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">gtk_widget_show_all</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // end of function activate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// main is where all program execution starts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  GtkApplication </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  app </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">gtk_application_new</span><span style="color:#89DDFF;">(NULL,</span><span style="color:#F07178;"> G_APPLICATION_FLAGS_NONE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">g_signal_connect</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">activate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">G_CALLBACK</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">activate</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">  status </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">g_application_run</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">G_APPLICATION</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">g_object_unref</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // end of function main</span></span>
<span class="line"></span></code></pre></div><p>次に、Meson ファイルを編集して、GTK+ ライブラリを見つけて使用するように指示します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">project(&#39;tutorial&#39;, &#39;c&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">gtkdep = dependency(&#39;gtk+-3.0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">executable(&#39;demo&#39;, &#39;main.c&#39;, dependencies : gtkdep)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>アプリで複数のライブラリを使用する必要がある場合、以下のようにそれぞれ別のdependency()コールを使用する必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">gtkdeps = [dependency(&#39;gtk+-3.0&#39;), dependency(&#39;gtksourceview-3.0&#39;)]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>今の例では必要ない。</p><p>これでビルドの準備ができました。ここで注目すべきは、ビルドディレクトリを再作成したり、魔法のようなコマンドを実行したりする必要がないことです。代わりに、ビルドシステムを変更せずに、コードを再構築するのと全く同じコマンドを入力するだけです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ meson compile</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>最初にビルド・ディレクトリを設定したら、もう二度とmesonコマンドを実行する必要はありません。いつも meson compile を実行するだけです。ビルド定義に変更があった場合、Mesonが自動的に検出し、ユーザーが気にしなくていいように、すべてを処理します。この場合、次のような出力が得られます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[1/1] Regenerating build files</span></span>
<span class="line"><span style="color:#A6ACCD;">The Meson build system</span></span>
<span class="line"><span style="color:#A6ACCD;"> version: 0.13.0-research</span></span>
<span class="line"><span style="color:#A6ACCD;">Source dir: /home/jpakkane/mesontutorial</span></span>
<span class="line"><span style="color:#A6ACCD;">Build dir: /home/jpakkane/mesontutorial/builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">Build type: native build</span></span>
<span class="line"><span style="color:#A6ACCD;">Project name is &quot;tutorial&quot;.</span></span>
<span class="line"><span style="color:#A6ACCD;">Using native c compiler &quot;ccache cc&quot;. (gcc 4.8.2)</span></span>
<span class="line"><span style="color:#A6ACCD;">Found pkg-config version 0.26.</span></span>
<span class="line"><span style="color:#A6ACCD;">Dependency gtk+-3.0 found: YES</span></span>
<span class="line"><span style="color:#A6ACCD;">Creating build target &quot;demo&quot; with 1 files.</span></span>
<span class="line"><span style="color:#A6ACCD;">[1/2] Compiling c object demo.dir/main.c.o</span></span>
<span class="line"><span style="color:#A6ACCD;">[2/2] Linking target demo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Mesonがビルド定義が変更されたことに気づき、自動的に再実行したことにご注目ください。これでプログラムを実行する準備ができました。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ ./demo</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これにより、以下のようなGUIアプリケーションが作成されます。</p><p>GTK+サンプルアプリケーションのスクリーンショット</p>`,41),e=[o];function t(c,i,r,y,F,D){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
