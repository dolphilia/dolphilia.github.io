import{_ as s,c as a,o as n,a as p}from"./app.1650bd79.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"プライマリーテスト","slug":"プライマリーテスト","link":"#プライマリーテスト","children":[{"level":3,"title":"簡単な例：数値を二乗する","slug":"簡単な例-数値を二乗する","link":"#簡単な例-数値を二乗する","children":[]},{"level":3,"title":"プライマリーテスト","slug":"プライマリーテスト-1","link":"#プライマリーテスト-1","children":[]},{"level":3,"title":"コンパイルと実行","slug":"コンパイルと実行","link":"#コンパイルと実行","children":[]}]}],"relativePath":"translation/duktape/wiki/prime_test.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/wiki/prime_test.md"},o=p(`<h2 id="プライマリーテスト" tabindex="-1">プライマリーテスト <a class="header-anchor" href="#プライマリーテスト" aria-hidden="true">#</a></h2><p>入門：行処理の例では、ECMAScriptでは簡単だがCでは難しいことを、CコードがECMAScriptに呼び出すことができることを説明しました。</p><p>この記事の例はその逆で、ECMAScript のコードが C のコードを呼び出す方法を説明します：スクリプトは多くのことに有用ですが、低レベルのバイトや文字処理には最適ではありません。最適化された C ヘルパーを呼び出すことができれば、スクリプト・ロジックの大部分を美しい ECMAScript で書き、パフォーマンスが重要な部分については C を呼び出すことができます。ネイティブ関数を使用するもう一つの理由は、ネイティブライブラリへのアクセスを提供することです。</p><p>ネイティブ関数を実装するには、Duktape/Cバインディングという特別な呼び出し方法に従った普通のC関数を書きます。Duktape/C関数は1つの引数（Duktapeコンテキスト）を取り、エラーまたは戻り値の数を示す1つの値を返します。関数は、Duktape APIで操作されたDuktapeコンテキストの値スタックを介して、呼び出しの引数にアクセスし、戻り値を提供します。Duktape/CバインディングとDuktape APIについては、後ほど詳しく説明します。</p><h3 id="簡単な例-数値を二乗する" tabindex="-1">簡単な例：数値を二乗する <a class="header-anchor" href="#簡単な例-数値を二乗する" aria-hidden="true">#</a></h3><p>簡単な例を挙げます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">duk_ret_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">my_native_func</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> arg </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_require_number</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;"> /*index*/</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_push_number</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> arg </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>これを一行ずつ見ていきましょう。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> arg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_require_number</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;"> /*index*/</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>値スタックインデックス0（スタックの底、関数呼び出しの第1引数）の数値が数値であるかどうかをチェックし、そうでない場合はエラーを投げて決して戻りません。値が数値の場合、doubleとして返す。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_number</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>引数の2乗を計算し、値スタックにプッシュする。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>関数呼び出しから戻り、値スタックの最上位に（単一の）戻り値があることを示す。複数の戻り値はまだサポートされていません。0を返して戻り値がないことを示すこともできますが、その場合DuktapeのデフォルトはECMAScriptのundefinedになります。負の戻り値は、自動的にエラーをスローします。これは、エラーをスローするための便利な省略記法です。Duktape は、関数が戻った時に自動的にその処理を行います。詳しくは、プログラミング・モデルを参照してください。</p><h3 id="プライマリーテスト-1" tabindex="-1">プライマリーテスト <a class="header-anchor" href="#プライマリーテスト-1" aria-hidden="true">#</a></h3><p>ECMAScriptのアルゴリズムを高速化するためにネイティブコードを使用する例として、プリマリティテストを使用することにします。具体的には、私たちのテストプログラムは1000000以下のプリムで、数字&#39;9999&#39;で終わるものを探します。このプログラムのECMAScriptバージョンは次の通りです。</p><ul><li><a href="https://github.com/svaarala/duktape/blob/master/examples/guide/prime.js" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/examples/guide/prime.js</a></li></ul><p>このプログラムはネイティブヘルパーがあればそれを使い、なければECMAScriptバージョンにフォールバックすることに注意してください。これにより、ECMAScriptのコードは他の含むプログラムで使用することができます。また、プライムチェックのプログラムが、変更しないとネイティブ版がコンパイルできない別のプラットフォームに移植された場合、ヘルパーが移植されるまで、プログラムは（速度は遅いですが）機能し続けます。この場合、ネイティブヘルパーの検出はスクリプトがロードされたときに行われます。また、実際にコードが呼び出されたときに検出することもでき、より柔軟な対応が可能です。</p><p>primeCheckECMAScript() と同等の機能を持つネイティブヘルパーは、 非常に簡単に実装することができます。プログラムmainを追加し、ECMAScriptグローバルオブジェクトに単純なprint()バインディングを追加すると、primecheck.cが得られます。</p><ul><li><a href="https://github.com/svaarala/duktape/blob/master/examples/guide/primecheck.c" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/examples/guide/primecheck.c</a></li></ul><p>Getting started: line processingと比較した新しいコールは、一行一行です。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_require_int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> lim </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_require_int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これらの 2 つのコールは、ネイティブヘルパーに与えられた 2 つの引数値をチェックします。もし値が ECMAScript の数値型でない場合はエラーがスローされます。数値であれば、その値は整数に変換され、val と lim ロケールに代入されます。インデックス 0 は最初の関数引数を、インデックス 1 は 2 番目の関数引数を指します。</p><p>技術的には、duk_require_int() は duk_int_t を返します。この間接型は、int が 16 ビット幅しかない稀なプラットフォームを除いて、常に int にマップされます。通常のアプリケーションコードでは、このことを気にする必要はありません。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_false</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>ECMAScript の false を値スタックにプッシュします。C の戻り値 1 は、ECMAScript の呼び出し元に false 値が返されることを示す。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_global_object</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_push_c_function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> native_prime_check</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#676E95;font-style:italic;"> /*nargs*/</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_put_prop_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">primeCheckNative</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>最初の呼び出しは、前と同様に、ECMAScript グローバルオブジェクトを値スタックにプッシュします。2 番目の呼び出しは ECMAScript Function オブジェクトを作成し、それを値スタックにプッシュします。この Function オブジェクトは Duktape/C の関数 native_prime_check() に束縛されています：ここで作成された ECMAScript 関数が ECMAScript から呼び出されると、C 関数が呼び出されます。第2呼び出し引数(2)は、C関数が値スタック上にいくつの引数を取得するかを示す。呼び出し側が与える引数が少なければ、不足する引数は undefined で埋められ、呼び出し側が与える引数が多ければ、余分な引数は自動的に削除される。最後に、3回目の呼び出しで、関数オブジェクトを primeCheckNative という名前でグローバルオブジェクトに登録し、関数値をスタックからポップアウトします。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_get_prop_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">primeTest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">duk_pcall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_safe_to_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">duk_pop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  /* ignore result */</span></span>
<span class="line"></span></code></pre></div><p>ここに来たとき、値スタックはすでにスタックの一番上にグローバルオブジェクトを含んでいます。1 行目は、グローバルオブジェクト（ロードされたスクリプトによって定義された）から primeTest 関数を検索しています。2-4 行目は、primeTest 関数を引数ゼロで呼び出し、エラーが発生した場合は安全にプリントアウトします。5 行目では、呼び出しの結果をスタックから取り出しています。</p><h3 id="コンパイルと実行" tabindex="-1">コンパイルと実行 <a class="header-anchor" href="#コンパイルと実行" aria-hidden="true">#</a></h3><p>前回と同様にコンパイルします。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># src/ contains Duktape sources from the distributable or prepared</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># explicitly using tools/configure.py.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-std=c99</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">primecheck</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Isrc/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src/duktape.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">primecheck.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lm</span></span>
<span class="line"></span></code></pre></div><p>テスト実行、prime.jsがカレントディレクトリにあることを確認します。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./primecheck</span></span>
<span class="line"><span style="color:#FFCB6B;">Have</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">native</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">helper:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#F78C6C;">49999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">59999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">79999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">139999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">179999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">199999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">239999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">289999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">329999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">379999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">389999</span></span>
<span class="line"><span style="color:#F78C6C;">409999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">419999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">529999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">599999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">619999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">659999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">679999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">769999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">799999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">839999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">989999</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">real</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">0m2.985s</span></span>
<span class="line"><span style="color:#FFCB6B;">user</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">0m2.976s</span></span>
<span class="line"><span style="color:#FFCB6B;">sys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">0m0.000s</span></span>
<span class="line"></span></code></pre></div><p>実行時間のほとんどはプライムチェックに費やされるため、プレーンなECMAScriptと比較して大幅なスピードアップを実現しています。prime.jsを編集して、ネイティブヘルパーの使用を無効にすることで確認できます。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Select available helper at load time</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> primeCheckHelper </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> primeCheckECMAScript</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>再コンパイルして、テストを再実行する。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./primecheck</span></span>
<span class="line"><span style="color:#FFCB6B;">Have</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">native</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">helper:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#F78C6C;">49999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">59999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">79999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">139999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">179999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">199999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">239999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">289999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">329999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">379999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">389999</span></span>
<span class="line"><span style="color:#F78C6C;">409999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">419999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">529999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">599999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">619999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">659999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">679999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">769999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">799999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">839999</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">989999</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">real</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">0m23.609s</span></span>
<span class="line"><span style="color:#FFCB6B;">user</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">0m23.573s</span></span>
<span class="line"><span style="color:#FFCB6B;">sys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">0m0.000s</span></span>
<span class="line"></span></code></pre></div>`,39),e=[o];function t(c,r,C,y,i,D){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
