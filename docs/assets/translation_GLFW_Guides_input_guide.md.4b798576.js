import{_ as s,c as a,o as n,a as l}from"./app.b419af8d.js";const C=JSON.parse('{"title":"GLFW入力ガイド（日本語訳）","description":"","frontmatter":{},"headers":[{"level":2,"title":"イベント処理","slug":"イベント処理","link":"#イベント処理","children":[]},{"level":2,"title":"キーボード入力","slug":"キーボード入力","link":"#キーボード入力","children":[{"level":3,"title":"キー入力","slug":"キー入力","link":"#キー入力","children":[]},{"level":3,"title":"テキスト入力","slug":"テキスト入力","link":"#テキスト入力","children":[]},{"level":3,"title":"主な名称","slug":"主な名称","link":"#主な名称","children":[]}]},{"level":2,"title":"マウス入力","slug":"マウス入力","link":"#マウス入力","children":[{"level":3,"title":"カーソル位置","slug":"カーソル位置","link":"#カーソル位置","children":[]},{"level":3,"title":"カーソルモード","slug":"カーソルモード","link":"#カーソルモード","children":[]},{"level":3,"title":"生のマウス動作","slug":"生のマウス動作","link":"#生のマウス動作","children":[]},{"level":3,"title":"カーソルオブジェクト","slug":"カーソルオブジェクト","link":"#カーソルオブジェクト","children":[]},{"level":3,"title":"カーソル入退室イベント","slug":"カーソル入退室イベント","link":"#カーソル入退室イベント","children":[]},{"level":3,"title":"マウスボタン入力","slug":"マウスボタン入力","link":"#マウスボタン入力","children":[]},{"level":3,"title":"スクロール入力","slug":"スクロール入力","link":"#スクロール入力","children":[]}]},{"level":2,"title":"ジョイスティック入力","slug":"ジョイスティック入力","link":"#ジョイスティック入力","children":[{"level":3,"title":"ジョイスティック軸の状態","slug":"ジョイスティック軸の状態","link":"#ジョイスティック軸の状態","children":[]},{"level":3,"title":"ジョイスティックボタンの状態","slug":"ジョイスティックボタンの状態","link":"#ジョイスティックボタンの状態","children":[]},{"level":3,"title":"ジョイスティックハットの状態","slug":"ジョイスティックハットの状態","link":"#ジョイスティックハットの状態","children":[]},{"level":3,"title":"ジョイスティック名","slug":"ジョイスティック名","link":"#ジョイスティック名","children":[]},{"level":3,"title":"ジョイスティック・ユーザーポインター","slug":"ジョイスティック・ユーザーポインター","link":"#ジョイスティック・ユーザーポインター","children":[]},{"level":3,"title":"ジョイスティックの設定変更","slug":"ジョイスティックの設定変更","link":"#ジョイスティックの設定変更","children":[]},{"level":3,"title":"ゲームパッドマッピング","slug":"ゲームパッドマッピング","link":"#ゲームパッドマッピング","children":[]}]},{"level":2,"title":"時間入力","slug":"時間入力","link":"#時間入力","children":[]},{"level":2,"title":"クリップボードの入出力","slug":"クリップボードの入出力","link":"#クリップボードの入出力","children":[]},{"level":2,"title":"パスドロップ入力","slug":"パスドロップ入力","link":"#パスドロップ入力","children":[]}],"relativePath":"translation/GLFW/Guides/input_guide.md","lastUpdated":1676126774000}'),p={name:"translation/GLFW/Guides/input_guide.md"},o=l(`<h1 id="glfw入力ガイド-日本語訳" tabindex="-1">GLFW入力ガイド（日本語訳） <a class="header-anchor" href="#glfw入力ガイド-日本語訳" aria-hidden="true">#</a></h1><p><a href="https://www.glfw.org/docs/latest/input_guide.html" target="_blank" rel="noreferrer">原文</a></p><p>このガイドでは、GLFWの入力関連機能を紹介します。このカテゴリの特定の機能の詳細については、入力のリファレンスを参照してください。また、GLFWの他の領域のガイドもあります。</p><ul><li>Introduction to the API</li><li>Window guide</li><li>Context guide</li><li>Vulkan guide</li><li>Monitor guide</li></ul><p>GLFWは多くの種類の入力を提供します。時間のようにポーリングしかできないものや、スクロールのように コールバックでしか受け取れないものもありますが、多くはコールバックとポー リングの両方を提供します。コールバックはポーリングより使うのに手間がかかりますが、CPUへの負荷が少なく、状態の変化を見逃さないことが保証されます。</p><p>すべての入力コールバックはウィンドウ ハンドルを受け取ります。ウィンドウ ユーザー ポインタを使用すると、コールバックから非グローバル構造体やオブジェクトにアクセスできます。</p><p>様々なイベントコールバックがどのように動作するかをより良く感じるには、イベント テストプログラムを実行してください。これはGLFWがサポートするすべてのコールバックを登録し、すべてのイベントに提供されたすべての引数を、時間とシーケンス情報とともにプリントアウトします。</p><h2 id="イベント処理" tabindex="-1">イベント処理 <a class="header-anchor" href="#イベント処理" aria-hidden="true">#</a></h2><p>GLFWは、アプリケーションに入力を提供し、アプリケーションがロックアップしていないことをウィンドウシステムに証明するために、イベントのためにウィンドウシステムをポーリングする必要があります。イベント処理は、通常、バッファスワップの後、各フレームごとに行われます。ウィンドウがない場合でも、モニタやジョイスティックの接続イベントを受信するために、 イベントポーリングが必要である。</p><p>保留中のイベントを処理する関数として、glfwPollEvents、すでに受信したイベントのみを処理し、すぐにリターンするglfwPollEventの3つがあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwPollEvents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>多くのゲームのように連続的にレンダリングする場合に最適な選択です。</p><p>新しい入力を受け取ったときだけウィンドウの内容を更新する必要がある場合は、glfwWaitEventsがより良い選択です。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWaitEvents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>少なくとも1つのイベントを受信するまでスレッドをスリープさせ、その後、受信したすべてのイベントを処理します。これはCPUサイクルを大幅に節約するもので、例えば編集ツールなどに有効です。</p><p>イベントを待ちたいが、定期的な更新が必要なUI要素や他のタスクがある場合、glfwWaitEventsTimeoutでタイムアウトを指定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWaitEventsTimeout</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.7</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>少なくとも1つのイベントを受信するか、指定された秒数が経過するまで、スレッドをスリープさせる。その後、受信したイベントを処理する。</p><p>glfwWaitEventsでメインスレッドがスリープしている場合、glfwPostEmptyEventでイベントキューに空のイベントをポストすることで、他のスレッドからそれを起こすことができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwPostEmptyEvent</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>コールバックが上記の関数に応答してのみ呼び出されると仮定しないでください。上記の1つ以上の方法でイベントを処理することが必要であるが、 GLFWがそれ自身のコールバックを登録することを必要とするウィンドウシ ステムは、多くのウィンドウシステム関数呼び出しに応答して、GLFWにイベントを 渡すことができる。GLFWは、戻る前にそれらのイベントをアプリケーションコールバックに渡します。</p><p>例えば、Windowsでは、glfwSetWindowSizeが実装されているシステム関数は、すべてのウィンドウが持っているイベントコールバックにウィンドウサイズイベントを直接送り、GLFWがそのウィンドウのために実装します。ウィンドウサイズコールバックを設定した場合、GLFWはglfwSetWindowSizeの呼び出しからすべてが戻る前に、新しいサイズでそれを順番に呼び出します。</p><h2 id="キーボード入力" tabindex="-1">キーボード入力 <a class="header-anchor" href="#キーボード入力" aria-hidden="true">#</a></h2><p>GLFWでは，キーボード入力をキーイベントと文字イベントの2つに分類しています．キーイベントは実際の物理的なキーボードキーに関連し、文字イベントはそれらのキーのいくつかを押すことによって生成されるUnicodeコードポイントに関連します。</p><p>キーと文字は1対1に対応するわけではありません。一つのキーが押されると複数の文字が生成され、一つの文字が生成されるには複数のキーが必要な場合があります。あなたのマシンではそうではないかもしれませんが、あなたのユーザーは、あなたと同じキーボードレイアウト、入力方法、あるいはオペレーティングシステムを使用しているとは限りません。</p><h3 id="キー入力" tabindex="-1">キー入力 <a class="header-anchor" href="#キー入力" aria-hidden="true">#</a></h3><p>物理キーが押されたり離されたりしたときや、繰り返されたときに通知されたい場合は、キーのコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetKeyCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、キーボードキー、プラットフォーム固有のスキャンコード、キーアクション、モディファイアビットを受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">key_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scancode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_KEY_E </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> action </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">activate_airship</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>アクションは GLFW_PRESS, GLFW_REPEAT, GLFW_RELEASE のいずれかである。GLFW_PRESS と GLFW_RELEASE アクションを持つイベントは、キーが押されるたびに発行される。ほとんどのキーは、キーを押している間、GLFW_REPEAT アクションを持つイベントも発行される。</p><p>GLFW_REPEAT アクションを持つキーイベントは、テキスト入力のためのものである。これらは、ユーザーのキーボード設定で設定された速度で放出される。複数のキーが押されている場合でも、繰り返されるキーは1つだけである。GLFW_REPEAT アクションは、どのキーが押されているかを知るためや、アニメーションを駆動するために頼りにしてはならない。代わりに、GLFW_PRESS と GLFW_RELEASE アクションに基づいて関連するキーの状態を保存するか、基本的なキーの状態のキャッシュを提供する glfwGetKey を呼び出す必要があります。</p><p>キーは、既存のキートークンの1つであり、GLFWがそれのためのトークンを欠いている場合、 GLFW_KEY_UNKNOWNです、例えば、電子メールと再生キー。</p><p>スキャンコードは、キートークンの有無にかかわらず、すべてのキーで一意である。スキャンコードはプラットフォーム固有であるが、時間の経過とともに変化するため、キーはプラットフォームによって異なるスキャンコードを持つことになるが、ディスクに保存しても安全である。glfwGetKeyScancodeで、現在のプラットフォーム上の任意の名前のキーのスキャンコードを問い合わせることができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> scancode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetKeyScancode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_KEY_X</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">set_key_mapping</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">scancode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> swap_weapons</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>最後に報告された各名前のキーの状態は、glfwGetKeyでポーリング可能なウィンドウごとの状態配列にも保存されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetKey</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_KEY_E</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">activate_airship</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>返される状態は GLFW_PRESS または GLFW_RELEASE のいずれかである。</p><p>この関数は、キャッシュされたキーイベントの状態を返すだけです。キーの現在の物理的な状態について、システムをポーリングすることはありません。</p><p>状態をポーリングするときはいつでも、探している状態の変化を見逃す危険性があります。押されたキーが、その状態をポーリングする前に再び放された場合、キーが押されたことを見逃してしまうことになります。これに対する推奨の解決策は、キーのコールバックを使うことですが、GLFW_STICKY_KEYS入力モードもあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_STICKY_KEYS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>スティッキーキー・モードが有効なとき、ポーリング可能なキーの状態は、そのキーの状態が glfwGetKey でポーリングされるまで GLFW_PRESS のままである。いったんポーリングされると、もしその間にキーの解放イベントが処理されていれば、状態はGLFW_RELEASEにリセットされ、そうでなければGLFW_PRESSのままになります。</p><p>入力イベントが発生したときに Caps Lock と Num Lock キーの状態がどうなっていたかを知りたい場合は、 GLFW_LOCK_KEY_MODS 入力モードを設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_LOCK_KEY_MODS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>この入力モードが有効な場合、モディファイアビットを受け取るすべてのコールバックは、イベントが発生したときにCaps Lockがオンだった場合はGLFW_MOD_CAPS_LOCKビット、Num Lockがオンだった場合はGLFW_MOD_NUM_LOCKビットが設定されます。</p><p>GLFW_KEY_LAST 定数は、任意の名前のキーの最高値を保持する。</p><h3 id="テキスト入力" tabindex="-1">テキスト入力 <a class="header-anchor" href="#テキスト入力" aria-hidden="true">#</a></h3><p>GLFWは、オペレーティングシステムのテキスト入力システムが生成する、 Unicodeコードポイントのストリーム形式のテキスト入力をサポートしています。キー入力とは異なり、テキスト入力はキーボードレイアウトとモディファイアキーに従い、デッドキーによる文字の合成をサポートします。受信後、コードポイントをUTF-8やその他のお好みのエンコーディングにエンコードすることができます。</p><p>GLFW がサポートするすべてのプラットフォームでは，符号なし int は 32 ビット長なので，コードポイント引数はネイティブエンディアンの UTF-32 として扱うことができる．</p><p>通常のテキスト入力を行いたい場合は、文字コールバックを設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetCharCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> character_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、通常のテキスト入力につながるはずのキーイベントのUnicodeコードポイントを受け取り、一般にそのプラットフォームの標準的なテキストフィールドとして動作するようにします。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">character_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">codepoint</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="主な名称" tabindex="-1">主な名称 <a class="header-anchor" href="#主な名称" aria-hidden="true">#</a></h3><p>キーを名前で参照したい場合、glfwGetKeyNameでキーボードレイアウトに依存する印刷可能なキーの名前を問い合わせることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> key_name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetKeyName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_KEY_W</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">show_tutorial_hint</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Press %s to move forward</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key_name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>この関数は、キーとスキャンコードの両方を扱うことができる。指定されたキーが GLFW_KEY_UNKNOWN である場合はスキャンコードが使用され、そうでない場合は無視される。これは、キーコールバックの動作と一致する。つまり、コールバックの引数は、常にこの関数に変更されずに渡すことができる。</p><h2 id="マウス入力" tabindex="-1">マウス入力 <a class="header-anchor" href="#マウス入力" aria-hidden="true">#</a></h2><p>マウス入力には、マウスの動き、ボタンの押し方、スクロールのオフセットなど、さまざまな形式があります。カーソルの外観も、カスタム画像やシステムテーマの標準的なカーソル形状に変更することができます。</p><h3 id="カーソル位置" tabindex="-1">カーソル位置 <a class="header-anchor" href="#カーソル位置" aria-hidden="true">#</a></h3><p>カーソルがウィンドウ上を移動したときに通知を受けたい場合は、カーソル位置のコールバックを設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetCursorPosCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cursor_position_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、スクリーン座標で測定されたカーソル位置（ウィンドウコンテンツ領域の左上隅を基準とする）を受け取ります。これを提供するプラットフォームでは、完全なサブピクセルのカーソル位置が渡されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cursor_position_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ypos</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>カーソル位置はウィンドウごとに保存され、glfwGetCursorPosでポーリングすることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ypos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetCursorPos</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">ypos</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="カーソルモード" tabindex="-1">カーソルモード <a class="header-anchor" href="#カーソルモード" aria-hidden="true">#</a></h3><p>GLFW_CURSOR 入力モードは、特別な形式のマウス動作入力のために、いくつかのカーソルモードを提供する。デフォルトでは、カーソルモードは GLFW_CURSOR_NORMAL で、通常の矢印カーソル（または glfwSetCursor で設定された別のカーソル）が使われ、カーソルの動きは制限されないことを意味します。</p><p>マウスモーションによるカメラ制御や、無制限にマウスを動かす必要がある他の入力方式を実装したい場合は、カーソルモードをGLFW_CURSOR_DISABLEDに設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR_DISABLED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これはカーソルを隠し、指定されたウィンドウにロックします。GLFWはその後、カーソルの再中心化、オフセット計算、アプリケーションへの仮想カーソル位置の提供など、すべての詳細を引き受けます。この仮想位置は、通常カーソル位置コールバックとポーリングの両方を通して提供されます。</p><blockquote><p>GLFWの他の機能を使って、この機能の独自のバージョンを実装してはならない。これは、サポートされておらず、GLFW_CURSOR_DISABLEDのように堅牢に動作することはない。 もし、カーソルがウィンドウの上にあるときだけ隠されるようにしたいが、それでも通常の動作をさせたい場合は、カーソルモードをGLFW_CURSOR_HIDDENに設定すること。</p></blockquote><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR_HIDDEN</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>カーソルの動きに制限を設けないモードです。</p><p>これらの特別なモードを終了するには、GLFW_CURSOR_NORMALカーソルモードを復元する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_CURSOR_NORMAL</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="生のマウス動作" tabindex="-1">生のマウス動作 <a class="header-anchor" href="#生のマウス動作" aria-hidden="true">#</a></h3><p>カーソルが無効の場合、生の（スケールされていない、加速されていない）マウスモーションが利用可能であれば、有効にすることができます。</p><p>生のマウスモーションは、表面を横切るマウスの実際の動きに近いです。デスクトップカーソルの動きに適用されるスケーリングとアクセラレーションの影響を受けません。この処理はカーソルに適している一方、生の動きは、例えば3Dカメラの制御に適しています。このため、生のマウスモーションはカーソルが無効になっているときのみ提供されます。</p><p>glfwRawMouseMotionSupported を呼び出して、現在のマシンが生のモーションを提供するかどうかを調べ、GLFW_RAW_MOUSE_MOTION 入力モードを設定して有効にする。デフォルトでは無効になっている．</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwRawMouseMotionSupported</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_RAW_MOUSE_MOTION</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>サポートされている場合、生のマウスモーションはウィンドウごとに、いつでも有効または無効にできますが、カーソルが無効になっている場合にのみ提供されます。</p><h3 id="カーソルオブジェクト" tabindex="-1">カーソルオブジェクト <a class="header-anchor" href="#カーソルオブジェクト" aria-hidden="true">#</a></h3><p>GLFW は、GLFWcursor オブジェクトとしてカプセル化された、カスタムカーソルと システムテーマのカーソルイメージの両方を作成することをサポートしています。それらは glfwCreateCursor または glfwCreateStandardCursor で作成され、もし残っていれば glfwDestroyCursor または glfwTerminate で破壊されます。</p><h4 id="カスタムカーソルの作成" tabindex="-1">カスタムカーソルの作成 <a class="header-anchor" href="#カスタムカーソルの作成" aria-hidden="true">#</a></h4><p>カスタムカーソルは glfwCreateCursor で作成され、作成されたカーソルオブジェクトへのハンドルが返されます。例えば、これは左上隅にホットスポットを持つ16x16の白い正方形のカーソルを作成します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> pixels</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#82AAFF;">memset</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pixels</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xff</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">pixels</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">GLFWimage image</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">image.width </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">image.height </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">image.pixels </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pixels</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">GLFWcursor</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> cursor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateCursor</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">image</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>カーソル作成に失敗した場合は NULL を返すので、戻り値の確認が必要である。</p><p>画像データは，32ビット，リトルエンディアン，非前乗算のRGBA，すなわち，赤チャンネルを先頭とする各チャンネル8ビットである．画素は，左上隅から順に，正規の行として配置される。</p><h4 id="標準カーソル作成" tabindex="-1">標準カーソル作成 <a class="header-anchor" href="#標準カーソル作成" aria-hidden="true">#</a></h4><p>現在のシステムカーソルのテーマから標準的な形状のカーソルは、glfwCreateStandardCursorで作成することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWcursor</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> cursor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateStandardCursor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_HRESIZE_CURSOR</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これらのカーソルオブジェクトは、システムカーソルテーマが実際のイメージを提供することを除いて、glfwCreateCursorで作成されたものと全く同じように動作する。</p><h4 id="カーソル破壊" tabindex="-1">カーソル破壊 <a class="header-anchor" href="#カーソル破壊" aria-hidden="true">#</a></h4><p>カーソルが不要になったら、glfwDestroyCursor で破棄する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwDestroyCursor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cursor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>カーソルの破壊は常に成功する。カーソルが任意のウィンドウでカレントである場合、そのウィンドウはデフォルトカーソルに戻ります。これは、カーソルモードには影響しません。残りの全てのカーソルは、glfwTerminateが呼ばれたときに破壊されます。</p><h4 id="カーソル設定" tabindex="-1">カーソル設定 <a class="header-anchor" href="#カーソル設定" aria-hidden="true">#</a></h4><p>glfwSetCursorにより、ウィンドウのカレントカーソルを設定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetCursor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cursor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>一度設定されると、システムカーソルがウィンドウのコンテンツ領域上にあり、カーソルモードがGLFW_CURSOR_NORMALに設定されている限り、カーソル画像が使用されるようになる。</p><p>1つのカーソルは、任意の数のウィンドウに設定することができる。</p><p>デフォルトカーソルに戻すには、そのウィンドウのカーソルをNULLに設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetCursor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><p>カーソルが破壊されると、カーソルが設定されているウィンドウはすべてデフォルトのカーソルに戻されます。これは、カーソルモードには影響しません。</p><h3 id="カーソル入退室イベント" tabindex="-1">カーソル入退室イベント <a class="header-anchor" href="#カーソル入退室イベント" aria-hidden="true">#</a></h3><p>カーソルがウィンドウのコンテンツ領域に入ったとき、またはコンテンツ領域から出たときに通知を受けたい場合は、カーソルの入力/離脱コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetCursorEnterCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cursor_enter_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、カーソルの新しい分類を受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cursor_enter_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">entered</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">entered</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The cursor entered the content area of the window</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The cursor left the content area of the window</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>GLFW_HOVEREDウィンドウ属性で、カーソルが現在ウィンドウのコンテンツ領域内にあるかどうかを問い合わせることができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_HOVERED</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">highlight_interface</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="マウスボタン入力" tabindex="-1">マウスボタン入力 <a class="header-anchor" href="#マウスボタン入力" aria-hidden="true">#</a></h3><p>マウスボタンが押されたり離されたりしたときに通知を受けたい場合は、マウスボタンコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetMouseButtonCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mouse_button_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、マウスボタン、ボタンアクション、モディファイアのビットを受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mouse_button_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">button</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">button </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_MOUSE_BUTTON_RIGHT </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> action </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">popup_menu</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>アクションは GLFW_PRESS または GLFW_RELEASE のいずれかである。</p><p>指定されたボタンのマウスボタンの状態は、glfwGetMouseButtonでポーリングできるウィンドウごとの状態配列に保存されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetMouseButton</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_MOUSE_BUTTON_LEFT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">upgrade_cow</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>返される状態は GLFW_PRESS または GLFW_RELEASE のいずれかである。</p><p>この関数は、キャッシュされたマウスボタンのイベントの状態を返すだけである。マウスボタンの現在の状態について、システムをポーリングすることはありません。</p><p>状態をポーリングするときはいつでも、探している状態の変化を見逃す危険があります。もし押されたマウスボタンが、その状態をポーリングする前に再び離された場合、ボタンが押されたことを見逃してしまうことになります。これに対する推奨される解決策は、マウスボタンのコールバックを使うことですが、GLFW_STICKY_MOUSE_BUTTONS 入力モードもあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetInputMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_STICKY_MOUSE_BUTTONS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>スティッキーマウスボタンモードが有効なとき、マウスボタンの状態が glfwGetMouseButton でポーリングされるまで、ポーリング可能な状態は GLFW_PRESS のままである。いったんポーリングされると、もしその間にマウスボタンのリリースイベントが処理されていたなら、状態はGLFW_RELEASEにリセットされ、そうでなければGLFW_PRESSのままになります。</p><p>GLFW_MOUSE_BUTTON_LAST定数は、任意の名前のボタンの最高値を保持する。</p><h3 id="スクロール入力" tabindex="-1">スクロール入力 <a class="header-anchor" href="#スクロール入力" aria-hidden="true">#</a></h3><p>マウスホイールやタッチパッドのジェスチャーでユーザーがスクロールしたときに通知を受けたい場合は、スクロールコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetScrollCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scroll_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、2次元のスクロールオフセットを受け取る。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scroll_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">xoffset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">yoffset</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>通常のマウスホイールは垂直であるため、Y軸に沿ったオフセットが得られます。</p><h2 id="ジョイスティック入力" tabindex="-1">ジョイスティック入力 <a class="header-anchor" href="#ジョイスティック入力" aria-hidden="true">#</a></h2><p>ジョイスティック機能は、接続されたジョイスティックとコントローラを公開するもので、どちらもジョイスティックと呼ばれます。GLFW_JOYSTICK_1, GLFW_JOYSTICK_2 から、 GLFW_JOYSTICK_16, GLFW_JOYSTICK_LASTまで、最大16本のジョイスティックをサポートします。ジョイスティックがあるかどうかは、glfwJoystickPresentで調べることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> present </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwJoystickPresent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>各ジョイスティックは、0以上の軸、0以上のボタン、0以上の帽子、人間が読める名前、ユーザポインタ、SDL互換のGUIDを持つ。</p><p>GLFWの初期化時に、検出されたジョイスティックが配列の先頭に追加される。一度検出されたジョイスティックは、接続が切れるかライブラリが終了するまで割り当てられたIDを保持するため、 ジョイスティックの接続・切断に伴いIDにずれが生じる可能性があります。</p><p>ジョイスティックの軸、ボタン、ハットの状態はポーリングされると更新され、ウィンドウを作成したりイベントを処理したりする必要はありません。ただし、ジョイスティックの接続・切断イベントをジョイスティックコールバックに確実に届けたい場合は、イベント処理を行う必要があります。</p><p>接続されたすべてのジョイスティックのプロパティをリアルタイムに確認するには、 joysticksテストプログラムを実行します。</p><h3 id="ジョイスティック軸の状態" tabindex="-1">ジョイスティック軸の状態 <a class="header-anchor" href="#ジョイスティック軸の状態" aria-hidden="true">#</a></h3><p>ジョイスティックの全軸の位置はglfwGetJoystickAxesで返されます。返される配列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> axes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetJoystickAxes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>返される配列の各要素は、-1.0 から 1.0 までの値である。</p><h3 id="ジョイスティックボタンの状態" tabindex="-1">ジョイスティックボタンの状態 <a class="header-anchor" href="#ジョイスティックボタンの状態" aria-hidden="true">#</a></h3><p>ジョイスティックの全ボタンの状態はglfwGetJoystickButtonsで返されます。返される配列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> buttons </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetJoystickButtons</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>返された配列の各要素は、GLFW_PRESS または GLFW_RELEASE のいずれかである。</p><p>glfwGetJoystickHats がなかった以前のバージョンとの後方互換性のために、デフォルトでボタンの配列はすべての帽子も含んでいます。詳細は、glfwGetJoystickButtonsのリファレンスドキュメントを参照してください。</p><h3 id="ジョイスティックハットの状態" tabindex="-1">ジョイスティックハットの状態 <a class="header-anchor" href="#ジョイスティックハットの状態" aria-hidden="true">#</a></h3><p>全てのハットの状態がglfwGetJoystickHatsによって返されます。返される配列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> hats </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetJoystickHats</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_7</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>返された配列の各要素は、以下のいずれかである。</p><p>Name Value GLFW_HAT_CENTERED 0 GLFW_HAT_UP 1 GLFW_HAT_RIGHT 2 GLFW_HAT_DOWN 4 GLFW_HAT_LEFT 8 GLFW_HAT_RIGHT_UP GLFW_HAT_RIGHT | GLFW_HAT_UP GLFW_HAT_RIGHT_DOWN GLFW_HAT_RIGHT | GLFW_HAT_DOWN GLFW_HAT_LEFT_UP GLFW_HAT_LEFT | GLFW_HAT_UP GLFW_HAT_LEFT_DOWN GLFW_HAT_LEFT | GLFW_HAT_DOWN</p><p>斜めの方向は、主な方向（上、右、下、左）のビット単位の組み合わせで、対応する方向とANDすることで個別にテストすることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">hats</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> GLFW_HAT_RIGHT</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// State of hat 2 could be right-up, right or right-down</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>glfwGetJoystickHats がなかった以前のバージョンとの後方互換性のために、すべての帽子はデフォルトでボタン配列にも含まれます。詳細はglfwGetJoystickButtonsのリファレンスドキュメントを参照してください。</p><h3 id="ジョイスティック名" tabindex="-1">ジョイスティック名 <a class="header-anchor" href="#ジョイスティック名" aria-hidden="true">#</a></h3><p>ジョイスティックの名称をUTF-8でエンコードしたものをglfwGetJoystickNameで返します。返される文字列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetJoystickName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ジョイスティックの名称は一意であることを保証するものではありません。同じモデル、同じメーカーのジョイスティックでも、同じ名前になることがあります。ジョイスティックIDだけは、そのジョイスティックが接続されなくなるまで一意であることが保証されています。</p><h3 id="ジョイスティック・ユーザーポインター" tabindex="-1">ジョイスティック・ユーザーポインター <a class="header-anchor" href="#ジョイスティック・ユーザーポインター" aria-hidden="true">#</a></h3><p>各ジョイスティックにはユーザポインタがあり、glfwSetJoystickUserPointerで設定し、 glfwGetJoystickUserPointerで取得することができます。これは必要な用途に使うことができ、GLFWで変更されることはありません。この値は、ジョイスティックの接続が切れるか、ライブラリが終了するまで保持されます。</p><p>ポインタの初期値はNULLである。</p><h3 id="ジョイスティックの設定変更" tabindex="-1">ジョイスティックの設定変更 <a class="header-anchor" href="#ジョイスティックの設定変更" aria-hidden="true">#</a></h3><p>ジョイスティックの接続、切断時に通知を受けたい場合は、ジョイスティックコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetJoystickCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">joystick_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、接続・切断されたジョイスティックのID、および発生したイベントを受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">joystick_callback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">jid</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">event </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_CONNECTED</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The joystick was connected</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">event </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_DISCONNECTED</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The joystick was disconnected</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ジョイスティックの接続・切断イベントをすべてのプラットフォームで配信するためには、イベント処理関数のいずれかを呼び出す必要がある。ジョイスティックの切断を検知して、ジョイスティック関数からコールバックを呼び出すこともできる。この場合、関数はジョイスティックが切断されたときに返すものをそのまま返します。</p><p>glfwGetJoystickNameとglfwGetJoystickUserPointerのみが、ジョイスティック切断時に有用な値を返し、 monitorコールバックが返される前に返されるだけです。</p><p>###ゲームパッド入力</p><p>ジョイスティックの機能には、軸、ボタン、ハットなどのラベルがなく、デバイスのどこに配置されているのかもわかりません。また、同じデバイスであっても、プラットフォームによって順番が異なる場合があります。</p><p>この問題を解決するために、SDLコミュニティはSDL_GameControllerDBプロジェクトをクラウドソーシングしました。これは、さまざまなデバイスからXboxのようなゲームパッドへのマッピングを集めたデータベースです。</p><p>GLFWはこのマッピング形式をサポートしており、リリース時に利用可能なマッピングのコピーが含まれています。実行時にこれを更新する方法については、Gamepad mappingsを参照してください。ジョイスティックが接続されたり、マッピングが更新されたりすると、 マッピングは自動的にジョイスティックに割り当てられます。</p><p>ジョイスティックが存在し、かつゲームパッドマッピングがあるかどうかは、 glfwJoystickIsGamepadで確認することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwJoystickIsGamepad</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_2</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Use as gamepad</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ゲームパッド入力にのみ興味がある場合は、glfwJoystickPresentの代わりにこの関数を使用することができます。</p><p>glfwGetGamepadNameで、ゲームパッドマッピングが提供する人間にとって読みやすい名前を問い合わせることができます。これはジョイスティック名と同じかもしれませんし、違うかもしれません。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetGamepadName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_7</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ジョイスティックのゲームパッド状態を取得するには、glfwGetGamepadStateを呼び出します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWgamepadstate state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwGetGamepadState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_JOYSTICK_3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buttons</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">GLFW_GAMEPAD_BUTTON_A</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">input_jump</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">input_speed</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">axes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>GLFWgamepadstate構造体は、ボタンの状態と軸の状態の2つの配列を持っています。各ボタンと軸の値は、glfwGetJoystickButtons と glfwGetJoystickAxes 関数と同じで、つまり、ボタンは GLFW_PRESS または GLFW_RELEASE 、軸は -1.0 ～ 1.0 (含む) です。</p><p>配列のサイズと各配列内の位置は固定である．</p><p>ボタンのインデックスは GLFW_GAMEPAD_BUTTON_A, GLFW_GAMEPAD_BUTTON_B, GLFW_GAMEPAD_BUTTON_X, GLFW_GAMEPAD_BUTTON_Y, GLFW_GAMEPAD_BUTTON_LEFT_BUMPER, GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER, GLFW_GAMEPAD_BUTTON_BACK, GLFW_GAMEPAD_BUTTON_START, GLFW_GAMEPAD_BUTTON_GUIDE, GLFW_GAMEPAD_BUTTON_LEFT_THUMB, GLFW_GAMEPAD_BUTTON_RIGHT_THUMB, GLFW_GAMEPAD_BUTTON_DPAD_UP, GLFW_GAMEPAD_BUTTON_DPAD_RIGHT, GLFW_GAMEPAD_BUTTON_DPAD_DOWN and GLFW_GAMEPAD_BUTTON_DPAD_LEFT.</p><p>お好みで、A、B、X、YボタンのインデックスにGLFW_GAMEPAD_BUTTON_CROSS、GLFW_GAMEPAD_BUTTON_CIRCLE、GLFW_GAMEPAD_BUTTON_SQUARE、GLFW_GAMEPAD_BUTTON_TRIANGLEというエイリアスも存在します。</p><p>軸索は GLFW_GAMEPAD_AXIS_LEFT_X, GLFW_GAMEPAD_AXIS_LEFT_Y, GLFW_GAMEPAD_AXIS_RIGHT_X, GLFW_GAMEPAD_AXIS_RIGHT_Y, GLFW_GAMEPAD_AXIS_LEFT_TRIGGER and GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER.</p><p>GLFW_GAMEPAD_BUTTON_LAST と GLFW_GAMEPAD_AXIS_LAST 定数は、各配列で利用可能な最大のインデックスに等しい。</p><h3 id="ゲームパッドマッピング" tabindex="-1">ゲームパッドマッピング <a class="header-anchor" href="#ゲームパッドマッピング" aria-hidden="true">#</a></h3><p>GLFWは、リリース時にSDL_GameControllerDBで利用可能なマッピングのコピーを含んでいます。新しいマッピングはglfwUpdateGamepadMappingsで実行時に追加することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mappings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load_file_contents</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">game/data/gamecontrollerdb.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">glfwUpdateGamepadMappings</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mappings</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>この機能は、1行から、gamecontrollerdb.txtファイル全体の未修正の内容まで、すべてをサポートします。</p><p>GLFWをソースからCMakeでコンパイルする場合、update_mappingsターゲットをビルドすることで組み込みのマッピングを更新することができます。これはGenerateMappings.cmake CMakeスクリプトを実行し、gamecontrollerdb.txtをダウンロードし、mappings.hヘッダーファイルを再生成するものです。</p><p>以下は、マッピングのフォーマットについての説明です。この記述は権威あるものではないことに注意してください。このフォーマットはSDLおよびSDL_GameControllerDBプロジェクトによって定義されており、それらのドキュメントやコードが優先されます。</p><p>各マッピングは、ゲームパッドの GUID、名前、レイアウトを記述するカンマ区切りの値で構成される一行で構成されます。16進数で始まらない行は無視されます。</p><p>最初の値は常にゲームパッドのGUIDで、通常、メーカー、モデル、リビジョン、コンピューターとの接続タイプを特定する32文字長の16進文字列です。この情報がない場合、GUIDはゲームパッド名から生成される。GLFWはSDL 2.0.5+のGUID形式を使用していますが、古い形式からの変換も可能です。</p><p>2番目の値は常にゲームパッドの人間にとって読みやすい名前である。</p><p>後続の値はすべて<code>&lt;field&gt;:&lt;value&gt;</code>の形式であり，マッピングのレイアウトを記述する。これらのフィールドはすべて存在するとは限らず、またどのような順序で出現してもよい。</p><p>ボタンのフィールドは、a, b, x, y, back, start, guide, dpup, dpright, dpdown, dpleft, leftshoulder, rightshoulder, leftstick, rightstickである。</p><p>軸のフィールドは、leftx, lefty, rightx, righty, lefttrigger, righttrigger です。</p><p>axisまたはbuttonフィールドの値は、ジョイスティックボタン、ジョイスティック軸、ハットビットマスク、または空であることができます。ジョイスティックボタンはbNで指定し、例えば第3ボタンはb2である。ジョイスティック軸はaNで指定し、例えば第8ボタンはa7とする。ジョイスティックハットビットマスクはhN.Nとして指定され、例えばh0.8は最初のハットの左を意味します。マスクには複数のビットを設定することができます。</p><p>軸の前に + または - の範囲修飾子があり、たとえば4軸の正の半分は +a3 となります。これは、ジョイスティック軸の正または負の半分に入力を制限するものです。軸または半軸の後に、~inversion修飾子がある場合があります。 for example a2~ or -a7~. ゲームパッド軸の値を否定します。</p><p>ハットビットマスクはジョイスティックファンクションのハット状態と一致します。</p><p>また、マッピングが有効なプラットフォームを指定する特別なプラットフォームフィールドがあります。指定可能な値は、Windows、Mac OS X、Linuxです。</p><p>以下は、ゲームパッドのマッピングの例です。これは、WindowsのXInput API経由でアクセスするXboxコントローラのためにGLFWに組み込まれたものです。この例は、ページに収まるようにいくつかの行に分かれていますが、実際のゲームパッドマッピングは1行でなければなりません。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">78696e70757401000000000000000000,XInput Gamepad (GLFW),platform:Windows,a:b0,</span></span>
<span class="line"><span style="color:#A6ACCD;">b:b1,x:b2,y:b3,leftshoulder:b4,rightshoulder:b5,back:b6,start:b7,leftstick:b8,</span></span>
<span class="line"><span style="color:#A6ACCD;">rightstick:b9,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:a4,</span></span>
<span class="line"><span style="color:#A6ACCD;">righttrigger:a5,dpup:h0.1,dpright:h0.2,dpdown:h0.4,dpleft:h0.8,</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>GLFW は、最近 SDL に追加された出力範囲と修飾子 + と - をまだサポートしていません。入力修飾子 +, - および ~ はサポートされており、上で説明したとおりです。</p></blockquote><h2 id="時間入力" tabindex="-1">時間入力 <a class="header-anchor" href="#時間入力" aria-hidden="true">#</a></h2><p>GLFWはglfwGetTimeにより、秒単位の高分解能な時間入力を提供します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> seconds </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetTime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>glfwInitでライブラリが初期化されてからの秒数を返す。使用されるプラットフォーム固有の時間ソースは、通常、マイクロ秒またはナノ秒の分解能を持つ。</p><p>基準時刻はglfwSetTimeで変更することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetTime</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">4.0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これは、指定された時間（秒）を設定し、そこからカウントを続けるものです。</p><p>また、glfwGetTimerValueを使用すると、上記の関数を実装するために使用された生のタイマーにアクセスすることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">uint64_t</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetTimerValue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>この値は、1 / 周波数秒単位です。生タイマーの周波数は、オペレーティングシステムとハードウェアに依存します。glfwGetTimerFrequencyで周波数をHzで問い合わせることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">uint64_t</span><span style="color:#A6ACCD;"> frequency </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetTimerFrequency</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><h2 id="クリップボードの入出力" tabindex="-1">クリップボードの入出力 <a class="header-anchor" href="#クリップボードの入出力" aria-hidden="true">#</a></h2><p>システムのクリップボードにUTF-8でエンコードされた文字列がある場合、またはそれに変換できる場合、glfwGetClipboardStringでそれを取得することができます。返される文字列の寿命については、リファレンスドキュメントを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetClipboardString</span><span style="color:#89DDFF;">(NULL);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insert_text</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>クリップボードが空の場合、またはその内容を変換できなかった場合は、NULL を返す。</p><p>システムクリップボードの内容は、glfwSetClipboardString によって UTF-8 でエンコードされた文字列に設定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetClipboardString</span><span style="color:#89DDFF;">(NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A string with words in it</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="パスドロップ入力" tabindex="-1">パスドロップ入力 <a class="header-anchor" href="#パスドロップ入力" aria-hidden="true">#</a></h2><p>ウィンドウにドロップされたファイルやディレクトリのパスを受け取りたい場合、ファイルドロップのコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetDropCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> drop_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、UTF-8 でエンコードされたパスの配列を受け取る。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">drop_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">paths</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  i</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">handle_dropped_file</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">paths</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>パスの配列とその文字列は、ファイルドロップコールバックが返されるまでの間のみ有効で、そのイベントのために特別に生成されている可能性があります。パスを保持したい場合は、配列のディープコピーを作成する必要があります。</p>`,229),e=[o];function t(c,r,i,F,D,y){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
