import{_ as a,c as e,o as t,a as l}from"./app.1650bd79.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Luaとの比較","slug":"comparison_to_Lua","link":"#comparison_to_Lua","children":[{"level":3,"title":"配列とスタックのインデックスはゼロベース","slug":"配列とスタックのインデックスはゼロベース","link":"#配列とスタックのインデックスはゼロベース","children":[]},{"level":3,"title":"オブジェクト型は、関数とスレッドを表す","slug":"オブジェクト型は、関数とスレッドを表す","link":"#オブジェクト型は、関数とスレッドを表す","children":[]},{"level":3,"title":"Lua userdata と lightuserdata","slug":"lua-userdata-と-lightuserdata","link":"#lua-userdata-と-lightuserdata","children":[]},{"level":3,"title":"ガベージ・コレクション","slug":"ガベージ・コレクション","link":"#ガベージ・コレクション","children":[]},{"level":3,"title":"duk_safe_call() vs. lua_cpcall()","slug":"duk-safe-call-vs-lua-cpcall","link":"#duk-safe-call-vs-lua-cpcall","children":[]},{"level":3,"title":"バイトコードダンプ/ロード","slug":"バイトコードダンプ-ロード","link":"#バイトコードダンプ-ロード","children":[]},{"level":3,"title":"メタテーブル","slug":"メタテーブル","link":"#メタテーブル","children":[]},{"level":3,"title":"lua_next()とduk_next()の比較","slug":"lua-next-とduk-next-の比較","link":"#lua-next-とduk-next-の比較","children":[]},{"level":3,"title":"ローアクセサ","slug":"ローアクセサ","link":"#ローアクセサ","children":[]},{"level":3,"title":"コルーチン","slug":"コルーチン","link":"#コルーチン","children":[]},{"level":3,"title":"複数の戻り値","slug":"複数の戻り値","link":"#複数の戻り値","children":[]},{"level":3,"title":"弱参照(Weak references)","slug":"弱参照-weak-references","link":"#弱参照-weak-references","children":[]},{"level":3,"title":"Unicode","slug":"unicode","link":"#unicode","children":[]},{"level":3,"title":"ストリーミング・コンパイル","slug":"ストリーミング・コンパイル","link":"#ストリーミング・コンパイル","children":[]}]}],"relativePath":"translation/duktape/guide/comparison_to_lua.md","lastUpdated":1676126774000}'),r={name:"translation/duktape/guide/comparison_to_lua.md"},i=l('<h2 id="comparison_to_Lua" tabindex="-1">Luaとの比較 <a class="header-anchor" href="#comparison_to_Lua" aria-hidden="true">#</a></h2><p>Duktapeは、概念的にLuaから多くのことを借りています。以下は、Luaと比較してDuktapeで何が違うかについてのメモです。Luaに既に慣れている方には役に立つかもしれません。</p><h3 id="配列とスタックのインデックスはゼロベース" tabindex="-1">配列とスタックのインデックスはゼロベース <a class="header-anchor" href="#配列とスタックのインデックスはゼロベース" aria-hidden="true">#</a></h3><p>配列とスタックのインデックスは全てゼロベースで、Luaのような1ベースではありません。つまり、スタックの底は 0、下から 2 番目の要素は 1、一番上の要素は -1 です。0 はもはや無効/非存在の要素を示すのに利用できないので、Duktape では代わりに定数 DUK_INVALID_INDEX が使用されます。</p><p>文字列のインデックスもゼロベースで、スライスは開始インデックスを含み、終了インデックスを含まない（すなわち[start,end[）で示されます。Lua では、スライスは包括的なインデックス（例：[start,end]）で示されます。</p><h3 id="オブジェクト型は、関数とスレッドを表す" tabindex="-1">オブジェクト型は、関数とスレッドを表す <a class="header-anchor" href="#オブジェクト型は、関数とスレッドを表す" aria-hidden="true">#</a></h3><p>Luaでは、関数とスレッドは、オブジェクトとは別の型です。Duktapeでは、オブジェクト型は、プレーンオブジェクト、ECMAScriptやネイティブ関数、スレッド（コルーチン）に使用されます。その結果、これら全てのオブジェクトは、変更可能で拡張可能なプロパティのセットを持ちます。</p><h3 id="lua-userdata-と-lightuserdata" tabindex="-1">Lua userdata と lightuserdata <a class="header-anchor" href="#lua-userdata-と-lightuserdata" aria-hidden="true">#</a></h3><p>Luaのuserdataに最も近いコンセプトはDuktapeバッファ・タイプですが、以下のような相違点があります。</p><ul><li>Duktapeバッファーはサイズ変更可能ですが、Lua userdataの値はサイズ変更できません。Duktapeバッファはサイズ変更可能ですが、Luaのユーザーデータはサイズ変更できません。</li><li>Duktapeバッファはプロパティを持たない生のバイト配列であり、Lua userdataオブジェクトは環境参照を格納することができます。</li></ul><p>LuaのlightuserdataとDuktapeのポインタは、基本的に同じものです。</p><p>Duktapeバッファにプロパティを関連付ける必要がある場合、代わりにバッファ・オブジェクトを使用します（または、独自のオブジェクトを作成し、そのプロパティとしてプレーン・バッファを格納します）。そして、そのオブジェクトにファイナライザーを追加することで、バッファに関連するすべてのリソースを解放することができます。これは、バッファへの参照を保持するものが他にない限り、うまく動作します。もしそうだとすると、オブジェクトがファイナライズされた後にバッファが使用される可能性があります。これを防ぐために、ネイティブCの構造体は、データ構造がオープンかクローズかを示すフラグを持つべきでしょう。これは、堅牢なネイティブ・コードのためのグッドプラクティスです。</p><h3 id="ガベージ・コレクション" tabindex="-1">ガベージ・コレクション <a class="header-anchor" href="#ガベージ・コレクション" aria-hidden="true">#</a></h3><p>Duktapeは、参照カウントと非インクリメンタルなマーク＆スイープ・ガーベージ・コレク ターを組み合わせています（マーク＆スイープは参照サイクルのみに必要です）。マーク＆スイープの任意パスを無効にすることで、収集の一時停止を避けることができます（DUK_USE_VOLUNTARY_GCを無効にする）。Lua は一時停止のないインクリメンタル・コレクターを持ちますが、参照カウントはありません。</p><p>Duktapeには、緊急ガベージコレクタがあります。Lua 5.2には緊急ガベージコレクタがありますが、Lua 5.1にはありません（ただし、緊急GCパッチはあります）。</p><h3 id="duk-safe-call-vs-lua-cpcall" tabindex="-1">duk_safe_call() vs. lua_cpcall() <a class="header-anchor" href="#duk-safe-call-vs-lua-cpcall" aria-hidden="true">#</a></h3><p>duk_safe_call() は、既存のバリュースタック・フレームで動作する保護された C 関数呼び出しです。関数呼び出しは、呼び出しスタック上では全て見えません。</p><p>lua_cpcall()は新しいスタック・フレームを作成します。</p><h3 id="バイトコードダンプ-ロード" tabindex="-1">バイトコードダンプ/ロード <a class="header-anchor" href="#バイトコードダンプ-ロード" aria-hidden="true">#</a></h3><p>Duktape 1.3以降、DuktapeはLuaのlua_dump()に似たバイトコード・ダンプ/ロード・メカニズムを備えています。バイトコード・ダンプ/ロードを参照してください。</p><h3 id="メタテーブル" tabindex="-1">メタテーブル <a class="header-anchor" href="#メタテーブル" aria-hidden="true">#</a></h3><p>ECMAScript E5/E5.1 には Lua のメタテーブルに相当するものはありませんが、ECMAScript ES2015 Proxy オブジェクトが同様の機能を提供します。E5/E5.1よりも優れたプロパティの仮想化を可能にするために、DuktapeはES2015 Proxyのサブセットを実装しています。</p><h3 id="lua-next-とduk-next-の比較" tabindex="-1">lua_next()とduk_next()の比較 <a class="header-anchor" href="#lua-next-とduk-next-の比較" aria-hidden="true">#</a></h3><p>lua_next() は、前のキーと値を新しいペアに置き換えますが、duk_next() はそうではありません。呼び出し側は、キーや値を明示的にポップする必要があります。</p><h3 id="ローアクセサ" tabindex="-1">ローアクセサ <a class="header-anchor" href="#ローアクセサ" aria-hidden="true">#</a></h3><p>lua_rawgetのようなLuaの生のテーブルアクセス関数に相当するものはありません。以下の ECMAScript の組み込み関数を使用することで、同様の効果を得ることができます (ただし、パフォーマンスに関しては別です)。Object.getOwnPropertyDescriptor ( O, P ), Object.defineProperty ( O, P, Attributes ).</p><h3 id="コルーチン" tabindex="-1">コルーチン <a class="header-anchor" href="#コルーチン" aria-hidden="true">#</a></h3><p>Duktape APIには、コルーチン制御のためのプリミティブはありません（Lua APIには、例えばlua_resumeがあります）。コルーチンの制御は、Duktape のビルトインで公開されている関数を使用する ことによってのみ可能です。さらに、Duktapeにはコルーチンの生成に関する多くの制限があります。例えば、コルーチンはコンストラクター呼び出しやゲッター/セッター呼び出しの内部で生成することはできません。</p><h3 id="複数の戻り値" tabindex="-1">複数の戻り値 <a class="header-anchor" href="#複数の戻り値" aria-hidden="true">#</a></h3><p>Lua は複数の戻り値をサポートしていますが、Duktape (または ECMAScript) は現在サポートしていません。これは、複数の値を返す構文を持つ ECMAScript ES2015 で変わるかもしれません。Duktape/C APIは、1以上の戻り値を予約し、後で複数の戻り値に使用できるようにします。</p><h3 id="弱参照-weak-references" tabindex="-1">弱参照(Weak references) <a class="header-anchor" href="#弱参照-weak-references" aria-hidden="true">#</a></h3><p>Luaは弱参照をサポートしています。Duktapeは、現在サポートしていません。</p><h3 id="unicode" tabindex="-1">Unicode <a class="header-anchor" href="#unicode" aria-hidden="true">#</a></h3><p>Luaは、ビルトインのUnicodeをサポートしていません（文字列はバイト列です）が、DuktapeはECMAScript準拠の一環として、16ビットUnicodeをサポートしています。</p><h3 id="ストリーミング・コンパイル" tabindex="-1">ストリーミング・コンパイル <a class="header-anchor" href="#ストリーミング・コンパイル" aria-hidden="true">#</a></h3><p>Luaには、ストリーミング・コンパイルAPIがあり、コードがディスクから読み込まれたり、オンザフライで解凍されたりする場合に有効です。Duktapeは現在、ストリーミング・コンパイルをサポートしていません。これは、ソース・コードに対して複数のパスが必要だからです。</p>',36),u=[i];function d(n,h,c,s,p,o){return t(),e("div",null,u)}const f=a(r,[["render",d]]);export{k as __pageData,f as default};
