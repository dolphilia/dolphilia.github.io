import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.92ce8a2a.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_compile_lstring_filename.md","filePath":"translation/duktape/api/duk_compile_lstring_filename.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_compile_lstring_filename.md"},p=l(`<h2 id="duk-compile-lstring-filename" tabindex="-1">duk_compile_lstring_filename() <a class="header-anchor" href="#duk-compile-lstring-filename" aria-label="Permalink to &quot;duk_compile_lstring_filename()&quot;">​</a></h2><p>1.0.0 string compile</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_compile_lstring_filename</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_uint_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_compile_lstring_filename</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_uint_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | filename -&gt; | ... | function |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_compile() と同様ですが、コンパイル入力は長さを明示した C 文字列として与えられます。</p><p>この変種では、入力ソースコードは Duktape によってインターンされないので、 低メモリ環境では便利です。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">src </span><span style="color:#F97583;">=</span><span style="color:#6A737D;"> /* ... */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#6A737D;"> /* ... */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;myFile.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_compile_lstring_filename</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, src, len);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">src </span><span style="color:#D73A49;">=</span><span style="color:#6A737D;"> /* ... */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#6A737D;"> /* ... */</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;myFile.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_compile_lstring_filename</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, src, len);</span></span></code></pre></div>`,11),e=[p];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
