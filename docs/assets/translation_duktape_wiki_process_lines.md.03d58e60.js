import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a0f12ab5.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/wiki/process_lines.md","filePath":"translation/duktape/wiki/process_lines.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/wiki/process_lines.md"},o=l(`<h2 id="ライン処理" tabindex="-1">ライン処理 <a class="header-anchor" href="#ライン処理" aria-label="Permalink to &quot;ライン処理&quot;">​</a></h2><h3 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>簡単なサンプルプログラムを見てみましょう。このプログラムはCのメインループを使って標準入力から行を読み込み、ECMAScriptヘルパーを呼び出して行を変換し、その結果をプリントアウトします。行処理機能は、正規表現のようなECMAScriptの良いところを利用することができ、Cプログラムを再コンパイルすることなく簡単に変更することができる。</p><p>スクリプトのコードはprocess.jsに配置される。行処理関数の例では、プレーンテキストの行をHTMLに変換し、星の間のテキストを自動的に太字にする。</p><ul><li><a href="https://github.com/svaarala/duktape/blob/master/examples/guide/process.js" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/examples/guide/process.js</a></li></ul><p>C言語のコードprocesslines.cは、Duktapeコンテキストを初期化し、スクリプトを評価した後、標準入力から行を処理し、各行に対してprocessLine()を呼び出します。</p><ul><li><a href="https://github.com/svaarala/duktape/blob/master/examples/guide/processlines.c" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/examples/guide/processlines.c</a></li></ul><h3 id="processlines-cの内訳" tabindex="-1">processlines.cの内訳 <a class="header-anchor" href="#processlines-cの内訳" aria-label="Permalink to &quot;processlines.cの内訳&quot;">​</a></h3><p>このサンプルコードのDuktape固有の部分を一つ一つ見ていきましょう。ここでは簡潔にするため、いくつかの詳細について説明します。詳細については、プログラミング・モデルを参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* For brevity assumes a maximum file length of 16kB. */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">push_file_as_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">filename</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    FILE </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buf</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16384</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    f </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fopen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fread</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">buf</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fclose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">duk_push_lstring</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;"> buf</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">duk_size_t</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">duk_push_undefined</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Duktapeは埋め込み可能なエンジンであり、最小限の仮定を行うため、デフォルトのCまたはECMAScript APIにはファイルI/Oバインディングがありません。上記のヘルパーは、ファイルの内容を文字列としてプッシュする方法の例です。この例では簡潔にするために固定の読み込みバッファを使っていますが、より良い実装ではまずファイルのサイズをチェックして、そのバッファを確保することになるでしょう。Duktapeの配布物には「extras」が含まれており、ファイルI/Oヘルパーを含む、便利なCやECMAScriptヘルパーが提供されています。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_create_heap_default</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Failed to create a Duktape heap.</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>まず、Duktapeコンテキストを作成します。コンテキストは、値をスタックにプッシュしたりポッピングしたりすることで、ECMAScriptコードと値を交換できるようにします。Duktape APIのほとんどの呼び出しは、値スタックを操作し、スタック上の値をプッシュ、ポッピング、検査します。実運用コードでは、致命的なエラー・ハンドラを設定できるように duk_create_heap() を使用する必要があります。エラー処理のベストプラクティスについては、 エラー処理 を参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">push_file_as_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">process.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">duk_peval</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_safe_to_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#F07178;"> finished</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">duk_pop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  /* ignore result */</span></span></code></pre></div><p>まず、ファイルヘルパーを使って、process.js を文字列としてバリュースタックにプッシュします。それから duk_peval() を使ってスクリプトをコンパイルし、実行します。このスクリプトは、後で使用するために processLine() を ECMAScript グローバルオブジェクトに登録します。保護された呼び出しである duk_peval() はスクリプトの実行に使用され、構文エラーのようなスクリプトのエラーは致命的なエラーを引き起こすことなく捕捉され処理されるようにします。エラーが発生した場合、エラーメッセージは duk_safe_to_string() を使って安全に強制され、さらなるエラーを発生させないことが保証されます。文字列強制の結果は、読み取り専用で NUL 終端の UTF-8 エンコード文字列を指す const char * で、printf() で直接使用することができます。この文字列は、対応する文字列値が値スタック上にある限り、有効である。文字列は、値が値スタックからポップ・オフされると、自動的に解放される。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_global_object</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_get_prop_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#676E95;font-style:italic;"> /*index*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">processLine</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>最初の呼び出しは、ECMAScript のグローバルオブジェクトを値スタックにプッシュします。2 番目の呼び出しは、グローバルオブジェクトの processLine プロパティを検索します (process.js 内のスクリプトで定義されています)。負の値はスタック要素を上から順に参照するので、-1 はスタックの最上位要素であるグローバルオブジェクトを参照します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> line</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>line が指す文字列を値スタックにプッシュする。文字列の長さは、 strlen() のように NUL ターミネータをスキャンすることで自動的に決定されます。Duktape は、文字列がスタックにプッシュされたときにそのコピーを作成するので、呼び出しが返されたときにラインバッファを自由に変更することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">duk_pcall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#676E95;font-style:italic;"> /*nargs*/</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_safe_to_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_safe_to_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">duk_pop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  /* pop result/error */</span></span></code></pre></div><p>このとき、値スタックに含まれる（スタックは右側に成長する）。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[ globalObject processLine line ]</span></span></code></pre></div><p>duk_pcall() メソッドは、バリュースタック上に指定された数の引数で関数を呼び出し、関数と引数の値の両方を関数の戻り値に置き換えます。ここでは、nargs の数が 1 なので、processLine 関数と行が戻り値に置き換えられ、結果的にバリュースタックは次のようになります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[ globalObject callResult ]</span></span></code></pre></div><p>この呼び出しは、エラーを捕捉してプリントできるように保護されている。duk_safe_to_string() API 呼び出しは、エラーを安全に印刷するために再び使用されます。一度印刷されると、結果（またはエラー）は値スタックからポップオフされ、グローバルオブジェクトはまだスタックに残ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_destroy_heap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>最後に、Duktapeコンテキストは破棄され、コンテキストが保持するすべてのリソースが解放されます。この呼び出しによって、値スタックと値スタック上の全ての参照が解放されます。この例では、グローバル・オブジェクトを意図的に値スタックに残しています。これは問題ではありません。ヒープが破壊されたときに値スタックが空でなくても、メモリリークは発生しません。</p><h3 id="コンパイル" tabindex="-1">コンパイル <a class="header-anchor" href="#コンパイル" aria-label="Permalink to &quot;コンパイル&quot;">​</a></h3><p>単純に次のようにコンパイルします。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># src/ contains Duktape sources from the distributable or prepared</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># explicitly using tools/configure.py.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-std=c99</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">processlines</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Isrc/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src/duktape.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">processlines.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lm</span></span></code></pre></div><p>テスト実行、process.jsがカレントディレクトリにあることを確認する。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">I like *Sam &amp; Max*.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">./processlines</span></span>
<span class="line"><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">like</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">Sam</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Max&lt;/b&gt;.</span></span></code></pre></div>`,32),e=[o];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
