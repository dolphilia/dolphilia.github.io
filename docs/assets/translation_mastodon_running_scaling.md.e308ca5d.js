import{_ as s,c as a,o as n,Q as e}from"./chunks/framework.44f152d8.js";const h=JSON.parse('{"title":"サーバーのスケールアップ","description":"","frontmatter":{},"headers":[],"relativePath":"translation/mastodon/running/scaling.md","lastUpdated":1676784496000}'),o={name:"translation/mastodon/running/scaling.md"},l=e(`<h1 id="サーバーのスケールアップ" tabindex="-1">サーバーのスケールアップ <a class="header-anchor" href="#サーバーのスケールアップ" aria-label="Permalink to &quot;サーバーのスケールアップ&quot;">​</a></h1><p>より多くのユーザーにサービスを提供するためにできる最適化。</p><nav class="table-of-contents"><ul><li><a href="#並行処理の管理">並行処理の管理</a><ul><li><a href="#web-puma">Web (Puma)</a></li><li><a href="#ストリーミングapi">ストリーミングAPI</a></li><li><a href="#バックグラウンド処理-sidekiq">バックグラウンド処理（Sidekiq）</a></li></ul></li><li><a href="#pgbouncerによるトランザクションプーリング">pgBouncerによるトランザクションプーリング</a><ul><li><a href="#なぜpgbouncerが必要なのでしょうか">なぜPgBouncerが必要なのでしょうか？</a></li><li><a href="#pgbouncerのインストール">PgBouncerのインストール</a></li><li><a href="#pgbouncerの設定">PgBouncerの設定</a></li></ul></li><li><a href="#キャッシュ用にredisを分離する">キャッシュ用にRedisを分離する</a></li><li><a href="#リードレプリカ">リードレプリカ</a></li></ul></nav><h2 id="並行処理の管理" tabindex="-1">並行処理の管理 <a class="header-anchor" href="#並行処理の管理" aria-label="Permalink to &quot;並行処理の管理&quot;">​</a></h2><p>Mastodonには3種類のプロセスがあります。</p><ul><li>Web (Puma)</li><li>ストリーミングAPI</li><li>バックグラウンド処理(Sidekiq)</li></ul><h3 id="web-puma" tabindex="-1">Web (Puma) <a class="header-anchor" href="#web-puma" aria-label="Permalink to &quot;Web (Puma)&quot;">​</a></h3><p>Webプロセスは、アプリケーションの大部分において、短時間のHTTPリクエストを提供します。以下の環境変数がそれを制御します。</p><ul><li><code>WEB_CONCURRENCY</code> はワーカープロセスの数をコントロールします。</li><li><code>MAX_THREADS</code> はプロセスごとのスレッド数をコントロールする。</li></ul><p>スレッドは親プロセスのメモリを共有する。スレッドは親プロセスのメモリを共有します。異なるプロセスは独自のメモリを割り当てますが、コピーオンライトによって一部のメモリを共有します。スレッドの数が多ければ多いほど、まず CPU が最大になり、プロセスの数が多ければ多いほど、まず RAM が最大になります。</p><p>これらの値は、同時にいくつの HTTP リクエストを処理できるかに影響します。</p><p>スループットの面では、スレッド数よりもプロセス数の方が優れています。</p><h3 id="ストリーミングapi" tabindex="-1">ストリーミングAPI <a class="header-anchor" href="#ストリーミングapi" aria-label="Permalink to &quot;ストリーミングAPI&quot;">​</a></h3><p>ストリーミングAPIは、HTTPおよびWebSocketの長時間接続を処理し、クライアントがリアルタイムの更新を受け取るためのものです。以下の環境変数がこれを制御します。</p><ul><li><code>STREAMING_CLUSTER_NUM</code> はワーカープロセスの数を制御する。</li><li><code>STREAMING_API_BASE_URL</code> はストリーミング API のベース URL を制御する。</li></ul><p>1つのプロセスで、それなりに多くのコネクションを処理することができる。例えば、nginx が接続をプロキシすることによるオーバーヘッドを避けたい場合は、Streaming API を別のサブドメインでホストすることができる。</p><h3 id="バックグラウンド処理-sidekiq" tabindex="-1">バックグラウンド処理（Sidekiq） <a class="header-anchor" href="#バックグラウンド処理-sidekiq" aria-label="Permalink to &quot;バックグラウンド処理（Sidekiq）&quot;">​</a></h3><p>Mastodonの多くのタスクは、HTTPリクエストを高速に処理し、HTTPリクエストのアボートがそれらのタスクの実行に影響するのを防ぐために、バックグラウンド処理に委ねられています。Sidekiqは1つのプロセスで、スレッドの数は設定可能です。</p><h4 id="スレッド数" tabindex="-1">スレッド数 <a class="header-anchor" href="#スレッド数" aria-label="Permalink to &quot;スレッド数&quot;">​</a></h4><p>ウェブプロセスのスレッド数は、エンドユーザーに対するMastodonインスタンスの応答性に影響しますが、バックグラウンド処理に割り当てられたスレッド数は、投稿を著者から他の人にどれだけ早く届けられるか、メールをどれだけ早く送信できるか、などに影響します。</p><p>この場合、スレッドの量は環境変数ではなく、Sidekiqを呼び出す際のコマンドライン引数で制御します。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sidekiq</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span></span>
<span class="line"></span></code></pre></div><p>15スレッドでsidekiqプロセスを開始します。各スレッドがデータベースに接続できる必要があることに注意してください。これは、データベースプールがすべてのスレッドをサポートするのに十分な大きさである必要があることを意味します。データベースプールのサイズは環境変数 <code>DB_POOL</code> で制御でき、少なくともスレッド数と同じである必要があります。</p><h4 id="キュー" tabindex="-1">キュー <a class="header-anchor" href="#キュー" aria-label="Permalink to &quot;キュー&quot;">​</a></h4><p>Sidekiqは、重要度の異なるタスクに対して異なるキューを使用します。重要度は、キューが動作していない場合に、サーバーのローカルユーザーのユーザー体験にどれだけ影響を与えるかによって定義され、重要度が低い順に並べられます。</p><table><thead><tr><th style="text-align:left;">Queue</th><th style="text-align:left;">Significance</th></tr></thead><tbody><tr><td style="text-align:left;"><code>default</code></td><td style="text-align:left;">ローカルユーザーに影響を与えるすべてのタスク</td></tr><tr><td style="text-align:left;"><code>push</code></td><td style="text-align:left;">他のサーバーへのペイロードの配信</td></tr><tr><td style="text-align:left;"><code>mailers</code></td><td style="text-align:left;">電子メールの配信</td></tr><tr><td style="text-align:left;"><code>pull</code></td><td style="text-align:left;">インポート、バックアップ、スレッド解決、ユーザー削除、返信転送など優先度の低いタスクの処理</td></tr><tr><td style="text-align:left;"><code>scheduler</code></td><td style="text-align:left;">トレンドのハッシュタグの更新やログのクリーンアップなどのcronジョブを実行する</td></tr><tr><td style="text-align:left;"><code>ingress</code></td><td style="text-align:left;">リモートアクティビティーの着信。デフォルトのキューよりも優先度が低いため、サーバーの負荷が高い場合でもローカルユーザーは自分の投稿を見ることができます。</td></tr></tbody></table><p>デフォルトのキューとその優先順位は <a href="https://github.com/mastodon/mastodon/blob/main/config/sidekiq.yml" target="_blank" rel="noreferrer">config/sidekiq.yml</a> に格納されていますが、Sidekiqのコマンドライン呼び出しによって上書きすることができます。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sidekiq</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default</span></span>
<span class="line"></span></code></pre></div><p>デフォルトのキューだけを実行する。</p><p>Sidekiqがキューで動作する方法は、まず最初のキューからタスクをチェックし、何もない場合は次のキューをチェックします。つまり、最初のキューが一杯になると、他のキューが遅れをとることになります。</p><p>解決策として、例えばSidekiqのために複数のsystemdサービスを異なる引数で作成することで、真に並列実行を保証するためにキューに対して異なるSidekiqプロセスを起動することが可能です。</p><p><strong>実行中の <code>scheduler</code> キューが1つだけであることを確認してください!</strong></p><h2 id="pgbouncerによるトランザクションプーリング" tabindex="-1">pgBouncerによるトランザクションプーリング <a class="header-anchor" href="#pgbouncerによるトランザクションプーリング" aria-label="Permalink to &quot;pgBouncerによるトランザクションプーリング&quot;">​</a></h2><h3 id="なぜpgbouncerが必要なのでしょうか" tabindex="-1">なぜPgBouncerが必要なのでしょうか？ <a class="header-anchor" href="#なぜpgbouncerが必要なのでしょうか" aria-label="Permalink to &quot;なぜPgBouncerが必要なのでしょうか？&quot;">​</a></h3><p>もしPostgresの接続数(デフォルトは100)が不足し始めたら、PgBouncerが良い解決策になる可能性があります。このドキュメントでは、Mastodonのデフォルトの設定と同様に、いくつかの一般的な問題点を説明します。</p><p>管理画面の &quot;PgHero &quot;で、現在使用されているPostgresの接続数を確認することができます。通常、MastodonはPuma、Sidekiq、ストリーミングAPIを合わせたスレッド数と同数の接続を使用します。</p><h3 id="pgbouncerのインストール" tabindex="-1">PgBouncerのインストール <a class="header-anchor" href="#pgbouncerのインストール" aria-label="Permalink to &quot;PgBouncerのインストール&quot;">​</a></h3><p>DebianとUbuntuの場合。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pgbouncer</span></span>
<span class="line"></span></code></pre></div><h3 id="pgbouncerの設定" tabindex="-1">PgBouncerの設定 <a class="header-anchor" href="#pgbouncerの設定" aria-label="Permalink to &quot;PgBouncerの設定&quot;">​</a></h3><h4 id="パスワードの設定" tabindex="-1">パスワードの設定 <a class="header-anchor" href="#パスワードの設定" aria-label="Permalink to &quot;パスワードの設定&quot;">​</a></h4><p>まず、Postgresのユーザ<code>mastodon</code>がパスワード無しで設定されている場合、パスワードを設定する必要があります。</p><p>以下は、パスワードの再設定方法です。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">psql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5432</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mastodon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mastodon_production</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span></span>
<span class="line"></span></code></pre></div><p>そして、（当然ながら、「パスワード」という言葉とは別のパスワードを使用します）。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">ALTER</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">USER</span><span style="color:#A6ACCD;"> mastodon </span><span style="color:#F78C6C;">WITH</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">PASSWORD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span></code></pre></div><p>その後、<code>q</code>で終了します。</p><h4 id="userlist-txtの設定" tabindex="-1">userlist.txtの設定 <a class="header-anchor" href="#userlist-txtの設定" aria-label="Permalink to &quot;userlist.txtの設定&quot;">​</a></h4><p><code>etc/pgbouncer/userlist.txt</code> を編集します。</p><p>後でpgbouncer.iniでユーザ/パスワードを指定する限り、userlist.txtの値は実際のPostgreSQLのロールに対応する必要は_ないのです。ユーザとパスワードは任意に定義できますが、簡略化のために「本当の」認証情報を再利用することができます。<code>userlist.txt</code> に <code>mastodon</code> ユーザーを追加してください。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;mastodon&quot; &quot;md5d75bb2be2d7086c6148944261a00f605&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>ここでは、md5 スキームを使用しています。md5 パスワードは、 <code>password + username</code> の md5sum に <code>md5</code> という文字列を付加しただけのものです。例えば、パスワードが <code>password</code> のユーザ <code>mastodon</code> のハッシュを導き出すには、以下のようにする。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ubuntu, debian, etc.</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">passwordmastodon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">md5sum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># macOS, openBSD, etc.</span></span>
<span class="line"><span style="color:#FFCB6B;">md5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">passwordmastodon</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>そして、その先頭に <code>md5</code> を追加するだけです。</p><p>また、PgBouncerの管理データベースにログインするために、<code>pgbouncer</code>という管理ユーザを作成します。以下は<code>userlist.txt</code>のサンプルです。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;mastodon&quot; &quot;md5d75bb2be2d7086c6148944261a00f605&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;pgbouncer&quot; &quot;md5a45753afaca0db833a6f7c7b2864b9d9&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>どちらの場合も、パスワードは単に <code>password</code> となります。</p><h4 id="pgbouncer-iniの設定" tabindex="-1">pgbouncer.iniの設定 <a class="header-anchor" href="#pgbouncer-iniの設定" aria-label="Permalink to &quot;pgbouncer.iniの設定&quot;">​</a></h4><p><code>etc/pgbouncer/pgbouncer.ini</code> を編集します。</p><p><code>[データベース]</code>の下に、接続したいPostgresデータベースを列挙した行を追加します。ここでは、PgBouncerが同じユーザ名/パスワードとデータベース名を使用して、Postgresのデータベースに接続するようにします。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[databases]</span></span>
<span class="line"><span style="color:#A6ACCD;">mastodon_production = host=127.0.0.1 port=5432 dbname=mastodon_production user=mastodon password=password</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>listen_addr</code>と<code>listen_port</code>は、PgBouncerがどのアドレス/ポートで接続を受け入れるかを指定します。デフォルトで問題ありません。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">listen_addr = 127.0.0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">listen_port = 6432</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>auth_type</code> に <code>md5</code> を指定します (<code>userlist.txt</code> で md5 形式を使用していると仮定しています)。</p><p><code>pgbouncer</code> のユーザが管理者であることを確認してください。</p><p><strong>この次の部分は非常に重要です！</strong> デフォルトのプーリングモードはセッションベースですが、Mastodonではトランザクションベースにしたいのです。つまり、Postgresの接続は、トランザクションが作成されたときに作成され、トランザクションが終了したときに切断されます。そのため、<code>pool_mode</code> を <code>session</code> から <code>transaction</code> に変更したいと思います。</p><p>次に、 <code>max_client_conn</code> はPgBouncer自身が受け入れる接続数を定義し、 <code>default_pool_size</code> はフード下で開かれるPostgres接続の数に制限をかけます。(PgHeroでは、PgBouncerの知識がないため、報告される接続の数は <code>default_pool_size</code> に対応します)。</p><p>最初はデフォルトで問題ありませんし、後でいつでも増やせます。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">max_client_conn = 100</span></span>
<span class="line"><span style="color:#A6ACCD;">default_pool_size = 20</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>変更後は、pgbouncerをリロードまたは再起動することを忘れないでください。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reload</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pgbouncer</span></span>
<span class="line"></span></code></pre></div><h4 id="すべて動作することを確認するデバッグ" tabindex="-1">すべて動作することを確認するデバッグ <a class="header-anchor" href="#すべて動作することを確認するデバッグ" aria-label="Permalink to &quot;すべて動作することを確認するデバッグ&quot;">​</a></h4><p>Postgresと同じようにPgBouncerに接続することができるはずです。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">psql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6432</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mastodon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mastodon_production</span></span>
<span class="line"></span></code></pre></div><p>そして、パスワードを使ってログインしてください。</p><p>このようにPgBouncerのログを確認することもできます。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tail</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/log/postgresql/pgbouncer.log</span></span>
<span class="line"></span></code></pre></div><h4 id="mastodonがpgbouncerと会話するための設定" tabindex="-1">MastodonがPgBouncerと会話するための設定 <a class="header-anchor" href="#mastodonがpgbouncerと会話するための設定" aria-label="Permalink to &quot;MastodonがPgBouncerと会話するための設定&quot;">​</a></h4><p>.env.production\` ファイルで、まずこの設定がされていることを確認します。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">PREPARED_STATEMENTS</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">false</span></span>
<span class="line"></span></code></pre></div><p>トランザクションベースのプーリングを使用しているので、プリペアドステートメントを使用することはできません。</p><p>次に、Mastodonがポート5432（Postgres）ではなく、6432（PgBouncer）を使用するように設定すれば、完了です。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">DB_HOST</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">localhost</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_USER</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">mastodon</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_NAME</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">mastodon_production</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_PASS</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">password</span></span>
<span class="line"><span style="color:#A6ACCD;">DB_PORT</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">6432</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>pgBouncerを使用して<code>db:migrate</code>タスクを実行することはできません。しかし、これは簡単に回避することができます。postgresとpgbouncerが同じホスト上にある場合、タスクを呼び出すときに<code>DB_PORT=5432</code>を<code>RAILS_ENV=production</code>と一緒に定義するだけで、簡単に実行できます。</p></div><h4 id="pgbouncerの管理について" tabindex="-1">PgBouncerの管理について <a class="header-anchor" href="#pgbouncerの管理について" aria-label="Permalink to &quot;PgBouncerの管理について&quot;">​</a></h4><p>一番簡単なリブートの方法は</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pgbouncer</span></span>
<span class="line"></span></code></pre></div><p>しかし、PgBouncerの管理者ユーザーを設定している場合は、管理者として接続することも可能です。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">psql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6432</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pgbouncer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pgbouncer</span></span>
<span class="line"></span></code></pre></div><p>そして、実行する。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">RELOAD;</span></span>
<span class="line"></span></code></pre></div><p>その後、終了するには <code>q</code> を使用します。</p><h2 id="キャッシュ用にredisを分離する" tabindex="-1">キャッシュ用にRedisを分離する <a class="header-anchor" href="#キャッシュ用にredisを分離する" aria-label="Permalink to &quot;キャッシュ用にRedisを分離する&quot;">​</a></h2><p>Redisはアプリケーション全体で広く使われていますが、いくつかの用途は他の用途よりも重要です。ホームフィード、リストフィード、Sidekiqキュー、そしてストリーミングAPIはRedisによってバックアップされており、それは失いたくない重要なデータです（たとえ損失が存続できるとしても、PostgreSQLデータベースの損失とは異なります - 絶対に失わないでください！）。しかし、Redisは揮発性キャッシュにも使用されます。もし、スケールアップする段階で、Redisがすべてを処理できるかどうか心配な場合は、キャッシュ用に別のRedisデータベースを使用することができます。この環境では、<code>CACHE_REDIS_URL</code> や <code>CACHE_REDIS_HOST</code>, <code>CACHE_REDIS_PORT</code> などの個々のパーツを指定することができる。指定しなかった部分は、キャッシュプレフィックスを指定しなかった場合と同じ値にフォールバックします。</p><p>Redisデータベースの設定に関しては、基本的にディスクへのバックグラウンド保存を廃止することができます。なぜなら、再起動時にデータが失われるのは問題ではなく、その分ディスクI/Oを節約することができるからです。また、最大メモリ制限やキーエビクションポリシーを追加することも可能ですが、これについてはこちらのガイドを参照してください。<a href="https://redis.io/topics/lru-cache" target="_blank" rel="noreferrer">RedisをLRUキャッシュとして使用する</a></p><h2 id="リードレプリカ" tabindex="-1">リードレプリカ <a class="header-anchor" href="#リードレプリカ" aria-label="Permalink to &quot;リードレプリカ&quot;">​</a></h2><p>Postgresqlサーバーの負荷を軽減するために、ホットストリーミングレプリケーション(リードレプリカ)を設定するとよいでしょう。<a href="https://cloud.google.com/community/tutorials/setting-up-postgres-hot-standby" target="_blank" rel="noreferrer">例としてこのガイドを参照してください</a>。マストドンでは、このような方法でレプリカを利用することができます。</p><ul><li>ストリーミングAPIサーバーは書き込みを全く行わないので、そのままレプリカに接続することができます。しかし、どうせデータベースへの問い合わせはあまりしないので、この影響はほとんどありません。</li><li>WebとsidekiqのプロセスでMakaraドライバを使用し、書き込みはマスターデータベースへ、読み込みはレプリカへ行くようにします。それについて説明しましょう。</li></ul><p><code>config/database.yml</code> ファイルを編集して、<code>production</code> セクションを以下のように置き換える必要があります。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">production</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;&lt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">*</span><span style="color:#A6ACCD;">default</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">adapter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgresql_makara</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">prepared_statements</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">makara</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgres</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">sticky</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">connections</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">blacklist_duration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgresql://db_user:db_password@db_host:db_port/db_name</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">role</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">slave</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">postgresql://db_user:db_password@db_host:db_port/db_name</span></span>
<span class="line"></span></code></pre></div><p>URLがあなたのPostgreSQLサーバーのある場所を指していることを確認してください。複数のレプリカを追加することができます。例えば、&quot;mastodon &quot;はマスターに、&quot;mastodon_replica &quot;はレプリカに接続するため、上記のファイルでは、両方のURLは同じユーザー、パスワード、ホスト、ポートで、異なるデータベース名のローカルpgBouncerを指すことになります。このように多くの可能性があります。Makaraの詳細については、<a href="https://github.com/taskrabbit/makara#databaseyml" target="_blank" rel="noreferrer">彼らのドキュメントを参照してください</a>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Sidekiqは、わずかなレプリケーションの遅れでも、キューに入れられたレコードが見つからず、ジョブが失敗してしまうため、確実にリードレプリカを使用することができません。</p></div>`,102),p=[l];function t(c,r,i,d,C,y){return n(),a("div",null,p)}const A=s(o,[["render",t]]);export{h as __pageData,A as default};
