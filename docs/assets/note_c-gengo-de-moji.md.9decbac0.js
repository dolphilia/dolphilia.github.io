import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"C言語で文字コードShift-JISをUTF8に変換する","description":"","frontmatter":{},"headers":[],"relativePath":"note/c-gengo-de-moji.md","filePath":"note/c-gengo-de-moji.md","lastUpdated":1676126774000}'),p={name:"note/c-gengo-de-moji.md"},o=l(`<h1 id="c言語で文字コードshift-jisをutf8に変換する" tabindex="-1">C言語で文字コードShift-JISをUTF8に変換する <a class="header-anchor" href="#c言語で文字コードshift-jisをutf8に変換する" aria-label="Permalink to &quot;C言語で文字コードShift-JISをUTF8に変換する&quot;">​</a></h1><p>個人的な必要があって文字コードShift-JISをUTF8に変換するC言語プログラムを書きました。この記事ではその覚え書きとしてソースコードの解説を記します。</p><nav class="table-of-contents"><ul><li><a href="#テスト環境">テスト環境</a></li><li><a href="#ソースコード全文">ソースコード全文</a></li><li><a href="#ヘッダーの解説">ヘッダーの解説</a></li><li><a href="#ファイルの読み込み">ファイルの読み込み</a></li><li><a href="#文字コードの変換">文字コードの変換</a></li><li><a href="#main関数">main関数</a></li><li><a href="#まとめ">まとめ</a></li></ul></nav><h2 id="テスト環境" tabindex="-1">テスト環境 <a class="header-anchor" href="#テスト環境" aria-label="Permalink to &quot;テスト環境&quot;">​</a></h2><ul><li>OS: macOS 12.5.1</li><li>チップ: Apple M1 Pro</li><li>コンパイラ: clang</li></ul><p>ソースコード自体の文字コードはUTF-8で作成しており、ターミナルもUTF-8環境で行なっています。変換元となるテキストファイルだけをShift-JISで作成しています。</p><h2 id="ソースコード全文" tabindex="-1">ソースコード全文 <a class="header-anchor" href="#ソースコード全文" aria-label="Permalink to &quot;ソースコード全文&quot;">​</a></h2><p>ヘッダーファイルも含めた全データについてはGitHubを参照してください。</p><p>以下はCソースの全文です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdint.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdbool.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdarg.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;table_sjis.h&quot;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;table_utf8.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, ...) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    va_list args;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">va_start</span><span style="color:#E1E4E8;">(args, str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">vprintf</span><span style="color:#E1E4E8;">(str, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">va_end</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_open_read</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> file_ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fopen</span><span style="color:#E1E4E8;">(filename, </span><span style="color:#9ECBFF;">&quot;r&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file_ptr </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ファイルオープンに失敗しました&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // ファイルオープンエラーの処理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> file_ptr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_seek_end</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> is_error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fseek</span><span style="color:#E1E4E8;">(file_ptr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, SEEK_END);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (is_error) {</span><span style="color:#6A737D;"> // ファイルサイズの取得</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fseek(fp, 0, SEEK_END)に失敗しました&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // fseek エラーの処理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_seek_set</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> is_error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fseek</span><span style="color:#E1E4E8;">(file_ptr, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">L</span><span style="color:#E1E4E8;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (is_error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fseek(fp, 0, SEEK_SET)に失敗しました&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // fseek エラーの処理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_length</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">file_seek_end</span><span style="color:#E1E4E8;">(file_ptr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ftell</span><span style="color:#E1E4E8;">(file_ptr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">file_seek_set</span><span style="color:#E1E4E8;">(file_ptr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> length;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory_alloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;">)</span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (memory </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;メモリ割り当てに失敗しました&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // メモリ割り当てエラーの処理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> memory;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_read</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> is_error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fread</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, size, file_ptr) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (is_error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ファイルの読み取りに失敗しました&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;"> // ファイル読み取りエラーの処理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    FILE </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">file_ptr;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> raw_data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_open_read</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_length</span><span style="color:#E1E4E8;">(file_ptr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    raw_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory_alloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">size);</span><span style="color:#6A737D;"> // ファイル全体を格納するメモリを割り当てる </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">file_read</span><span style="color:#E1E4E8;">(file_ptr, raw_data, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fclose</span><span style="color:#E1E4E8;">(file_ptr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> raw_data;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 1バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_1byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utf8_code;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_2byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utf8_code;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_3byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utf8_code;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp_utf8 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_utf8 </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">uint8_t</span><span style="color:#E1E4E8;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utf8_code </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">utf8_1byte_to_char</span><span style="color:#E1E4E8;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utf8_code </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">F1A0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">utf8_2byte_to_char</span><span style="color:#E1E4E8;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">utf8_3byte_to_char</span><span style="color:#E1E4E8;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search_sjis_index</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">table</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sjis_code</span><span style="color:#E1E4E8;">) {</span><span style="color:#6A737D;"> //指定したSJISコードにマッチする位置を返す</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> table_len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(table_sjis) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> table_len; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sjis_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">table_sjis</span><span style="color:#E1E4E8;">[i]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//printf(&quot;\\n%d\\n&quot;,sjis_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_utf8_from_sjis</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">table</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sjis_code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search_sjis_index</span><span style="color:#E1E4E8;">(table, sjis_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">utf8_to_char</span><span style="color:#E1E4E8;">(str, </span><span style="color:#FFAB70;">table_utf8</span><span style="color:#E1E4E8;">[index]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;"> // マッチしなかった場合は変換せずに格納する</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">utf8_to_char</span><span style="color:#E1E4E8;">(str, sjis_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_2byte_from_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[offset </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // ２バイト分流し込む</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> code </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[offset </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_sjis_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; offset </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> size; ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[offset] </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">81</span><span style="color:#E1E4E8;">) {</span><span style="color:#6A737D;"> // 1バイト目が0x81以上なら２バイト文字</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> sjis_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            sjis_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_2byte_from_raw_data</span><span style="color:#E1E4E8;">(data, offset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            offset </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print_utf8_from_sjis</span><span style="color:#E1E4E8;">(table_sjis, sjis_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;"> // 1バイト目が0x81未満なら１バイト文字</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> sjis_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            sjis_code </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">[offset];</span><span style="color:#6A737D;"> // ２バイト分流し込む</span></span>
<span class="line"><span style="color:#E1E4E8;">            offset </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">print_utf8_from_sjis</span><span style="color:#E1E4E8;">(table_sjis, sjis_code);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sjis.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print_sjis_data</span><span style="color:#E1E4E8;">(data, size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdint.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdbool.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdarg.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;table_sjis.h&quot;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;table_utf8.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, ...) {</span></span>
<span class="line"><span style="color:#24292E;">    va_list args;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">va_start</span><span style="color:#24292E;">(args, str);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">vprintf</span><span style="color:#24292E;">(str, args);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">va_end</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_open_read</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> file_ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fopen</span><span style="color:#24292E;">(filename, </span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file_ptr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ファイルオープンに失敗しました&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // ファイルオープンエラーの処理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> file_ptr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_seek_end</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> is_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fseek</span><span style="color:#24292E;">(file_ptr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, SEEK_END);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (is_error) {</span><span style="color:#6A737D;"> // ファイルサイズの取得</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fseek(fp, 0, SEEK_END)に失敗しました&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // fseek エラーの処理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_seek_set</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> is_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fseek</span><span style="color:#24292E;">(file_ptr, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">L</span><span style="color:#24292E;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (is_error) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fseek(fp, 0, SEEK_SET)に失敗しました&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // fseek エラーの処理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_length</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">file_seek_end</span><span style="color:#24292E;">(file_ptr);</span></span>
<span class="line"><span style="color:#24292E;">    length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ftell</span><span style="color:#24292E;">(file_ptr);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">file_seek_set</span><span style="color:#24292E;">(file_ptr);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> length;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory_alloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (memory </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;メモリ割り当てに失敗しました&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // メモリ割り当てエラーの処理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> memory;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_read</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> is_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fread</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, size, file_ptr) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (is_error) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ファイルの読み取りに失敗しました&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // ファイル読み取りエラーの処理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_raw_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filename</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    FILE </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">file_ptr;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> raw_data;</span></span>
<span class="line"><span style="color:#24292E;">    file_ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_open_read</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_length</span><span style="color:#24292E;">(file_ptr);</span></span>
<span class="line"><span style="color:#24292E;">    raw_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory_alloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">size);</span><span style="color:#6A737D;"> // ファイル全体を格納するメモリを割り当てる </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">file_read</span><span style="color:#24292E;">(file_ptr, raw_data, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fclose</span><span style="color:#24292E;">(file_ptr);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> raw_data;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 1バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_1byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utf8_code;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_2byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utf8_code;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">    tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3バイトのutf8コードをchar配列に格納する</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_3byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> utf8_code;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">    tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">    tmp_utf8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_utf8 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">uint8_t</span><span style="color:#24292E;">)tmp_utf8;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (utf8_code </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">utf8_1byte_to_char</span><span style="color:#24292E;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (utf8_code </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">F1A0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">utf8_2byte_to_char</span><span style="color:#24292E;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">utf8_3byte_to_char</span><span style="color:#24292E;">(str, utf8_code);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search_sjis_index</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">table</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sjis_code</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;"> //指定したSJISコードにマッチする位置を返す</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> table_len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(table_sjis) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> table_len; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sjis_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#E36209;">table_sjis</span><span style="color:#24292E;">[i]) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//printf(&quot;\\n%d\\n&quot;,sjis_code);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_utf8_from_sjis</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">table</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sjis_code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search_sjis_index</span><span style="color:#24292E;">(table, sjis_code);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">utf8_to_char</span><span style="color:#24292E;">(str, </span><span style="color:#E36209;">table_utf8</span><span style="color:#24292E;">[index]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, str);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;"> // マッチしなかった場合は変換せずに格納する</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">utf8_to_char</span><span style="color:#24292E;">(str, sjis_code);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, str);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_2byte_from_raw_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[offset </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // ２バイト分流し込む</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[offset </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_sjis_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; offset </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">[offset] </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">81</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;"> // 1バイト目が0x81以上なら２バイト文字</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> sjis_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            sjis_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_2byte_from_raw_data</span><span style="color:#24292E;">(data, offset);</span></span>
<span class="line"><span style="color:#24292E;">            offset </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print_utf8_from_sjis</span><span style="color:#24292E;">(table_sjis, sjis_code);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;"> // 1バイト目が0x81未満なら１バイト文字</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> sjis_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            sjis_code </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">[offset];</span><span style="color:#6A737D;"> // ２バイト分流し込む</span></span>
<span class="line"><span style="color:#24292E;">            offset </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">print_utf8_from_sjis</span><span style="color:#24292E;">(table_sjis, sjis_code);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_raw_data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sjis.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print_sjis_data</span><span style="color:#24292E;">(data, size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="ヘッダーの解説" tabindex="-1">ヘッダーの解説 <a class="header-anchor" href="#ヘッダーの解説" aria-label="Permalink to &quot;ヘッダーの解説&quot;">​</a></h2><p>ヘッダー部分のうち、独自のものは次の二行です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;table_sjis.h&quot;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;table_utf8.h&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;table_sjis.h&quot;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;table_utf8.h&quot;</span></span></code></pre></div><p>table_sjis.hファイルではuint32_t型の配列table_sjis[]を定義しています。table_utf8.hファイルでは同じく’uint32_t’型の配列table_utf8.hを定義しています。</p><p>それぞれの配列には文字コードが格納されており、ソースコードでは16進数として表されています。二つの配列は同一のインデックス値で表される文字コードが組になっており、同じ文字を表しています。</p><p>つまり、変換したいShift-JIS文字と同じShift-JIS配列の文字コードを検索したとき、そのインデックス値を使うことによりUTF-8配列から対応する文字コードを取得することができるということになります。</p><p>これらの配列はunicode.orgで配布されている変換テーブルを参考に作成しました。</p><h2 id="ファイルの読み込み" tabindex="-1">ファイルの読み込み <a class="header-anchor" href="#ファイルの読み込み" aria-label="Permalink to &quot;ファイルの読み込み&quot;">​</a></h2><p>以下の関数はファイル読み込みのためのものです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_open_read</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_seek_end</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_seek_set</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_length</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memory_alloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">file_read</span><span style="color:#E1E4E8;">(FILE</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">file_ptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_open_read</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filename</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_seek_end</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_seek_set</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_length</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memory_alloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">file_read</span><span style="color:#24292E;">(FILE</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">file_ptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_raw_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">filename</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">)</span></span></code></pre></div><p>get_file_raw_data()関数の第一引数で指定したファイルを開いて読み込み、第二引数で指定した変数にはファイルサイズが格納されます。そしてutf8_t*型の変数のメモリが確保され、そこにデータを格納して返します。</p><p>ソースコードでは次のように使用されています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sjis.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_raw_data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sjis.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(data);</span></span></code></pre></div><h2 id="文字コードの変換" tabindex="-1">文字コードの変換 <a class="header-anchor" href="#文字コードの変換" aria-label="Permalink to &quot;文字コードの変換&quot;">​</a></h2><p>次の関数は文字コードを変換するためのものです。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_1byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_2byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_3byte_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utf8_to_char</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">utf8_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search_sjis_index</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">table</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sjis_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_utf8_from_sjis</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint32_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">table</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sjis_code</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_2byte_from_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">offset</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_sjis_data</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_1byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_2byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_3byte_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utf8_to_char</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">utf8_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search_sjis_index</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">table</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sjis_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_utf8_from_sjis</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint32_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">table</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sjis_code</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_2byte_from_raw_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_sjis_data</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">)</span></span></code></pre></div><p>utf8_1byte_to_char関数はutf32_t型のUTF-8文字コードから1バイトだけを抽出してchar配列に格納します。2バイト目には終端文字が格納されます。</p><p>同様にutf8_2byte_to_char関数は2バイトを抽出して格納し、utf8_3byte_to_charは3バイトを抽出して格納します。</p><p>0x80以上が2バイト文字になるのでutf8_to_char関数ではそれを判別して処理を割り振ります。</p><p>search_sjis_index関数は指定したShift-JISコードと変換テーブルを比較してマッチするインデックス値を返します。</p><p>print_utf8_from_sjis関数はsearch_sjis_index関数で取得したインデックス値を元に、UTF-8テーブルから同じインデックス値の文字コードを出力します。</p><p>get_2byte_from_raw_data関数はuint8_t型の配列を処理して、指定したインデックス値から2バイトを取り出してuint32_t型に格納して返します。</p><p>print_sjis_data関数はShift-JIS文字列を処理して、1バイト文字か2バイト文字かを判別します。2バイト文字であれば、get_2byte_from_raw_data関数で2バイトを取り出し、print_utf8_from_sjis関数でUTF-8に変換して出力します。1バイト文字であれば、直接1バイトを取り出してprint_utf8_from_sjis関数で出力します。これを文字列の終端まで繰り返します。</p><h2 id="main関数" tabindex="-1">main関数 <a class="header-anchor" href="#main関数" aria-label="Permalink to &quot;main関数&quot;">​</a></h2><p>main関数は次のようになっています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> size;</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_file_raw_data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sjis.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print_sjis_data</span><span style="color:#E1E4E8;">(data, size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_file_raw_data</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sjis.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print_sjis_data</span><span style="color:#24292E;">(data, size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>get_file_raw_data関数で文字コードがShift-JISのテキストファイルを開いてuint8_t*型の戻り値を取得し、print_sjis_data関数で取得したデータをUTF-8に変換して出力します。</p><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-label="Permalink to &quot;まとめ&quot;">​</a></h2><p>プログラムの解説は以上です。</p>`,39),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const f=s(p,[["render",t]]);export{u as __pageData,f as default};
