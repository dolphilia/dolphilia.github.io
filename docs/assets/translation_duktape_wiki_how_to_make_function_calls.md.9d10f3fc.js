import{_ as t,c as o,o as u,a as r}from"./app.75bfde98.js";const h=JSON.parse('{"title":"関数呼び出しの方法","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/wiki/how_to_make_function_calls.md","lastUpdated":1676126774000}'),a={name:"translation/duktape/wiki/how_to_make_function_calls.md"},d=r('<h1 id="関数呼び出しの方法" tabindex="-1">関数呼び出しの方法 <a class="header-anchor" href="#関数呼び出しの方法" aria-hidden="true">#</a></h1><p>関数を呼び出すための API 呼び出しは、ほとんどが非常に簡単で、ターゲット関数と引数のリストが与えられます。しかし、以下の ECMAScript 固有の詳細が問題を少し複雑にしています。</p><ul><li><p>ECMAScript の関数/メソッド呼び出しには &quot;this&quot; バインディングが含まれますが、これは API 呼び出しと ECMAScript の呼び出しイディオムで異なります。もし与えられなければ、&quot;this&quot; バインディングはデフォルトで undefined になります（しかし、ターゲット関数が strict でない限り、グローバルオブジェクトに強制されます；Duktape/C 関数は常に strict です）。</p></li><li><p>コンストラクタの呼び出しは、&quot;this &quot;バインディングとその戻り値に対して特別な動作があります。this」バインディングは「デフォルト・インスタンス」に初期化され、戻り値は特別な処理を行い、デフォルト・インスタンスを置き換えることができるようになります。内部プロトタイプと外部プロトタイプを参照してください。</p></li></ul><p>C APIには、protectedとunprotectedのバリエーションがあります。その違いは、protectedの呼び出しはエラーを捕捉することです。エラーはC API呼び出しの戻り値で示され、エラーオブジェクトは値スタックに配置されます。これにより、例えばエラーのトレースバックを読むことができる。</p><p>下の表は、unprotectedコールを例にしてAPIコールをまとめたものです。</p><table><thead><tr><th>ECMAScript idiom</th><th>Duktape C API idiom</th><th>This binding</th><th>Value stack</th></tr></thead><tbody><tr><td>var result = func(&#39;foo&#39;, &#39;bar&#39;);</td><td>duk_get_global_string(ctx, &quot;func&quot;);<br>duk_push_string(ctx, &quot;foo&quot;);<br>duk_push_string(ctx, &quot;bar&quot;)<br>duk_call(ctx, 2 /nargs/);<br>/* result on stack top */</td><td>undefined</td><td>[ func &quot;foo&quot; &quot;bar&quot; ] -&gt;<br>[ result ]</td></tr><tr><td>var result = func.call(&#39;myThis&#39;, &#39;foo&#39;, &#39;bar&#39;);</td><td>duk_get_global_string(ctx, &quot;func&quot;);<br>duk_push_string(ctx, &quot;myThis&quot;);<br>duk_push_string(ctx, &quot;foo&quot;);<br>duk_push_string(ctx, &quot;bar&quot;)<br>duk_call_method(ctx, 2 /nargs/);<br>/* result on stack top */</td><td>&quot;myThis&quot;</td><td>[ func &quot;myThis&quot; &quot;foo&quot; &quot;bar&quot; ] -&gt;<br>[ result ]</td></tr><tr><td>var result = obj.func(&#39;foo&#39;, &#39;bar&#39;);</td><td>duk_push_string(ctx, &quot;func&quot;);<br>duk_push_string(ctx, &quot;foo&quot;);<br>duk_push_string(ctx, &quot;bar&quot;)<br>duk_call_prop(ctx, obj_idx, 2 /nargs);<br>/* result on stack top */</td><td>obj</td><td>[ &quot;func&quot; &quot;foo&quot; &quot;bar&quot; ] -&gt;<br>[ result ]</td></tr></tbody></table>',6),s=[d];function e(c,_,n,i,l,p){return u(),o("div",null,s)}const b=t(a,[["render",e]]);export{h as __pageData,b as default};
