import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a0f12ab5.js";const A=JSON.parse('{"title":"ブロックの拡張","description":"","frontmatter":{},"headers":[],"relativePath":"translation/honkit/plugins/blocks.md","filePath":"translation/honkit/plugins/blocks.md","lastUpdated":1676126774000}'),o={name:"translation/honkit/plugins/blocks.md"},p=l(`<h1 id="ブロックの拡張" tabindex="-1">ブロックの拡張 <a class="header-anchor" href="#ブロックの拡張" aria-label="Permalink to &quot;ブロックの拡張&quot;">​</a></h1><p>テンプレートブロックを拡張することは、作者に追加機能を提供するための最良の方法です。</p><p>最も一般的な使用法は、実行時にいくつかのタグ内のコンテンツを処理することです。これは <a href="./filters">filters</a> のようなものですが、単一の式に制限されないので、ステロイドのようなものです。</p><h3 id="新規ブロックの定義" tabindex="-1">新規ブロックの定義 <a class="header-anchor" href="#新規ブロックの定義" aria-label="Permalink to &quot;新規ブロックの定義&quot;">​</a></h3><p>ブロックはプラグインによって定義され、ブロックはブロックディスクリプタに関連付けられた名前のマップである。ブロックディスクリプタは、少なくとも <code>process</code> メソッドを含む必要があります。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">blocks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">tag1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">block</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, How are you?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>process</code>は、タグを置き換えるhtmlコンテンツを返す必要があります。this\` と HonKit API については <a href="./api">Context and APIs</a> を参照してください。</p><h3 id="ブロック引数の扱い" tabindex="-1">ブロック引数の扱い <a class="header-anchor" href="#ブロック引数の扱い" aria-label="Permalink to &quot;ブロック引数の扱い&quot;">​</a></h3><p>ブロックに引数を渡すことができる。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% tag1 &quot;argument 1&quot;, &quot;argument 2&quot;, name=&quot;Test&quot; %}</span></span>
<span class="line"><span style="color:#A6ACCD;">これがブロックの本体です。</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endtag1 %}</span></span></code></pre></div><p>そして引数は<code>process</code>メソッドで簡単にアクセスできます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">blocks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">tag1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">process</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">block</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// block.args equals [&quot;argument 1&quot;, &quot;argument 2&quot;]</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// block.kwargs equals { &quot;name&quot;: &quot;Test&quot; }</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="サブブロックの取り扱い" tabindex="-1">サブブロックの取り扱い <a class="header-anchor" href="#サブブロックの取り扱い" aria-label="Permalink to &quot;サブブロックの取り扱い&quot;">​</a></h3><p>定義されたブロックは異なるサブブロックに解析することができます。例えばソースを考えてみましょう。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{% myTag %}</span></span>
<span class="line"><span style="color:#A6ACCD;">    本体</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% subblock1 %}</span></span>
<span class="line"><span style="color:#A6ACCD;">    サブブロック本体 1</span></span>
<span class="line"><span style="color:#A6ACCD;">    {% subblock 2 %}</span></span>
<span class="line"><span style="color:#A6ACCD;">    サブブロック本体 1</span></span>
<span class="line"><span style="color:#A6ACCD;">{% endmyTag %}</span></span></code></pre></div>`,15),e=[p];function t(c,r,D,i,y,F){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{A as __pageData,u as default};
