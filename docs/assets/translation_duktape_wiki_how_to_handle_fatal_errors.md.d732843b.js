import{_ as s,c as a,o as n,a as l}from"./app.e18c80f2.js";const C=JSON.parse('{"title":"致命的なエラーの対処法","description":"","frontmatter":{},"headers":[{"level":2,"title":"エラーの種類","slug":"エラーの種類","link":"#エラーの種類","children":[]},{"level":2,"title":"致命的なエラーハンドラの例","slug":"致命的なエラーハンドラの例","link":"#致命的なエラーハンドラの例","children":[]},{"level":2,"title":"デフォルトの致命的なエラーハンドラを内蔵","slug":"デフォルトの致命的なエラーハンドラを内蔵","link":"#デフォルトの致命的なエラーハンドラを内蔵","children":[]}],"relativePath":"translation/duktape/wiki/how_to_handle_fatal_errors.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/wiki/how_to_handle_fatal_errors.md"},o=l(`<h1 id="致命的なエラーの対処法" tabindex="-1">致命的なエラーの対処法 <a class="header-anchor" href="#致命的なエラーの対処法" aria-hidden="true">#</a></h1><h2 id="エラーの種類" tabindex="-1">エラーの種類 <a class="header-anchor" href="#エラーの種類" aria-hidden="true">#</a></h2><p>Duktapeが扱うエラーは3種類あります。</p><ul><li>throw、duk_error()、duk_throw()などで発生する通常のエラー。</li><li>捕捉されないエラー、duk_fatal()の明示的な呼び出し、あるいは Duktape内部での回復不能なエラーによって引き起こされる致命的なエラー。</li><li>Duktapeのヒープやスレッドのコンテキストを持たない致命的なエラーで、 Duktape内部のアサーションに失敗した場合などに発生します。</li></ul><p>通常のエラーは、longjmpやC++の例外を使用して内部的に伝播されます（設定に依存します）。これらのエラーはECMAScriptのtry-catchやprotected C APIコールを使って捕捉されます。</p><p>捕捉されないエラーなどによる致命的なエラーは、duk_create_heap() で登録された致命的なエラーハンドラの呼び出しをトリガーします。handler 引数に NULL が指定された場合、組み込みのデフォルトの致命的エラーハンドラが代わりに使用されます。デフォルトの致命的なエラーハンドラは、DUK_USE_CPP_EXCEPTIONS 設定オプションに応じて、 abort() を呼び出すか、C++ 例外 (duk_fatal_exception) を投げるかのどちらかです。カスタムの致命的なエラーハンドラを提供することが強く推奨されます。</p><p>コンテキストがない致命的なエラーは、現在アサーション失敗に限定されていますが、コンテキストがないとヒープ関連のハンドラを検索できないので、常に組み込みのデフォルトの致命的なエラーハンドラの呼び出しをトリガーします。これらは、明示的にアサーションを有効にした場合のみ発生します。</p><h2 id="致命的なエラーハンドラの例" tabindex="-1">致命的なエラーハンドラの例 <a class="header-anchor" href="#致命的なエラーハンドラの例" aria-hidden="true">#</a></h2><p>ヒープ作成時にハンドラを登録する。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">my_udata </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">0xdeadbeef</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* 最も有用なものは、NULLである。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_create_heap</span><span style="color:#A6ACCD;">(NULL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NULL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NULL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_udata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_fatal)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"></span></code></pre></div><p>致命的なエラーハンドラは、例えば、次のようなものがある。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">static </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">my_fatal</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">udata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> const char </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">msg) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    (</span><span style="color:#89DDFF;">void</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">udata</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* この場合、サイレント警告は無視されます */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* &#39;msg&#39; は NULL でもよいことに注意すること。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fprintf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*** FATAL ERROR: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fflush</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stderr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">abort</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Duktape 1.xでは、致命的なエラーハンドラ関数にエラーコードの引数が追加されていました。</p><h2 id="デフォルトの致命的なエラーハンドラを内蔵" tabindex="-1">デフォルトの致命的なエラーハンドラを内蔵 <a class="header-anchor" href="#デフォルトの致命的なエラーハンドラを内蔵" aria-hidden="true">#</a></h2><p>組み込みのデフォルトの致命的なエラーハンドラは、基礎となるプラットフォームに関する最小限の仮定に対して最適化されています。デフォルトの動作は DUK_USE_CPP_EXCEPTIONS コンフィグオプションに依存します。</p><ul><li><p>DUK_USE_CPP_EXCEPTIONS が無効な場合 (デフォルト)、 デフォルトのハンドラはデバッグログエントリを書き (ただし stdout や stderr には何も書きません!)、 DUK_ABORT() 設定定義を通じて abort() を呼び出します (これは置き換え可能です)。abort() が返されると、ハンドラは無限ループに入り、致命的なエラーの後に実行が続かないことを確認します (これは明らかに決して起こってはいけません)。</p></li><li><p>DUK_USE_CPP_EXCEPTIONS が有効な場合: デフォルトのハンドラは、デバッグログエントリを書き (stdout や stderr には何も書きません)、duk_fatal_exception を投げます。この例外は std::runtime_error を継承しており、致命的なエラーメッセージにアクセスするための ::what() メソッドを提供します。この例外は捕捉可能ですが、捕捉した後に実行を継続することは安全ではありません。</p></li><li><p>Duktape 2.3以前では、DUK_USE_CPP_EXCEPTIONSの動作は少し異なっていました。キャッチできないエラーはduk_internal_exceptionとして伝播し、他の致命的なエラー（アサーション失敗など）はabort()を使用します。</p></li></ul><p>デフォルトの動作はほとんどの環境ではあまり有用ではないので、そうすべきです。</p><p>1.ヒープを作成するときに致命的なエラーハンドラを提供する。これは良い習慣です。なぜなら、致命的なエラー(アサーション失敗を除く)がどのように処理されるかを制御できるからです。 2.これは、明示的な致命的エラー・ハンドラを持たないDuktapeヒープや、 コンテキストなしで引き起こされる致命的エラー（アサーション・エラーのような） の致命的エラー処理を改善するものです。デフォルト・ハンドラをオーバーライドすることは、Duktapeをシステム・ ライブラリとして提供する場合に特に重要です。 Example of overriding the default fatal error handler in duk_config.h:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* stdio.h&#39; が含まれていることを確認する。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">#define </span><span style="color:#82AAFF;">DUK_USE_FATAL_HANDLER</span><span style="color:#A6ACCD;">(udata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">msg) </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">char</span><span style="color:#F07178;"> *fatal_msg </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* 二重評価を避ける */</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">        (</span><span style="color:#89DDFF;">void</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">udata</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*** FATAL ERROR: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fatal_msg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fatal_msg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fflush</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">stderr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">abort</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> \\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>また、genconfig --option-file のようにすると、ハンドラを指定することができます。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># my_fatal.yaml</span></span>
<span class="line"><span style="color:#F07178;">DUK_USE_FATAL_HANDLER</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">verbatim</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">|</span></span>
<span class="line"><span style="color:#C3E88D;">    #define DUK_USE_FATAL_HANDLER(udata,msg) do { \\</span></span>
<span class="line"><span style="color:#C3E88D;">            const char *fatal_msg = (msg); /* 二重評価を避ける */ \\</span></span>
<span class="line"><span style="color:#C3E88D;">            (void) udata; \\</span></span>
<span class="line"><span style="color:#C3E88D;">            fprintf(stderr, &quot;*** FATAL ERROR: %s\\n&quot;, fatal_msg ? fatal_msg : &quot;no message&quot;); \\</span></span>
<span class="line"><span style="color:#C3E88D;">            fflush(stderr); \\</span></span>
<span class="line"><span style="color:#C3E88D;">            abort(); \\</span></span>
<span class="line"><span style="color:#C3E88D;">        } while (0)</span></span>
<span class="line"></span></code></pre></div>`,21),e=[o];function t(c,r,y,D,F,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
