import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_pcall_prop.md","filePath":"translation/duktape/api/duk_pcall_prop.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/api/duk_pcall_prop.md"},o=p(`<h2 id="duk-pcall-prop" tabindex="-1">duk_pcall_prop() <a class="header-anchor" href="#duk-pcall-prop" aria-label="Permalink to &quot;duk_pcall_prop()&quot;">​</a></h2><p>1.0.0 protected property call</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_int_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_pcall_prop</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">obj_idx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nargs</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_int_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_pcall_prop</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">obj_idx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nargs</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | obj | ... | key arg1 | ... | argN | -&gt; | ... | obj | ... | retval | (if success, return value == 0) | ... | obj | ... | key arg1 | ... | argN | -&gt; | ... | obj | ... | err | (if failure, return value != 0)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_pcall() と同様ですが、ターゲット関数は obj.key から検索され、obj は関数の this バインディングとして使用されます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* obj.myAdderMethod(2,3) -&gt; 5 */</span></span>
<span class="line"><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> obj_idx;</span></span>
<span class="line"><span style="color:#79B8FF;">duk_int_t</span><span style="color:#E1E4E8;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;myAdderMethod&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">rc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_pcall_prop</span><span style="color:#E1E4E8;">(ctx, obj_idx, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* [ ... &quot;myAdderMethod&quot; 2 3 ] -&gt; [ ... 5 ] */</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rc </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> DUK_EXEC_SUCCESS) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2+3=</span><span style="color:#79B8FF;">%ld\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">duk_get_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* obj.myAdderMethod(2,3) -&gt; 5 */</span></span>
<span class="line"><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> obj_idx;</span></span>
<span class="line"><span style="color:#005CC5;">duk_int_t</span><span style="color:#24292E;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;myAdderMethod&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">rc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_pcall_prop</span><span style="color:#24292E;">(ctx, obj_idx, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* [ ... &quot;myAdderMethod&quot; 2 3 ] -&gt; [ ... 5 ] */</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DUK_EXEC_SUCCESS) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2+3=</span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">duk_get_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div>`,10),t=[o];function e(c,r,y,E,i,d){return a(),n("div",null,t)}const F=s(l,[["render",e]]);export{u as __pageData,F as default};
