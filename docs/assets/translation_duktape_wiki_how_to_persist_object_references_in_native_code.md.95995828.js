import{_ as s,c as a,o as n,a as l}from"./app.1650bd79.js";const C=JSON.parse('{"title":"Duktape/Cの引数をコール間で持続させる方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"永続的な参照の保存","slug":"永続的な参照の保存","link":"#永続的な参照の保存","children":[{"level":3,"title":"グローバルオブジェクト","slug":"グローバルオブジェクト","link":"#グローバルオブジェクト","children":[]},{"level":3,"title":"スタッシュオブジェクト","slug":"スタッシュオブジェクト","link":"#スタッシュオブジェクト","children":[]},{"level":3,"title":"到達可能な任意のオブジェクト","slug":"到達可能な任意のオブジェクト","link":"#到達可能な任意のオブジェクト","children":[]}]},{"level":2,"title":"単一のグローバル変数を使用した例","slug":"単一のグローバル変数を使用した例","link":"#単一のグローバル変数を使用した例","children":[]}],"relativePath":"translation/duktape/wiki/how_to_persist_object_references_in_native_code.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/wiki/how_to_persist_object_references_in_native_code.md"},o=l(`<h1 id="duktape-cの引数をコール間で持続させる方法" tabindex="-1">Duktape/Cの引数をコール間で持続させる方法 <a class="header-anchor" href="#duktape-cの引数をコール間で持続させる方法" aria-hidden="true">#</a></h1><p>Duktape/C関数が呼び出されると、Duktapeは呼び出しの引数をバリュー・スタックに配置します。引数がバリュー・スタック上にある間は、引数に到達できることが保証され、Duktape/C関数は安全に引数を操作することができます。</p><p>しかし、Duktape/C関数が戻ると、値スタックは巻き戻され、関数の値スタック・フレーム内の参照は失われてしまいます。特定の値への最後の参照が関数の値スタック・フレームにあった場合、その値は関数の戻り処理が行われる際にガベージ・コレクトされます。</p><p>Duktape/C関数では、引数値への参照を長期的に保存する必要がある場合があります。よくある例としては、setTimeout()のような関数の実装があり、ここではこれを実行例として使用します。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">called after 1 second</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>このような機能を実現するための基本的な課題は、次のとおりです。</p><ul><li>Duktape/C関数は、ガベージ・コレクションを防ぐために、永続化された値への参照をどこかに保存しておく必要があります。言い換えれば、その値はDuktapeのガベージ・コレクターから見て到達可能でなければなりません。</li><li>別のDuktape/C関数は、コールバック関数を呼び出すことができるように、その参照を参照できる必要があります。複数のコールバック関数が登録されている場合、それらの関数にルックアップ・ハンドルとして文字列や数値の識別子を割り当てる必要があります。</li></ul><h2 id="永続的な参照の保存" tabindex="-1">永続的な参照の保存 <a class="header-anchor" href="#永続的な参照の保存" aria-hidden="true">#</a></h2><h3 id="グローバルオブジェクト" tabindex="-1">グローバルオブジェクト <a class="header-anchor" href="#グローバルオブジェクト" aria-hidden="true">#</a></h3><p>もし、純粋なECMAScriptでsetTimeout()を実装するとしたら、その参照はグローバル・オブジェクトに保存されるでしょう。同じことを Duktape/C の関数で行うことができます。</p><h3 id="スタッシュオブジェクト" tabindex="-1">スタッシュオブジェクト <a class="header-anchor" href="#スタッシュオブジェクト" aria-hidden="true">#</a></h3><p>Duktapeの「スタッシュ」オブジェクトに参照を保存することができます。これらはグローバル・オブジェクトに似ていますが、ECMAScriptコードから（簡単に）到達することはできません。</p><ul><li><a href="http://duktape.org/api.html#duk_push_heap_stash" target="_blank" rel="noreferrer">http://duktape.org/api.html#duk_push_heap_stash</a></li><li><a href="http://duktape.org/api.html#duk_push_global_stash" target="_blank" rel="noreferrer">http://duktape.org/api.html#duk_push_global_stash</a></li><li><a href="http://duktape.org/api.html#duk_push_thread_stash" target="_blank" rel="noreferrer">http://duktape.org/api.html#duk_push_thread_stash</a></li></ul><h3 id="到達可能な任意のオブジェクト" tabindex="-1">到達可能な任意のオブジェクト <a class="header-anchor" href="#到達可能な任意のオブジェクト" aria-hidden="true">#</a></h3><p>到達可能なオブジェクトのプロパティとして参照を保存できます。オブジェクトは、グローバルオブジェクト、スタッシュ、現在のスレッドなどを通じて到達可能です。例えば</p><ul><li>例えば、globalObject.callbacks を空の配列に初期化し、コールバックを配列要素として管理します。コールバックIDは、直接、配列のインデックスにすることができます。</li><li>globalStash.callbacks を空のオブジェクトに初期化し、コールバックをオブジェクトの（文字列キー付きの）プロパティとして管理します。コールバックIDは、直接文字列キーにすることができます。</li></ul><h2 id="単一のグローバル変数を使用した例" tabindex="-1">単一のグローバル変数を使用した例 <a class="header-anchor" href="#単一のグローバル変数を使用した例" aria-hidden="true">#</a></h2><p>最も簡単な方法は、コールバックをグローバル変数として保存することです。ECMAScript では、単純に</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> _callbackFunc</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// シングルコールバック関数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">timeout</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">callback not a function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_callbackFunc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Later on, a scheduler would call this</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">invokeCallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_callbackFunc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">_callbackFunc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 設定されていない場合はTypeError</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>これをC言語で表現すると、次のようになる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">duk_ret_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">native_set_timeout</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> timeout</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_require_function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    timeout </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_require_uint</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_dup</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_put_global_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_callbackFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">duk_ret_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">native_invoke_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_get_global_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_callbackFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_push_null</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_put_global_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_callbackFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_call</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>実際には、コールバックの欠落を検出したり、コールバックのエラーを記録するのに便利です。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">duk_ret_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">native_invoke_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">duk_int_t</span><span style="color:#F07178;"> rc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 現在のコールバックを取得します。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_get_global_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_callbackFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* コールバックが存在するかどうかを明示的にチェックし、コールバックがない場合はログを記録して終了します。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">duk_is_function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">No callback registered</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 登録されているコールバックを削除し、再コールしないようにする。 */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_push_null</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_put_global_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_callbackFunc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* プロテクトされたコール、コールバックのエラーを記録する。 */</span></span>
<span class="line"><span style="color:#F07178;">    rc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_pcall</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">rc </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Callback failed: &#39;%s&#39;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">duk_safe_to_string</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">duk_pop</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>複数のコールバックを保持するためにコールバックデータ構造を変更したり、コールバックに番号や文字列IDを割り当てたりすることは、この基本的なパターンの簡単な拡張である。</p>`,24),e=[o];function t(c,r,F,y,D,i){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
