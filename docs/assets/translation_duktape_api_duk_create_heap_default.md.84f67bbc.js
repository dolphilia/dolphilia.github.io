import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.43c433ff.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_create_heap_default.md","filePath":"translation/duktape/api/duk_create_heap_default.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/api/duk_create_heap_default.md"},l=e(`<h2 id="duk-create-heap-default" tabindex="-1">duk_create_heap_default() <a class="header-anchor" href="#duk-create-heap-default" aria-label="Permalink to &quot;duk_create_heap_default()&quot;">​</a></h2><p>1.0.0 heap</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">duk_context </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">duk_create_heap_default</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">duk_context </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">duk_create_heap_default</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>(バリュースタックに影響なし。)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>新しいDuktapeヒープを作成し、初期コンテキスト(スレッド)を返す。ヒープの初期化に失敗した場合は、NULLを返します。現在のところ、より詳細なエラー情報を得る方法はない。</p><p>作成されたヒープには、デフォルトのメモリ管理関数と致命的なエラーハンドラ関数が使用されます。このAPIコールは、以下と同等です。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_create_heap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_create_heap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">duk_context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_create_heap_default</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctx) {</span></span>
<span class="line"><span style="color:#6A737D;">    /* success */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* ... after heap is no longer needed: */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_destroy_heap</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /* error */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">duk_context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_create_heap_default</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctx) {</span></span>
<span class="line"><span style="color:#6A737D;">    /* success */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* ... after heap is no longer needed: */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_destroy_heap</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /* error */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,12),o=[l];function t(c,r,d,i,y,E){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{_ as __pageData,u as default};
