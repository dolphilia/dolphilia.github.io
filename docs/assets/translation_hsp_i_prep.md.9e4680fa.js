import{_ as s,c as n,o as a,a as p}from"./app.1650bd79.js";const g=JSON.parse('{"title":"プリプロセッサ","description":"","frontmatter":{},"headers":[{"level":2,"title":"#define","slug":"define","link":"#define","children":[]},{"level":2,"title":"#func","slug":"func","link":"#func","children":[]},{"level":2,"title":"#cfunc","slug":"cfunc","link":"#cfunc","children":[]},{"level":2,"title":"#include","slug":"include","link":"#include","children":[]},{"level":2,"title":"#addition","slug":"addition","link":"#addition","children":[]},{"level":2,"title":"#uselib","slug":"uselib","link":"#uselib","children":[{"level":3,"title":"例","slug":"例","link":"#例","children":[]}]},{"level":2,"title":"#global","slug":"global","link":"#global","children":[]},{"level":2,"title":"#module","slug":"module","link":"#module","children":[]},{"level":2,"title":"#deffunc","slug":"deffunc","link":"#deffunc","children":[]},{"level":2,"title":"#defcfunc","slug":"defcfunc","link":"#defcfunc","children":[]},{"level":2,"title":"#pack","slug":"pack","link":"#pack","children":[]},{"level":2,"title":"#epack","slug":"epack","link":"#epack","children":[]},{"level":2,"title":"#packopt","slug":"packopt","link":"#packopt","children":[]},{"level":2,"title":"#const","slug":"const","link":"#const","children":[]},{"level":2,"title":"#undef","slug":"undef","link":"#undef","children":[]},{"level":2,"title":"#if","slug":"if","link":"#if","children":[]},{"level":2,"title":"#ifdef","slug":"ifdef","link":"#ifdef","children":[]},{"level":2,"title":"#ifndef","slug":"ifndef","link":"#ifndef","children":[]},{"level":2,"title":"#else","slug":"else","link":"#else","children":[]},{"level":2,"title":"#endif","slug":"endif","link":"#endif","children":[]},{"level":2,"title":"#modfunc","slug":"modfunc","link":"#modfunc","children":[]},{"level":2,"title":"#modcfunc","slug":"modcfunc","link":"#modcfunc","children":[]},{"level":2,"title":"#modinit","slug":"modinit","link":"#modinit","children":[]},{"level":2,"title":"#modterm","slug":"modterm","link":"#modterm","children":[]},{"level":2,"title":"#regcmd","slug":"regcmd","link":"#regcmd","children":[]},{"level":2,"title":"#cmd","slug":"cmd","link":"#cmd","children":[]},{"level":2,"title":"#usecom","slug":"usecom","link":"#usecom","children":[]},{"level":2,"title":"#comfunc","slug":"comfunc","link":"#comfunc","children":[]},{"level":2,"title":"#enum","slug":"enum","link":"#enum","children":[]},{"level":2,"title":"#runtime","slug":"runtime","link":"#runtime","children":[]},{"level":2,"title":"#cmpopt","slug":"cmpopt","link":"#cmpopt","children":[]},{"level":2,"title":"#bootopt","slug":"bootopt","link":"#bootopt","children":[]},{"level":2,"title":"#aht","slug":"aht","link":"#aht","children":[]},{"level":2,"title":"#ahtmes","slug":"ahtmes","link":"#ahtmes","children":[]}],"relativePath":"translation/hsp/i_prep.md","lastUpdated":1676126774000}'),l={name:"translation/hsp/i_prep.md"},e=p(`<h1 id="プリプロセッサ" tabindex="-1">プリプロセッサ <a class="header-anchor" href="#プリプロセッサ" aria-hidden="true">#</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li><li>Cli</li></ul><h2 id="define" tabindex="-1">#define <a class="header-anchor" href="#define" aria-hidden="true">#</a></h2><p>新規マクロを登録する</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><pre><code>#define マクロ名 マクロ定義
</code></pre><p><strong>説明</strong>:</p><p>マクロ名で指定されたキーワードを指定された定義に置き換えられるようにプリプロセッサに登録をします。 #defineマクロは、 あくまで個人がスクリプトを書きやすくカスタマイズしたい場合に使うもので、初心者向きではありません。ここで説明した機能も、頻繁に利用するものではありませんので、必要な場合にのみ参照してください。 #defineマクロは、基本的に置き換え文字列を登録します。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define hyouji mes</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji &quot;AAAAA...&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">mes &quot;AAAAA...&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>#define命令の直後に「global」を入れることで、 すべてのモジュールで永続的に利用することのできるマクロを作成することができます。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#module</span></span>
<span class="line"><span style="color:#A6ACCD;">#define global test 0x1234</span></span>
<span class="line"><span style="color:#A6ACCD;">#global</span></span>
<span class="line"><span style="color:#A6ACCD;">a=test   ; aに0x1234が代入される</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>通常は、モジュール内で#defineを定義した場合には、それ以外のモジュールおよびグローバルなエリアでは、同じ名前は認識されません。 global指定を入れることで、それ以降のすべての場所で定義した名前をマクロで置き換えることができるようになります。</p><p>単純な置き換えマクロの他に、引数付きの展開が可能です。 引数は、マクロ名の後にカッコで囲んだ%1,%2,%3…の引数名で指定を行ないま す。 引数は必ず「%数値」で指定する必要があり、 数値は１から順番に記述してください。CやC++のプリプロセッサのようにシンボル名では指定できないので注意してください。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define hyouji(%1) mes &quot;prm=&quot;+%1</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji &quot;AAAAA...&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">mes &quot;prm=&quot;+&quot;AAAAA...&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>また、引数に初期(デフォルト)値を設定することが可能です。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define hyouji(%1=&quot;PRM=&quot;,%2=123) mes %1+%2</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji &quot;AAA&quot;,a</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji &quot;BBB&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji ,b</span></span>
<span class="line"><span style="color:#A6ACCD;">	↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">mes &quot;AAA&quot;+a</span></span>
<span class="line"><span style="color:#A6ACCD;">mes &quot;BBB&quot;+123</span></span>
<span class="line"><span style="color:#A6ACCD;">mes &quot;PRM=&quot;+b</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>初期(デフォルト)値は、マクロを使用した時に省略された場合に自動的に補完される値です。初期値を省略された場合は、補完されません。 マクロ引数の指定では#defineで指定する側では、カッコで囲んでいますが、実際に使用する時にはカッコなしで指定してください。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define hyouji(%1) mes &quot;prm=&quot;+%1</span></span>
<span class="line"><span style="color:#A6ACCD;">hyouji(&quot;AAAAA...&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>のような記述はエラーになるので注意してください。 ただし、 ctypeオプションを使用することで以下のようなカッコ付き記述が可能になります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define ctype kansu(%1) %1*5+1</span></span>
<span class="line"><span style="color:#A6ACCD;">a=kansu(5)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>このオプションは、計算式など命令部分以外にマクロを使用したい時に有効です。一見、C言語などの関数のように振舞いますが、 実際にはマクロで置き換えているだけなので、応用範囲は狭いので注意してください。 この記述方法は、 本来のHSP文法とは異なるため自分のスタイルで記述したいというカスタマイズ用途以外での利用は推奨していません。</p><p>マクロの展開時に特殊な動作を行なうキーワードを設定することが可能です。 この特殊キーワードは、主にことなるマクロ間でパラメータを共有したり、入れ子構造をスタックによって実現するためのものです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define start(%1) %tstart %s1 mes &quot;START&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">#define owari %tstart mes %o</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>ここで指定されている「%s1」や「%o」などが特殊展開マクロです。 これを使ったサンプルは、以下のように展開されます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">start &quot;OK&quot; → mes &quot;START&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">owari → mes &quot;OK&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>このように、異なるマクロ間でデータを共有させることが可能になります。 特殊展開マクロは、以下の種類と機能があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   マクロ : 機能</span></span>
<span class="line"><span style="color:#A6ACCD;"> ----------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">     %t   : タグ名を設定する</span></span>
<span class="line"><span style="color:#A6ACCD;">     %n   : ユニークなラベル名を生成する</span></span>
<span class="line"><span style="color:#A6ACCD;">     %i   : ユニークなラベル名を生成してスタックに積む</span></span>
<span class="line"><span style="color:#A6ACCD;">     %o   : スタックに積まれた文字列を取り出す</span></span>
<span class="line"><span style="color:#A6ACCD;">     %p   : スタックに積まれた文字列を取り出す(スタック維持)</span></span>
<span class="line"><span style="color:#A6ACCD;">     %s   : 引数パラメーターをスタックに積む</span></span>
<span class="line"><span style="color:#A6ACCD;">     %c   : 改行を行なう</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>特殊展開マクロは、「%」に続けて英文字1文字+パラメータで表現します。 以降のキーワードと識別するために、特殊展開マクロの後には半角スペースを入れて下さい。「%tabc aaa」 のようスペースを含む部分までが特殊展開マクロと判断されます。 特殊展開マクロでは、一般的なスタック(First In Last Out)を持っています。 このスタックは、同じタグ名を持つマクロで共有させることができます。 タグ名は、「%tタグ名」のように「%t」に続けて半角英文字16字以内で指定します。先の例では「%tstart」と指定された「start」がタグ名にあたります。 「%s」は、引数パラメーターをスタックに積むための特殊展開マクロです。 「%s1」と指定すると、「%1」のパラメータをスタックに１段積みます。 スタックに積まれた文字列を取り出す場合は、「%o」を使用します。 「%o」は、スタックに積まれた文字列を取り出して展開します。スタックなので、最後に積まれたものが最初に取り出されます。 「%o0」と指定すると、 スタックを取り出しますが文字列の展開は行ないません(スタック取り出しのみ)。 スタックを戻さずに内容だけを取り出すのが 「%p」です。「%p0」は、次に取り出されるスタックの内容を展開します。「%p1」は、 もう一段深いスタックを取り出します。以降、「%p0」〜「%p9」までを指定することが可能です。 ラベル生成の例を以下に示します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define start %tstart *%i</span></span>
<span class="line"><span style="color:#A6ACCD;">#define owari %tstart await 20:stick a:if a=0  :  goto *%o</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これを使ったサンプルは、以下のように展開されます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">start → *_start_0000</span></span>
<span class="line"><span style="color:#A6ACCD;">owari → await 20:stick a:if a=0 : goto *_start_0000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>「%i」は、他と重ならないようなユニークなラベル名を生成してスタックに１段積みます。「%i0」と指定するとラベル名をスタックに１段積みますが、展開は行ないません。 また、「%n」は、ユニークなラベル名を生成して展開するだけで、スタックには積みません。 上の例では、ラベル名生成によってラベルを新しく作成して、 ループ構造を実現しています。 この方法を使えば、入れ子になってもラベル名が重なることのないループ構造を構築することができます。 また、1つのソーススクリプトファイル内ですべてのスタックが取り出されていなかったマクロ(タグ名)は、コンパイル時にエラーが報告されます。 かならず、すべてのスタックが取り出されて終わるようなマクロ命令の構成にしておいてください。</p><p>HSP ver2.6で追加された標準定義マクロの while〜wend、 do〜until、 for〜nextは特殊展開マクロによって作られています。</p><p>特殊な場面において、「%c」によって改行を挟んで展開することが可能です。 「%c」の部分で行が分割されて展開されます。主に複数のプリプロセス文に展開されるようなマクロを定義する用途などに使用することができます。 ただし、現状ですべてのプリプロセッサがマクロ展開に対応しているわけではありません。多用しすぎると、かえって見難くなることもありますので、よくご理解の上お使いください。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define def(%1,%2) #deffunc %1@ %c mes@hsp %2@</span></span>
<span class="line"><span style="color:#A6ACCD;">def test,a</span></span>
<span class="line"><span style="color:#A6ACCD;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">def test2,a</span></span>
<span class="line"><span style="color:#A6ACCD;">return</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>参照</strong>:</p><ul><li>#const</li><li>#ifdef</li><li>#ifndef</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="func" tabindex="-1">#func <a class="header-anchor" href="#func" aria-hidden="true">#</a></h2><p>外部DLL呼び出し命令登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>新規名称 &quot;関数名&quot; タイプ名1,…</p><p><strong>説明</strong>:</p><p>外部DLLを呼び出すための新しい命令を登録します。 先に#uselib命令により外部DLL名を指定しておく必要があります。 新規名称、関数名、タイプをスペースで区切って書きます。 新規名称の直前に「global」を入れることで、 すべてのモジュールで永続的に利用することのできる命令を作成することができます。</p><p>関数名は、&quot;関数名&quot;のようにダブルクォートで囲むことで、 DLLの完全なエクスポート名を記述することができます。 ダブルクォートで囲んでいない場合は、「_関数名@16」というVC++のエクスポート規約に基づいた名前に変換されます。</p><p>タイプ名には、引数の詳細を記述します。 #deffunc命令と同様に、引数の型を「,」で区切って指定してください。 引数の数や、型の順番に制限はありません。 引数の型として使用できる文字列は以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     型     :  内  容</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    int     :  整数値(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    var     :  変数のデータポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    str     :  文字列ポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    wstr    :  unicode文字列ポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sptr    :  ポインタ整数値または文字列のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    wptr    :  ポインタ整数値またはunicode文字列のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    double  :  実数値(64bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    float   :  実数値(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    pval    :  PVal構造体のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">    comobj  :  COMOBJ型変数のデータポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">(*) bmscr   :  BMSCR構造体のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">(*) prefstr :  システム変数refstrのポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">(*) pexinfo :  EXINFO構造体のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">(*) nullptr :  ヌルポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>(*)がついている項目は、 引数として指定する必要なく自動的に渡されるパラメーターを示しています。 以下は、４つの引数を指定して実行する例です。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#uselib &quot;test.dll&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">#func test &quot;_func@16&quot; var,int,int,int</span></span>
<span class="line"><span style="color:#A6ACCD;">test a,1,2,3    ; test.dllのfunc(&amp;a,1,2,3)が呼び出される</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>タイプに数値を指定した場合は、ver2.5以降のDLLタイプ指定と互換性のある引数が自動的に設定されます。ただし、いくつか互換性のない指定値があります。その場合は、コンパイル時にエラーとして報告されます。</p><p>ver2.5とは以下の点で互換性の注意が必要です。</p><ul><li>BMSCR構造体は、flagからcolorまでのフィールドのみ参照できます。</li><li>PVal構造体は、ver2.5のPVAL2構造体と互換があります。</li><li>PVal構造体のflagフィールド(型タイプ値)やlenフィールド(配列情報)をDLL側で書き換えることはできません。</li><li>PVal構造体から文字列型の配列変数にアクセスすることはできません。</li></ul><p>これ以外の点においては、HSP ver2.5と同等の情報が受け渡されます。</p><p>関数名の前に「onexit」を入れることにより、終了呼び出し関数として登録することができます。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#func test onexit &quot;_func@16&quot; str,int,int</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、アプリケーション終了時に自動的に&quot;_func@16&quot;が呼び出されます。</p><p><strong>参照</strong>:</p><ul><li>#uselib</li><li>#cfunc</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet時は、関数と同名のメソッドが呼ばれることになります。(詳細は、HSPLetマニュアルを参照してください。)</p><h2 id="cfunc" tabindex="-1">#cfunc <a class="header-anchor" href="#cfunc" aria-hidden="true">#</a></h2><p>外部DLL呼び出し関数登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>新規名称 &quot;関数名&quot; タイプ名1,…</p><p><strong>説明</strong>:</p><p>外部DLLを呼び出すための新しい関数を登録します。 先に#uselib命令により外部DLL名を指定しておく必要があります。 新規名称、関数名、タイプをスペースで区切って書きます。 新規名称の直前に「global」を入れることで、 すべてのモジュールで永続的に利用することのできる命令を作成することができます。</p><p>関数名は、&quot;関数名&quot;のようにダブルクォートで囲むことで、 DLLの完全なエクスポート名を記述することができます。 ダブルクォートで囲んでいない場合は、「_関数名@16」というVC++のエクスポート規約に基づいた名前に変換されます。</p><p>タイプ名には、引数の詳細を記述します。 引数パラメーターは、#func命令と同じものを使用することができます。 詳しくは、#funcのリファレンスを参照してください。 #cfunc命令によって登録された新規名称は、関数として式の中に記述することが可能です。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#uselib &quot;test.dll&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#cfunc test &quot;_func@16&quot; var,int,int,int</span></span>
<span class="line"><span style="color:#A6ACCD;">	res=test(a,1,2,3)  ; test.dllのfunc(&amp;a,1,2,3)が呼び出される</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>登録された関数の戻り値として外部呼出しの結果取得された整数値(32bit int)をそのまま返します。 HSP2.5互換の呼び出しでは、システム変数statに返される値を関数の戻り値とします。</p><p><strong>参照</strong>:</p><ul><li>#uselib</li><li>#func</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let <strong>対応の補足</strong>:</li></ul><p>HSPLet時は、関数と同名のメソッドが呼ばれることになります。(詳細は、HSPLetマニュアルを参照してください。)</p><h2 id="include" tabindex="-1">#include <a class="header-anchor" href="#include" aria-hidden="true">#</a></h2><p>別ファイルを結合</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;</p><p>&quot;filename&quot; : 結合するファイル名</p><p><strong>説明</strong>:</p><p>インクルードするファイルを指定します。 ここで指定されたファイルは、もとのファイルに結合してコンパイルされます。</p><p><strong>参照</strong>:</p><ul><li>#addition</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="addition" tabindex="-1">#addition <a class="header-anchor" href="#addition" aria-hidden="true">#</a></h2><p>別ファイルを結合2</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;</p><p>&quot;filename&quot; : 結合するファイル名</p><p><strong>説明</strong>:</p><p>インクルードするファイルを指定します。 ここで指定されたファイルは、もとのファイルに結合してコンパイルされます。 #include命令と同じ動作ですが、#additionはファイルが存在しない場合でも、エラーとして停止せずに続行されます。 追加の定義ファイルなどを結合する場合に使用します。</p><p><strong>参照</strong>:</p><ul><li>#include</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="uselib" tabindex="-1">#uselib <a class="header-anchor" href="#uselib" aria-hidden="true">#</a></h2><p>外部DLLの指定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot; &quot;filename&quot; : 外部DLLファイル名</p><p><strong>説明</strong>:</p><p>HSPから呼び出す外部DLLのファイル名を指定します。 DLLのファイル名は、拡張子も含めて完全に書く必要があります。 ファイル名を省略した場合は、 実行時にスクリプトからDLL名を指定してリンクを行なうことになります。</p><p><strong>参照</strong>:</p><ul><li>#func</li></ul><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	#uselib &quot;user32.dll&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#func MessageBoxA &quot;MessageBoxA&quot; int,sptr,sptr,int</span></span>
<span class="line"><span style="color:#A6ACCD;">	MessageBoxA hwnd,&quot;test message&quot;,&quot;title&quot;,0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet時は、指定された DLL と同名のクラスが読み込まれます。 読み込まれるクラス名は、末尾から .dll または .hpi を除いたものになります。 たとえば、winmm.dll を使用すると、 winmm クラスが読み込まれます。 独自の拡張ライブラリクラスを作成したときは、JAR ファイルを lib フォルダの中においてください。 コンパイラが自動的に認識してコンパイル時にチェックがつけられるようになります。</p><h2 id="global" tabindex="-1">#global <a class="header-anchor" href="#global" aria-hidden="true">#</a></h2><p>モジュールの終了</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p><strong>説明</strong>:</p><p>モジュール区間を終了し、以降を通常のプログラム領域に戻します。 モジュールについての詳細は、#module命令を参照してください。</p><p><strong>参照</strong>:</p><ul><li>#module</li><li>#deffunc</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="module" tabindex="-1">#module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h2><p>モジュールの開始</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>モジュール名 変数名1,…</p><p>モジュール名 : 新規モジュール名</p><p>変数名 : 登録するモジュール変数名</p><p><strong>説明</strong>:</p><p>#module以降の区間をモジュールとして別な空間に割り当てます。 モジュール内の変数やラベルは、モジュール外のものからは独立したものになります。</p><p>&quot;モジュール名&quot;は、複数のモジュールを名前で区分けする時につけることのできる名前で、モジュール名が同じもの同士は、変数名やラベル名を共有します。 モジュール名が違うものの間では、変数名やラベル名はまったく違うものとして扱われます。</p><p>&quot;モジュール名&quot;を省略した場合は、「m数値」という名前が自動的に割り当てられます。</p><p>モジュールは、必ず「#module」で開始を指示し、「#global」で終了しなければなりません。このようにモジュールの区間を指定することにより、その中を他から独立した空間にすることができます。 モジュール名は、18文字以内の長さで他の変数名などのキーワードと重複することはできません。 また、スペースや記号を含まない文字列を指定するようにしてください。 (モジュール名で使用できる文字種は、a〜zまでのアルファベット、0〜9までの数字、「_」記号となります。変数として使用できる文字列と同等です。)</p><p>モジュール変数名は、モジュールに関連付けられたローカルな変数を登録しておくものです。登録されたモジュール変数名は、#modfunc、または#modcfuncで定義された処理ルーチン内で使用することができるようになります。</p><p>モジュール変数についての詳細は、プログラミングマニュアル(hspprog.htm)を参照してください。</p><p><strong>参照</strong>:</p><ul><li>#global</li><li>#deffunc</li><li>#modfunc</li><li>#modcfunc</li><li>#modinit</li><li>newmod</li><li>delmod</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="deffunc" tabindex="-1">#deffunc <a class="header-anchor" href="#deffunc" aria-hidden="true">#</a></h2><p>新規命令を登録する</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2 p3,…</p><p>p1 : 割り当てられる命令の名前</p><p>p2 p3〜 : パラメータータイプ名・エイリアス名</p><p><strong>説明</strong>:</p><p>ユーザーによる新規命令を登録します。 p1に新規命令の名前を、p2以降に呼び出しパラメータタイプを指定します。 \\ #deffunc命令で定義した名前をスクリプト内で命令として使用することが可能になります。</p><p>新規命令は、#deffuncで指定された行以降が実行される内容になります。 実行は gosub命令と同じくサブルーチンジャンプとして行なわれ、return命令でもとの実行位置に戻ります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#deffunc test int a</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;パラメーター=&quot;+a</span></span>
<span class="line"><span style="color:#A6ACCD;">	return</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>追加された新規命令ではパラメータを受け取ることができるようになります。 それぞれのパラメータには、パラメータタイプとエイリアス名の指定が可能です。指定するパラメータタイプには以下のものがあります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   int     :  整数値</span></span>
<span class="line"><span style="color:#A6ACCD;">   var     :  変数(配列なし)</span></span>
<span class="line"><span style="color:#A6ACCD;">   array   :  変数(配列あり)</span></span>
<span class="line"><span style="color:#A6ACCD;">   str     :  文字列</span></span>
<span class="line"><span style="color:#A6ACCD;">   double  :  実数値</span></span>
<span class="line"><span style="color:#A6ACCD;">   label   :  ラベル</span></span>
<span class="line"><span style="color:#A6ACCD;">   local   :  ローカル変数</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>エイリアス名は、渡されたパラメーターの内容を示すもので、変数とほとんど同じ感覚で使用することができます。 varとarrayの使い分けには注意が必要なほか、 ローカル変数を示すlocalタイプは特殊な用途となります。 詳しくは、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p>特殊な用途として、パラメータータイプの替わりに「onexit」を記述することで、クリーンアップ命令として登録することができます。クリーンアップ命令は、HSPスクリプト実行の終了時に自動的に呼び出されます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例:</span></span>
<span class="line"><span style="color:#A6ACCD;">	#deffunc 名前 onexit</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>モジュールによって機能を拡張した場合などにその後始末、システムやメモリの解放などを行なうために利用することができます。</p><p>新規命令の名称は、通常すべてのモジュール空間、グローバル空間で共有されます。 ただし、local指定の後に名称を指定した場合は、モジュール固有のものとして扱われます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#module user</span></span>
<span class="line"><span style="color:#A6ACCD;">	#deffunc local test int a</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;パラメーター=&quot;+a</span></span>
<span class="line"><span style="color:#A6ACCD;">	return</span></span>
<span class="line"><span style="color:#A6ACCD;">	#global</span></span>
<span class="line"><span style="color:#A6ACCD;">	test@user 5</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これは、モジュール内でのみ使用される命令を定義する場合などに使用することができます。 local指定により登録された名称は、必ず「名称@モジュール名」の形式で呼び出す必要があります。</p><p><strong>参照</strong>:</p><ul><li>#global</li><li>#module</li><li>#modfunc</li><li>#modcfunc</li><li>#modinit</li><li>#modterm</li><li>mref</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet時、引数の型は str/int/double/var/array のみサポートされています。 local などは指定できません。</p><h2 id="defcfunc" tabindex="-1">#defcfunc <a class="header-anchor" href="#defcfunc" aria-hidden="true">#</a></h2><p>新規関数を登録する</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2 p3,…</p><p>p1 : 登録する関数の名前</p><p>p2 p3〜 : パラメータータイプ名・エイリアス名</p><p><strong>説明</strong>:</p><p>ユーザーによる新規関数を登録します。 p1に新規関数の名前を、p2以降に呼び出しパラメータタイプを指定します。 #defcfunc命令で定義した名前をスクリプト内で関数として使用することが可能になります。</p><p>新規関数は、 #defcfuncで指定された行以降が実行される内容になります。実行はgosub命令と同じくサブルーチンジャンプとして行なわれ、 return命令でもとの実行位置に戻ります。 その際にreturn命令に戻り値のパラメーターを指定する必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#defcfunc half int a</span></span>
<span class="line"><span style="color:#A6ACCD;">	return a/2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>追加された新規関数ではパラメータを受け取ることができるようになります。 それぞれのパラメータには、パラメータタイプとエイリアス名の指定が可能です。指定するパラメータタイプには以下のものがあります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   int     :  整数値</span></span>
<span class="line"><span style="color:#A6ACCD;">   var     :  変数(配列なし)</span></span>
<span class="line"><span style="color:#A6ACCD;">   array   :  変数(配列あり)</span></span>
<span class="line"><span style="color:#A6ACCD;">   str     :  文字列</span></span>
<span class="line"><span style="color:#A6ACCD;">   double  :  実数値</span></span>
<span class="line"><span style="color:#A6ACCD;">   local   :  ローカル変数</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>エイリアス名は、渡されたパラメーターの内容を示すもので、変数とほとんど同じ感覚で使用することができます。 varとarrayの使い分けには注意が必要なほか、 ローカル変数を示すlocalタイプは特殊な用途となります。 詳しくは、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p>新規関数の名称は、通常すべてのモジュール空間、グローバル空間で共有されます。 ただし、local指定の後に名称を指定した場合は、モジュール固有のものとして扱われます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#module user</span></span>
<span class="line"><span style="color:#A6ACCD;">	#defcfunc local test int a</span></span>
<span class="line"><span style="color:#A6ACCD;">	return a+5</span></span>
<span class="line"><span style="color:#A6ACCD;">	#global</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes test@user(5)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これは、モジュール内でのみ使用される関数を定義する場合などに使用することができます。 local指定により登録された名称は、必ず「名称@モジュール名」の形式で呼び出す必要があります。</p><p><strong>参照</strong>:</p><ul><li>return</li><li>#deffunc</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet時、引数の型は str/int/double/var/array のみサポートされています。 local などは指定できません。</p><h2 id="pack" tabindex="-1">#pack <a class="header-anchor" href="#pack" aria-hidden="true">#</a></h2><p>PACKFILE追加ファイル指定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;</p><p>&quot;filename&quot; : PACKFILEに追加されるファイル</p><p><strong>説明</strong>:</p><p>実行ファイル自動作成(ctrl+F9)で、 packfileに追加されるファイルを指定します。指定されたファイルは、実行ファイル作成時にリソースとして一緒にパックされます。#packは、通常の形式でパックします。 暗号化してパックしたい場合は#epackをお使い下さい。 重複したファイルを追加しようとした場合には、無視されます。 「<a href="http://start.ax" target="_blank" rel="noreferrer">start.ax</a>」は、実行ファイル自動作成の際に自動的に追加されるため特に追加ファイルとして指定する必要はありません。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#pack &quot;a.txt&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、「a.txt」というファイルを実行ファイルと一緒にパックします。 今まで通りに、「packfile編集」からパックされるファイルを選択して実行ファイルを作成することも可能です。 「実行ファイル自動作成」を行なうと、packfileが自動的に作成されるため、それまで保存されていたpackfileの情報は上書きされるので注意して下さい。</p><p><strong>参照</strong>:</p><ul><li>#epack</li><li>#packopt</li></ul><h2 id="epack" tabindex="-1">#epack <a class="header-anchor" href="#epack" aria-hidden="true">#</a></h2><p>PACKFILE暗号化ファイル指定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;</p><p>&quot;filename&quot; : PACKFILEに追加されるファイル</p><p><strong>説明</strong>:</p><p>実行ファイル自動作成(ctrl+F9)で、 packfileに追加されるファイルを指定します。指定されたファイルは、実行ファイル作成時にリソースとして一緒にパックされます。#epackは、指定ファイルを暗号化してパックします。 暗号化を行なう必要がない場合は#packをお使い下さい。 重複したファイルを追加しようとした場合には、無視されます。 「<a href="http://start.ax" target="_blank" rel="noreferrer">start.ax</a>」は、実行ファイル自動作成の際に自動的に追加されるため特に追加ファイルとして指定する必要はありません。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#epack &quot;a.bmp&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、「a.bmp」 というファイルを暗号化して実行ファイルと一緒にパックします。 今まで通りに、「packfile編集」からパックされるファイルを選択して実行ファイルを作成することも可能です。 「実行ファイル自動作成」を行なうと、packfileが自動的に作成されるため、それまで保存されていたpackfileの情報は上書きされるので注意して下さい。</p><p><strong>参照</strong>:</p><ul><li>#pack</li><li>#packopt</li></ul><h2 id="packopt" tabindex="-1">#packopt <a class="header-anchor" href="#packopt" aria-hidden="true">#</a></h2><p>自動作成オプション指定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2</p><p>p1 : キーワード</p><p>p2 : 設定内容</p><p><strong>説明</strong>:</p><p>実行ファイル自動作成の動作を指定します。 キーワード名、の後スペース又は TAB を入れてパラメーター(文字列の場合は「&quot;strings&quot;」のように指定)を記述して下さい。 #packoptで指定できるキーワードは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  キーワード |      内      容        | 初期値</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">  name       | 実行ファイル名         | &quot;hsptmp&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  runtime    | 使用するランタイム     | &quot;hsprt&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  type       | 実行ファイルのタイプ   | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=EXEファイル)        |</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (1=フルスクリーンEXE)  |</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (2=スクリーンセーバー) |</span></span>
<span class="line"><span style="color:#A6ACCD;">  xsize      | 初期ウィンドウXサイズ  | 640</span></span>
<span class="line"><span style="color:#A6ACCD;">  ysize      | 初期ウィンドウYサイズ  | 480</span></span>
<span class="line"><span style="color:#A6ACCD;">  hide       | 初期ウィンドウ非表示SW | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">  orgpath    | 初期ディレクトリ維持SW | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">  icon       | アイコンファイル設定   | なし</span></span>
<span class="line"><span style="color:#A6ACCD;">  version    | バージョンリソース設定 | なし</span></span>
<span class="line"><span style="color:#A6ACCD;">  manifest   | マニフェスト設定       | なし</span></span>
<span class="line"><span style="color:#A6ACCD;">  lang       | 言語コード設定         | なし</span></span>
<span class="line"><span style="color:#A6ACCD;">  upx        | UPX圧縮設定            | なし</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以下の例では、 「test.scr」というスクリーンセーバーを「hsp2c.hrt」というランタイムを使用して作成します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt type 2</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt name &quot;test&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt runtime &quot;hsp2c.hrt&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>「実行ファイル自動作成」を行なうと、編集中のスクリプトに記述されている#pack,#epack,#packoptの情報を元に、実行ファイルが生成されます。 その際に、「<a href="http://start.ax" target="_blank" rel="noreferrer">start.ax</a>」はデフォルトで暗号化されたものが追加されます。 「#packopt runtime &quot;ランタイムファイル名&quot;」で指定されたランタイムファイル(拡張子がhrtのもの)は、 hspcmp.dllと同じディレクトリか、または、runtimeディレクトリに置かれているものが使用されます。 icon,version,manifest,lang,upxのキーワードは、実行ファイル生成後にiconinsツールを使用して設定されます。 アイコンファイルは、.ico形式のファイルを指定する必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	// 埋め込むアイコンファイルを指定</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt icon &quot;test.ico&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	// 埋め込むバージョン情報を記述したファイルを指定</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt version &quot;test.txt&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	// UPXを使用し圧縮する場合&quot;1&quot;を設定する</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt upx &quot;1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	// 言語を指定 デフォルトは日本語 (1041)10進数で記述</span></span>
<span class="line"><span style="color:#A6ACCD;">	#packopt lang &quot;1041&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>UPX圧縮を使用する場合は、upx.exe(Win32 console version)をあらかじめダウンロードしてiconinsツールと同じフォルダに配置する必要があります。</p><p><strong>参照</strong>:</p><ul><li>#pack</li><li>#epack</li><li>#cmpopt</li></ul><h2 id="const" tabindex="-1">#const <a class="header-anchor" href="#const" aria-hidden="true">#</a></h2><p>マクロ名の定数定義</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>マクロ名 定数式</p><p><strong>説明</strong>:</p><p>指定されたマクロ名に置換え数値を設定します。 #defineと同様ですが、 #constは定数(数値)の置き換えを行なう場合にあらかじめ計算を行なった結果を置き換えます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#const KAZU 100+50</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=KAZU</span></span>
<span class="line"><span style="color:#A6ACCD;">		↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=150</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>あらかじめソース内で使用する値が確定している場合、ソースの高速化に有効です。すでに定義されているマクロを含めることも可能なので、</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#const ALL 50</span></span>
<span class="line"><span style="color:#A6ACCD;">	#const KAZU 100*ALL</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=KAZU</span></span>
<span class="line"><span style="color:#A6ACCD;">		↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=5000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>のように使用することができます。 計算式は、整数及び実数を使用することができます。 演算子および数値の記述スタイルは、通常の式と同様のものが使えます。カッコによる順位の指定も可能です。</p><p>#const命令の直後に「global」を入れることで、すべてのモジュールで永続的に利用することのできるマクロを作成することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#module</span></span>
<span class="line"><span style="color:#A6ACCD;">	#const global test 1234</span></span>
<span class="line"><span style="color:#A6ACCD;">	#global</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=test   ; aに1234が代入される</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>通常は、モジュール内で#constを定義した場合には、それ以外のモジュールおよびグローバルなエリアでは、同じ名前は認識されません。 global指定を入れることで、それ以降のすべての場所で定義した名前をマクロで置き換えることができるようになります。</p><p>#const命令の直後に「double」を入れることで、 定義されている数値が強制的に実数と認識されます。 この指定を行なわなかった場合には、小数点以下の値があるかどうかによって、整数と実数が自動的に判別されます。</p><p><strong>参照</strong>:</p><ul><li>#define</li></ul><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="undef" tabindex="-1">#undef <a class="header-anchor" href="#undef" aria-hidden="true">#</a></h2><p>マクロ名の取り消し</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>マクロ名</p><p><strong>説明</strong>:</p><p>すでに登録されているマクロ名を取り消します。 登録されていないマクロ名に対して指定してもエラーにはならず無視されます。</p><p><strong>参照</strong>:</p><p>#define</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="if" tabindex="-1">#if <a class="header-anchor" href="#if" aria-hidden="true">#</a></h2><p>数値からコンパイル制御</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>数値式</p><p><strong>説明</strong>:</p><p>コンパイルのON/OFFを指定します。 #ifは指定した数値が 0ならば以降のコンパイル出力をOFFにしてコンパイル結果を無視します(プログラムとして実行されません)。 数値が0以外の場合は、出力がONとなります。 このコンパイル制御は、#endifが出るまでの区間を対象にします。 #if、#ifdef、#ifndefのいずれかには、#endifがペアで存在している必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#if 0</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;ABC&quot;       ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=111           ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;DEF&quot;       ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	#endif</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>#ifの指定には式を使うことも可能なので、</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define VER 5</span></span>
<span class="line"><span style="color:#A6ACCD;">	#if VER&lt;3</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;ABC&quot;       ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=111           ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;DEF&quot;       ; この部分は無視されます</span></span>
<span class="line"><span style="color:#A6ACCD;">	#endif</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>のような使い方もできます。計算式の記述および演算子の注意点などは、#const命令と同様です。 また、#if〜#endifのプロックを入れ子にすることも可能です。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#ifdef SW</span></span>
<span class="line"><span style="color:#A6ACCD;">		#ifdef SW2</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;AAA&quot;       ; SWとSW2が定義されている場合</span></span>
<span class="line"><span style="color:#A6ACCD;">		#else</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;BBB&quot;       ; SWが定義されている場合</span></span>
<span class="line"><span style="color:#A6ACCD;">		#endif</span></span>
<span class="line"><span style="color:#A6ACCD;">	#endif</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>基本的にCやC++のプリプロセッサに近い使い方ができるようになっています。 プリプロセッサは、通常のコンパイルで自動的に適用されます。</p><p><strong>参照</strong>:</p><p>#else #endif #ifdef #ifndef #define #const</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="ifdef" tabindex="-1">#ifdef <a class="header-anchor" href="#ifdef" aria-hidden="true">#</a></h2><p>マクロ定義からコンパイル制御</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>マクロ名</p><p><strong>説明</strong>:</p><p>コンパイルのON/OFFを指定します。 #ifdefは指定したマクロが定義されていなければ以降のコンパイル出力をOFFにしてコンパイル結果を無視します。定義されている場合は、出力がONとなります。このコンパイル制御は、#endifが出るまでの区間を対象にします。 コンパイル制御についての詳細は、 #if命令のリファレンスを参照してください。</p><p><strong>参照</strong>:</p><p>#if #ifndef #else #endif</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="ifndef" tabindex="-1">#ifndef <a class="header-anchor" href="#ifndef" aria-hidden="true">#</a></h2><p>マクロ定義からコンパイル制御2</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>マクロ名</p><p><strong>説明</strong>:</p><p>コンパイルのON/OFFを指定します。 #ifndefは指定したマクロが定義されていれば以降のコンパイル出力をOFFにしてコンパイル結果を無視します。定義されていない場合は、出力がONとなります。このコンパイル制御は、#endifが出るまでの区間を対象にします。 コンパイル制御についての詳細は、 #if命令のリファレンスを参照してください。</p><p><strong>参照</strong>:</p><p>#if #ifdef #else #endif</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="else" tabindex="-1">#else <a class="header-anchor" href="#else" aria-hidden="true">#</a></h2><p>コンパイル制御を反転</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>説明</strong>:</p><p>#if、#ifdef、#ifndefなどのコンパイル制御区間内で、ON/OFFを反転します。 コンパイル制御についての詳細は、 #if命令のリファレンスを参照してください。</p><p><strong>参照</strong>:</p><p>#if #ifdef #ifndef #endif</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="endif" tabindex="-1">#endif <a class="header-anchor" href="#endif" aria-hidden="true">#</a></h2><p>コンパイル制御ブロック終了</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>説明</strong>:</p><p>#if、#ifdef、#ifndefなどのコンパイル制御区間を終了します。 コンパイル制御についての詳細は、 #if命令のリファレンスを参照してください。</p><p><strong>参照</strong>:</p><p>#if #ifdef #ifndef #else</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="modfunc" tabindex="-1">#modfunc <a class="header-anchor" href="#modfunc" aria-hidden="true">#</a></h2><p>新規命令を割り当てる</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2 p3,…</p><p>p1 : 割り当てられる命令の名前</p><p>p2 p3〜 : パラメータータイプ名・エイリアス名</p><p><strong>説明</strong>:</p><p>モジュール変数を処理するための新規命令を登録します。 p1に新規命令の名前を、p2以降に呼び出しパラメータタイプを指定します。 命令を定義した位置より以降は、指定された名前を命令語として使用することが可能です。 また、#modfuncのルーチン内では、システム変数thismodを、 自分自身のモジュール変数として扱うことができます。</p><p>#modfunc命令のパラメーターは、#deffunc命令と同じ形式になります。 #deffunc命令との違いは、呼び出しの際にモジュール型の変数を指定する必要がある点です。モジュール変数の詳細については、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p><strong>参照</strong>:</p><p>#modcfunc #deffunc #modinit #modterm thismod</p><h2 id="modcfunc" tabindex="-1">#modcfunc <a class="header-anchor" href="#modcfunc" aria-hidden="true">#</a></h2><p>新規関数を割り当てる</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2 p3,…</p><p>p1 : 割り当てられる命令の名前</p><p>p2 p3〜 : パラメータータイプ名・エイリアス名</p><p><strong>説明</strong>:</p><p>モジュール変数を処理するための新規関数を登録します。 p1に新規命令の名前を、p2以降に呼び出しパラメータタイプを指定します。 命令を定義した位置より以降は、指定された名前を命令語として使用することが可能です。 また、#modcfuncのルーチン内では、システム変数thismodを、 自分自身のモジュール変数として扱うことができます。</p><p>#modcfunc命令のパラメーターは、#defcfunc命令と同じ形式になります。 #defcfunc命令との違いは、呼び出しの際にモジュール型の変数を指定する必要がある点です。モジュール変数の詳細については、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p><strong>参照</strong>:</p><p>#modfunc #deffunc #modinit #modterm thismod</p><h2 id="modinit" tabindex="-1">#modinit <a class="header-anchor" href="#modinit" aria-hidden="true">#</a></h2><p>モジュール初期化処理の登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1 p2,… p1 p2〜 : パラメータータイプ名・エイリアス名</p><p><strong>説明</strong>:</p><p>モジュール変数を初期化するための処理(コンストラクタ)を登録します。 オプションとして呼び出しパラメータタイプ、エイリアス名を指定することができます。 #modinitで定義した区間は、newmod命令実行時に自動的に呼び出されるようになります。 また、newmod命令で指定されたオプションパラメーターを、コンストラクタ側で取得することが可能です。 モジュール変数の詳細については、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p>#modinit命令のパラメータータイプ、エイリアス名は、#deffunc命令と同じ形式になります。</p><p><strong>参照</strong>:</p><p>#deffunc #modfunc #modterm newmod</p><h2 id="modterm" tabindex="-1">#modterm <a class="header-anchor" href="#modterm" aria-hidden="true">#</a></h2><p>モジュール解放処理の登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p><strong>説明</strong>:</p><p>モジュール変数を破棄するための処理(デストラクタ)を登録します。 オプションとして呼び出しパラメータタイプ、エイリアス名を指定することができます。 #modtermで定義した区間は、delmod命令実行時かモジュール変数が破棄された時、自動的に呼び出されます。 モジュール変数の詳細については、プログラミングマニュアル(hspprog.htm)のモジュール項目を参照してください。</p><p><strong>参照</strong>:</p><p>#deffunc #modfunc #modinit delmod</p><h2 id="regcmd" tabindex="-1">#regcmd <a class="header-anchor" href="#regcmd" aria-hidden="true">#</a></h2><p>拡張プラグインの登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;初期化関数名&quot;,&quot;DLLファイル名&quot;,変数型拡張数</p><p>&quot;初期化関数名&quot; : プラグイン初期化関数のエクスポート名</p><p>&quot;DLLファイル名&quot; : プラグイン初期化関数のDLL名</p><p>変数型拡張数(0) : プラグインで拡張される変数型の数</p><p><strong>説明</strong>:</p><p>HSP拡張プラグインの登録を行ないます。 初期化関数名は、 DLLからエクスポートされた名前を正確に指定しなければなりません。VC++からエクスポートした場合には、先頭に「_」が、最後に「@4」が付加されるので、それを含めた名前を記述します。(VC++以外のコンパイラで作成されたDLLの場合は、エクスポート名のルールが異なります。詳しくは、それぞれの環境の資料を参照してください。) たとえば、「hpi3sample.dll」の「hsp3cmdinit」 という関数を登録する場合は、</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#regcmd &quot;_hsp3cmdinit@4&quot;,&quot;hpi3sample.dll&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>のようになります。 変数型をプラグインにより拡張する場合には、「変数型拡張数」を指定する必要があります。 変数型を１種類追加する場合は、変数型拡張数に１を指定してください。変数型を拡張しない場合は、変数型拡張数は省略するか０を指定してください。変数型拡張数が正しく指定されないと、型の登録は無効になるので注意してください。</p><p>最初のパラメーターに整数を指定した場合は、以降の#cmdで定義されるキーワードに内部コマンドとして実行されるtype値を割り当てます。 type値は、HSP3内部で使用される固有の値です。通常は、この機能を使用する必要はありません。また、整数ではなく「*」を指定した場合は、空いているtype値が自動的に割り当てられます。</p><p><strong>参照</strong>:</p><p>#cmd #uselib #func</p><h2 id="cmd" tabindex="-1">#cmd <a class="header-anchor" href="#cmd" aria-hidden="true">#</a></h2><p>拡張キーワードの登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>新規キーワード サブID</p><p>新規キーワード : 追加されるキーワード</p><p>サブID : キーワードの与えられるサブID値</p><p><strong>説明</strong>:</p><p>HSP拡張プラグインのためにキーワードの登録を行ないます。 あらかじめ、 #regcmd命令によってプラグイン初期化関数の登録を行なっておく必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#cmd newcmd $000</span></span>
<span class="line"><span style="color:#A6ACCD;">	#cmd newcmd2 $001</span></span>
<span class="line"><span style="color:#A6ACCD;">	#cmd newcmd3 $002</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、「newcmd」というキーワードがサブID0として、「newcmd2」というキーワードがサブID1、 「newcmd3」というキーワードがサブID2として登録されます。</p><p><strong>参照</strong>:</p><p>#regcmd #uselib #func</p><h2 id="usecom" tabindex="-1">#usecom <a class="header-anchor" href="#usecom" aria-hidden="true">#</a></h2><p>外部COMインターフェースの指定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>インターフェース名 &quot;インターフェースIID&quot; &quot;クラスIID&quot;</p><p>インターフェース名 : インターフェースを識別するキーワード</p><p>&quot;インターフェースIID&quot; : COMのインターフェースを示すIID文字列</p><p>&quot;クラスIID&quot; : COMのクラスを示すIID文字列</p><p><strong>説明</strong>:</p><p>外部コンポーネント(COM)定義を行ないます。 指定したインターフェース名に、クラスIID、インターフェースIIDを割り当てて使用可能な状態にします。 IIDは、レジストリと同様の文字列({〜})で指定することができます。 また、&quot;クラスIID&quot;は省略することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define CLSID_ShellLink &quot;{00021401-0000-0000-C000-000000000046}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define IID_IShellLinkA &quot;{000214EE-0000-0000-C000-000000000046}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#usecom IShellLinkA IID_IShellLinkA CLSID_ShellLink</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>インターフェース名の直前に「global」を入れることで、 すべてのモジュールで永続的に利用することのできるインターフェースを作成することができます。</p><p><strong>参照</strong>:</p><p>#comfunc newcom delcom querycom</p><h2 id="comfunc" tabindex="-1">#comfunc <a class="header-anchor" href="#comfunc" aria-hidden="true">#</a></h2><p>外部COM呼び出し命令登録</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>新規名称 インデックス タイプ名1,…</p><p>新規名称 : 命令として認識されるキーワード名</p><p>インデックス : メソッドindex値</p><p>タイプ名 : 引数のタイプを,で区切って指定します</p><p><strong>説明</strong>:</p><p>外部コンポーネント(COM)を呼び出すための新しい命令を登録します。 #comfuncは、 #usecom命令によって指定されたインターフェースのメソッドを命令として呼び出すための登録を行ないます。 以降は、 新規名称で指定された命令とCOMオブジェクト型の変数を組み合わせてコンポーネントを呼び出すことができます。</p><p>新規名称、インデックス、タイプをスペースで区切って書きます。 新規名称の直前に「global」を入れることで、 すべてのモジュールで永続的に利用することのできる命令を作成することができます。</p><p>タイプ名には、引数の詳細を記述します。 #deffunc命令と同様に、引数の型を「,」で区切って指定してください。 引数の数や、型の順番に制限はありません。 引数の型として使用できる文字列は以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">   型      :  内     容</span></span>
<span class="line"><span style="color:#A6ACCD;"> -------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">   int     :  整数値(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   var     :  変数のデータポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   str     :  文字列ポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   wstr    :  unicode文字列ポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   double  :  実数値(64bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   float   :  実数値(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   pval    :  PVal構造体のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   bmscr   :  (*)BMSCR構造体のポインタ(32bit)</span></span>
<span class="line"><span style="color:#A6ACCD;">   hwnd    :  (*)現在選択されているウィンドウのハンドル(HWND)</span></span>
<span class="line"><span style="color:#A6ACCD;">   hdc     :  (*)現在選択されているウィンドウのデバイスコンテキスト(HDC)</span></span>
<span class="line"><span style="color:#A6ACCD;">   hinst   :  (*)実行中のHSPインスタンスハンドル</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>(*)がついている項目は、 引数として指定する必要なく自動的に渡されるパラメーターを示しています。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	; シェルリンクオブジェクトのクラスID</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define CLSID_ShellLink &quot;{00021401-0000-0000-C000-000000000046}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	; IShellLink インターフェースのインターフェースID</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define IID_IShellLinkA &quot;{000214EE-0000-0000-C000-000000000046}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	#usecom IShellLinkA IID_IShellLinkA CLSID_ShellLink</span></span>
<span class="line"><span style="color:#A6ACCD;">	#comfunc IShellLink_SetPath 20 str</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	newcom slink, IShellLinkA</span></span>
<span class="line"><span style="color:#A6ACCD;">	IShellLink_SetPath slink, &quot;c:\\\\hsp261\\\\hsp2.exe&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、IShellLinkAインターフェースのIShellLink_SetPathをslinkという変数とともに呼び出しています。 #comfuncで登録された命令は、最初の引数が常に同じインターフェースを持つCOMオブジェクト型の変数になるので注意してください。</p><p><strong>参照</strong>:</p><p>#usecom newcom delcom querycom</p><h2 id="enum" tabindex="-1">#enum <a class="header-anchor" href="#enum" aria-hidden="true">#</a></h2><p>マクロ名の定数を列挙</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>マクロ名 = p1</p><p>マクロ名 : 定数を割り当てるマクロ名</p><p>p1 : 割り当てられる定数</p><p><strong>説明</strong>:</p><p>指定されたマクロ名に連続した値を割り当てます。 #const命令と同様に、定数を示すマクロ名を定義することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#enum KAZU_A = 0	; KAZU_Aは0になる</span></span>
<span class="line"><span style="color:#A6ACCD;">	#enum KAZU_B		; KAZU_Bは1になる</span></span>
<span class="line"><span style="color:#A6ACCD;">	#enum KAZU_C		; KAZU_Cは2になる</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=KAZU_B</span></span>
<span class="line"><span style="color:#A6ACCD;">		↓(展開後)</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>マクロ名に続いて「=(イコール)」と数値(または式)を書くことで、 定数が初期化されます。 以降は、#enum命令で定義するたびに数値が１づつ増えていきます。 #enum命令は、連続した値をマクロによって定義したい場合に使用します。 #const命令により、数値をいちいち指定する必要がなく、後から追加や削除が容易になります。</p><p><strong>参照</strong>:</p><p>#const</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="runtime" tabindex="-1">#runtime <a class="header-anchor" href="#runtime" aria-hidden="true">#</a></h2><p>ランタイムファイルの設定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>&quot;ランタイム名&quot;</p><p>&quot;ランタイム名&quot; : 設定するランタイム名</p><p><strong>説明</strong>:</p><p>スクリプトの実行に使用されるランタイムファイル名を設定します。 (ランタイムファイル名は、 拡張子の除いたファイルの名前部分を指定します。) スクリプトエディタからの実行時や実行ファイル作成時のランタイムを設定する場合に使用します。 #runtime命令が複数設定された場合は、最後に設定された内容が有効になります。</p><p><strong>参照</strong>:</p><p>#packopt #cmpopt</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet使用時は、&quot;hsplet3&quot;をランタイム名に指定してください。</p><h2 id="cmpopt" tabindex="-1">#cmpopt <a class="header-anchor" href="#cmpopt" aria-hidden="true">#</a></h2><p>コンパイル時の設定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>オプション名 パラメーター</p><p>オプション名 : オプションの種類</p><p>パラメーター : 設定するパラメーター</p><p><strong>説明</strong>:</p><p>スクリプトコンパイル時の動作を指定します。 オプション名、の後スペース又は TAB を入れてパラメーター (文字列の場合は「&quot;strings&quot;」のように指定)を記述して下さい。 #cmpoptで指定できるキーワードは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  オプション |      内      容            | 初期値</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">  ppout      | プリプロセッサファイル出力 | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=なし/1=出力する)        |</span></span>
<span class="line"><span style="color:#A6ACCD;">  optcode    | 不要なコードの最適化       | 1</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=なし/1=最適化する)      |</span></span>
<span class="line"><span style="color:#A6ACCD;">  optinfo    | 最適化の情報ログ出力       | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=なし/1=出力する)        |</span></span>
<span class="line"><span style="color:#A6ACCD;">  varname    | デバッグ時以外での         | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | 変数名情報の出力           |</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=なし/1=あり)            |</span></span>
<span class="line"><span style="color:#A6ACCD;">  varinit    | 未初期化変数のチェック     | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=警告/1=エラー)          |</span></span>
<span class="line"><span style="color:#A6ACCD;">  optprm     | パラメーターコードの最適化 | 1</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=なし/1=最適化する)      |</span></span>
<span class="line"><span style="color:#A6ACCD;">  skipjpspc  | 全角スペースの無視         | 1</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=エラー/1=無視する)      |</span></span>
<span class="line"><span style="color:#A6ACCD;">  utf8       | 文字列をUTF-8形式で出力    | 0</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=無効/1=有効)            |</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以下の例では、プリプロセッサ結果をファイル出力します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#cmpopt ppout 1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>#cmpopt命令は、基本的にスクリプトの先頭に記述してください。 複数の#cmpopt命令が記述されている場合は、それぞれのオプションにおいて最後の設定が有効になります。(#packoptオプションと同様です) また、特定の範囲だけにオプションを適用するような書き方はできません。</p><p><strong>参照</strong>:</p><p>#packopt #runtime</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="bootopt" tabindex="-1">#bootopt <a class="header-anchor" href="#bootopt" aria-hidden="true">#</a></h2><p>ランタイム起動時の設定</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>オプション名 パラメーター</p><p>オプション名 : オプションの種類</p><p>パラメーター : 設定するパラメーター</p><p><strong>説明</strong>:</p><p>スクリプトランタイムの細かい動作設定を行ないます。 オプション名、の後スペース又は TAB を入れて設定スイッチ 1か0の数値を記述して下さい。 #bootoptは、スクリプト内の任意の位置に記述することが可能です。 複数の指定があった場合は、最後に設定されたものが全体の設定となります。</p><p>#bootoptで指定できるキーワードは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  オプション |      内      容                | 初期値</span></span>
<span class="line"><span style="color:#A6ACCD;"> -----------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">  notimer    | 高精度タイマーの使用           | 自動設定</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=使用する/1=使用しない)      |</span></span>
<span class="line"><span style="color:#A6ACCD;">  utf8       | UTF-8形式文字列の使用          | 自動設定</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=使用する/1=使用しない)      |</span></span>
<span class="line"><span style="color:#A6ACCD;">  hsp64      | 64ビットランタイムの使用       | 自動設定</span></span>
<span class="line"><span style="color:#A6ACCD;">             | (0=使用する/1=使用しない)      |</span></span>
<span class="line"><span style="color:#A6ACCD;"> -----------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以下の例では、高精度タイマーの使用を抑制します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#bootopt notimer 1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>参照</strong>:</p><p>#cmpopt #runtime</p><h2 id="aht" tabindex="-1">#aht <a class="header-anchor" href="#aht" aria-hidden="true">#</a></h2><p>AHTファイルヘッダを記述</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>設定名 p1</p><p>設定名 : 定数を割り当てる設定項目の名前</p><p>p1 : 割り当てられる定数</p><p><strong>説明</strong>:</p><p>ソーススクリプトにAHTファイルの情報を付加します。 指定された設定名に文字列または数値を割り当てることができます。 #aht命令により、AHTファイルヘッダが付加されたソーススクリプトは、AHTファイルとして、テンプレートマネージャー等から参照することが可能になります。 設定名として使用できる</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  設定名     |      内      容</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">  class      | AHTファイルのクラス名を指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  name       | AHTファイルの名称を指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  author     | AHTファイルの作者名を指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  ver        | AHTファイルのバージョンを指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  exp        | AHTファイルについての説明を指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  icon       | AHTファイル固有のアイコンファイルを指定します</span></span>
<span class="line"><span style="color:#A6ACCD;">  iconid     | AHTファイル固有のアイコンIDを指定します</span></span>
<span class="line"><span style="color:#A6ACCD;"> ------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>AHTファイルについての詳細は、ドキュメント「Additional HSP Template &amp; Tools」(aht.txt)を参照してください。</p><p><strong>参照</strong>:</p><p>#ahtmes</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="ahtmes" tabindex="-1">#ahtmes <a class="header-anchor" href="#ahtmes" aria-hidden="true">#</a></h2><p>AHTメッセージの出力</p><p><strong>グループ</strong>:</p><p>プリプロセッサ命令</p><p><strong>パラメーター</strong>:</p><p>p1</p><p>p1 : 出力される文字列式</p><p><strong>説明</strong>:</p><p>AHTパース時に、外部へのメッセージ出力を行ないます。 主に、「かんたん入力」でエディタ上に追加されるソースコードを記述するために使用しています。 #ahtmes命令は、mes命令と同様に文字列やマクロを「+」演算子で接続させて出力することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	#define 代入する変数	a	;;str</span></span>
<span class="line"><span style="color:#A6ACCD;">	#const 乱数の範囲 100		;;help=&quot;0から指定範囲-1まで発生します&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	#ahtmes	&quot;	&quot;+代入する変数+&quot; = rnd( &quot;+乱数の範囲+&quot; )\\t\\t; 変数 &quot;+代入する変数+&quot; に乱数を代入します。&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>通常のmes命令と異なり、あくまでもプリプロセッサ上で定義されているマクロを接続するという点に注意してください。 AHTファイルについての詳細は、ドキュメント「Additional HSP Template &amp; Tools」(aht.txt)を参照してください。</p><p><strong>参照</strong>:</p><p>#aht</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul>`,559),t=[e];function o(c,i,r,C,d,A){return a(),n("div",null,t)}const h=s(l,[["render",o]]);export{g as __pageData,h as default};
