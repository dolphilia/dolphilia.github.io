import{_ as s,o as a,c as n,U as l}from"./chunks/framework.a0f12ab5.js";const i=JSON.parse('{"title":"エラーオブジェクトの補強方法","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/wiki/how_to_augment_error_objects.md","filePath":"translation/duktape/wiki/how_to_augment_error_objects.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/wiki/how_to_augment_error_objects.md"},o=l(`<h1 id="エラーオブジェクトの補強方法" tabindex="-1">エラーオブジェクトの補強方法 <a class="header-anchor" href="#エラーオブジェクトの補強方法" aria-label="Permalink to &quot;エラーオブジェクトの補強方法&quot;">​</a></h1><h2 id="エラーオブジェクトのプロパティ" tabindex="-1">エラーオブジェクトのプロパティ <a class="header-anchor" href="#エラーオブジェクトのプロパティ" aria-label="Permalink to &quot;エラーオブジェクトのプロパティ&quot;">​</a></h2><p>エラーオブジェクトは「独自の」プロパティとError.prototypeから継承したプロパティの両方を持ちます。いくつかのプロパティは通常のデータプロパティであり、他のプロパティは仮想的なものです。参照:</p><ul><li><a href="http://duktape.org/guide.html#errorobjects" target="_blank" rel="noreferrer">http://duktape.org/guide.html#errorobjects</a></li></ul><h2 id="filename、-linenumber、および-stackを上書きする。" tabindex="-1">.fileName、.lineNumber、および.stackを上書きする。 <a class="header-anchor" href="#filename、-linenumber、および-stackを上書きする。" aria-label="Permalink to &quot;.fileName、.lineNumber、および.stackを上書きする。&quot;">​</a></h2><h3 id="duktape-1-4-0-以降" tabindex="-1">Duktape 1.4.0 以降 <a class="header-anchor" href="#duktape-1-4-0-以降" aria-label="Permalink to &quot;Duktape 1.4.0 以降&quot;">​</a></h3><p>これらのプロパティは、Error.prototypeから継承したアクセサ（ゲッター／セッター）で提供されます。ゲッターは、エラーが作成されたときにエラーに追加された内部の_Tracedataプロパティに基づいて、要求された結果（例：fileName）を提供します。</p><p>Duktape 1.4.0以降では、単純なプロパティ書き込みで、.fileName, .lineNumber, .stackをオーバーライドすることが可能です。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">aiee</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dummy.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileName)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// -&gt; dummy.js</span></span></code></pre></div><p>C言語で同等に。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_error_object</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> DUK_ERR_RANGE_ERROR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">invalid arg: %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> myarg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_push_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dummy.c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_put_prop_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fileName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="duktape-1-4-0以前" tabindex="-1">Duktape 1.4.0以前 <a class="header-anchor" href="#duktape-1-4-0以前" aria-label="Permalink to &quot;Duktape 1.4.0以前&quot;">​</a></h3><p>Duktape 1.4.0以前では、単純なプロパティ書き込みがうまくいきません。なぜなら、継承されたプロパティはアクセッサであり、書き込みの試みを「捕捉」して無視するからです。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Duktape 1.3.0</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">aiee</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dummy.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileName)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// not changed</span></span></code></pre></div><p>これらのプロパティは、Object.defineProperty()を使用してオーバーライドすることができます。これは、継承されたアクセッサが設定可能であるため、オーバーライドする「自身の」プロパティをエラーに追加することができるためです。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">aiee</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fileName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dummy.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fileName)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// dummy.js</span></span></code></pre></div><p>Cコードでは、duk_def_prop()を同様に使用することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_push_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fileName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_push_string</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dummy.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">duk_def_prop</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> idx_err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> DUK_DEFPROP_HAVE_VALUE </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">                           DUK_DEFPROP_HAVE_WRITABLE </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> DUK_DEFPROP_WRITABLE </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">                           DUK_DEFPROP_HAVE_ENUMERABLE </span><span style="color:#89DDFF;">|</span><span style="color:#676E95;font-style:italic;"> /*not enumerable */</span></span>
<span class="line"><span style="color:#A6ACCD;">                           DUK_DEFPROP_HAVE_CONFIGURABLE </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> DUK_DEFPROP_CONFIGURABLE</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="duktape-1-4-0の動作を保証します。" tabindex="-1">Duktape 1.4.0の動作を保証します。 <a class="header-anchor" href="#duktape-1-4-0の動作を保証します。" aria-label="Permalink to &quot;Duktape 1.4.0の動作を保証します。&quot;">​</a></h3><p>Duktape 1.4.0の挙動を旧バージョンに提供するためのポリフィルが存在します。</p><ul><li><a href="https://github.com/svaarala/duktape/blob/master/polyfills/duktape-error-setter-writable.js" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/blob/master/polyfills/duktape-error-setter-writable.js</a></li></ul>`,21),e=[o];function t(r,c,D,y,F,A){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
