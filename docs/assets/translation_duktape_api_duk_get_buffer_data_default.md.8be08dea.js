import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_get_buffer_data_default.md","filePath":"translation/duktape/api/duk_get_buffer_data_default.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_get_buffer_data_default.md"},p=l(`<h2 id="duk-get-buffer-data-default" tabindex="-1">duk_get_buffer_data_default() <a class="header-anchor" href="#duk-get-buffer-data-default" aria-label="Permalink to &quot;duk_get_buffer_data_default()&quot;">​</a></h2><p>2.1.0 stack buffer</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">duk_get_buffer_data_default</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">idx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">out_size</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">def_ptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">def_len</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">duk_get_buffer_data_default</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">idx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">out_size</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">def_ptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">def_len</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | val | ... |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_get_buffer_data() と同様ですが、明示的にデフォルト値が設定されており、値がプレーンバッファ、バッファオブジェクトでない場合、またはインデックスが無効な場合に返されます。</p><p>duk_opt_xxx() と duk_get_xxx_default() に与えられたデフォルト・ポインタ値は、Duktape によって追跡されません、例えば、 duk_opt_string() は、デフォルト文字列引数のコピーを作成しません。呼び出し側は、デフォルト・ポインタがその意図された用途に有効であり続けることを保証する責任があります。例えば、 duk_opt_string(ctx, 3, &quot;localhost&quot;) は、文字列定数が常に有効であるため、問題なく動作しますが、引数が libc に割り当てられた文字列である場合、呼び出し側は、 duk_opt_string() が返すポインタが libc に割り当てられた文字列の寿命を越えて使用されないようにしなければなりません。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr;</span></span>
<span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> sz;</span></span>
<span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">buf</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Use a buffer or buffer object given at index 2, or default to &#39;buf&#39;. */</span></span>
<span class="line"><span style="color:#E1E4E8;">ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_buffer_data_default</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">sz</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">buf</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(buf));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ptr;</span></span>
<span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> sz;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buf</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Use a buffer or buffer object given at index 2, or default to &#39;buf&#39;. */</span></span>
<span class="line"><span style="color:#24292E;">ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_buffer_data_default</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">sz</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(buf));</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_get_buffer_data duk_get_buffer_default</p>`,13),e=[p];function t(r,c,d,y,E,i){return a(),n("div",null,e)}const f=s(o,[["render",t]]);export{u as __pageData,f as default};
