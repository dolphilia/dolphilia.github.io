import{_ as a,o as s,c as n,Q as l}from"./chunks/framework.92ce8a2a.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_fatal.md","filePath":"translation/duktape/api/duk_fatal.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_fatal.md"},t=l(`<h2 id="duk-fatal" tabindex="-1">duk_fatal() <a class="header-anchor" href="#duk-fatal" aria-label="Permalink to &quot;duk_fatal()&quot;">​</a></h2><p>1.0.0 error</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_ret_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_fatal</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">err_msg</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_ret_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_fatal</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">err_msg</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>(バリュースタックに影響ナシ)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>致命的なエラーハンドラをオプションのメッセージ付きで呼び出します (err_msg は NULL かもしれません)。Duktape のすべての文字列と同様に、エラーメッセージは UTF-8 文字列であるべきですが、純粋な ASCII が強く推奨されます。</p><p>致命的なエラー・ハンドラは決して戻らず、例えば現在のプロセスを終了させるかもしれません。エラー捕捉ポイント (try-catch 文やエラー捕捉 API 呼び出しなど) は回避され、ファイナライザは実行されない。この関数は、本当に致命的な、回復不可能なエラーが発生したときにのみ呼び出すべきです。</p><p>この関数は決して戻りませんが、プロトタイプは以下のようなコードを可能にする戻り値を記述しています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argvalue </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_fatal</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;argvalue invalid, cannot continue execution&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argvalue </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_fatal</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;argvalue invalid, cannot continue execution&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">duk_fatal</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;assumption failed&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">duk_fatal</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;assumption failed&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div>`,13),p=[t];function e(c,r,i,d,u,y){return s(),n("div",null,p)}const _=a(o,[["render",e]]);export{h as __pageData,_ as default};
