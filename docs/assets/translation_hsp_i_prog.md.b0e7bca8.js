import{_ as o,o as p,c as a,U as e}from"./chunks/framework.a0f12ab5.js";const b=JSON.parse('{"title":"プログラム制御","description":"","frontmatter":{},"headers":[],"relativePath":"translation/hsp/i_prog.md","filePath":"translation/hsp/i_prog.md","lastUpdated":1676126774000}'),n={name:"translation/hsp/i_prog.md"},t=e(`<h1 id="プログラム制御" tabindex="-1">プログラム制御 <a class="header-anchor" href="#プログラム制御" aria-label="Permalink to &quot;プログラム制御&quot;">​</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li><li>Cli</li><li>Let</li></ul><h2 id="目次" tabindex="-1">目次 <a class="header-anchor" href="#目次" aria-label="Permalink to &quot;目次&quot;">​</a></h2><ul><li><a href="./i_prog#_break">_break</a></li><li><a href="./i_prog#_continue">_continue</a></li><li><a href="./i_prog#await">await</a></li><li><a href="./i_prog#break">break</a></li><li><a href="./i_prog#case">case</a></li><li><a href="./i_prog#continue">continue</a></li><li><a href="./i_prog#default">default</a></li><li><a href="./i_prog#do">do</a></li><li><a href="./i_prog#else">else</a></li><li><a href="./i_prog#end">end</a></li><li><a href="./i_prog#exec">exec</a></li><li><a href="./i_prog#exgoto">exgoto</a></li><li><a href="./i_prog#for">for</a></li><li><a href="./i_prog#foreach">foreach</a></li><li><a href="./i_prog#gosub">gosub</a></li><li><a href="./i_prog#goto">goto</a></li><li><a href="./i_prog#if">if</a></li><li><a href="./i_prog#loop">loop</a></li><li><a href="./i_prog#next">next</a></li><li><a href="./i_prog#on">on</a></li><li><a href="./i_prog#onclick">onclick</a></li><li><a href="./i_prog#oncmd">oncmd</a></li><li><a href="./i_prog#onerror">onerror</a></li><li><a href="./i_prog#onexit">onexit</a></li><li><a href="./i_prog#onkey">onkey</a></li><li><a href="./i_prog#repeat">repeat</a></li><li><a href="./i_prog#return">return</a></li><li><a href="./i_prog#run">run</a></li><li><a href="./i_prog#stop">stop</a></li><li><a href="./i_prog#swbreak">swbreak</a></li><li><a href="./i_prog#swend">swend</a></li><li><a href="./i_prog#switch">switch</a></li><li><a href="./i_prog#until">until</a></li><li><a href="./i_prog#wait">wait</a></li><li><a href="./i_prog#wend">wend</a></li><li><a href="./i_prog#while">while</a></li></ul><h2 id="await" tabindex="-1">await <a class="header-anchor" href="#await" aria-label="Permalink to &quot;await {#await}&quot;">​</a></h2><p>一定の時間で待つ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>await p1
</code></pre><ul><li>p1 = 0〜(0) : 待ち時間(1ms単位)</li></ul><p><strong>説明</strong>:</p><p>プログラムの実行を一定時間だけ中断します。</p><p>wait命令と似ていますが、 await命令は前回waitした時間からの待ち時間を指定します。これにより、描画速度の違いなどから時間が早く過ぎることを防止することができます。リアルタイムで更新される画面などの速度を一定に保つ時に使用します。</p><p>HSPでは、他のWindowsタスクに処理時間を渡すために長い時間ループが起こる可能性がある場所にはwaitかawait命令を入れることを推奨しています。waitや await命令がない命令の中を長い時間ループするようなプログラムを実行すると、ウィンドウをドラッグしにくくなったり、他のタスクに移るのに時間がかかったりします。</p><p><strong>参照</strong>:</p><ul><li>wait</li></ul><h2 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-label="Permalink to &quot;exec {#exec}&quot;">​</a></h2><p>Windowsのファイルを実行する</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>exec &quot;filename&quot;,p1,&quot;command&quot;
</code></pre><ul><li>&quot;filename&quot; : 対象となるファイル名</li><li>p1=0〜(0) : ファイル実行モード</li><li>&quot;command&quot; : コンテキストメニューの操作名</li></ul><p><strong>説明</strong>:</p><p>execは &quot;filename&quot; で指定したファイル名のアプリケーションを実行します。 拡張子がEXEの場合は、拡張子を省略することができます。 p1で実行時のモードを選ぶことができます。p1を省略した場合は0になります。</p><ul><li>モード0 : HSPノーマル実行</li><li>モード2 : 最小化モードで実行</li><li>モード16 : 関連付けされたアプリケーションを実行</li><li>モード32 : 指定したファイルを印刷する</li></ul><p>&quot;command&quot;が指定された場合は、 &quot;filename&quot;で指定したファイルまたはフォルダ名に対するコンテキストメニュー操作名となります。 コンテキストメニュー操作名は、レジストリに登録されているアクションを指定する文字列で、標準で以下のようなものが用意されています。</p><table><thead><tr><th>操作名</th><th>説明</th></tr></thead><tbody><tr><td>edit</td><td>エディタを開いて編集する。</td></tr><tr><td>explore</td><td>フォルダを選択して、エクスプローラを起動します。</td></tr><tr><td>open</td><td>関連付けられたアプリケーションでファイルを開きます。</td></tr><tr><td>print</td><td>関連付けられたアプリケーションでファイルを印刷します。</td></tr><tr><td>properties</td><td>ファイルまたはフォルダのプロパティを表示します。</td></tr></tbody></table><p>&quot;command&quot;が指定された場合は、ファイル実行モードの16、 32は無効になります。また、実行結果を示す値がシステム変数statに返されます。</p><p>ノーマル実行は、新しく起動したアプリケーションのウィンドウがアクティブになり、入力フォーカスも移りますが、マルチタスクで、 HSPは終了せずに実行を続けます。</p><p>例 ：</p><pre><code>exec &quot;calc&quot;  ; Windows電卓を起動
</code></pre><p>また、ファイル名に続けてパラメータを書くこともできます。</p><p>例 ：</p><pre><code>exec &quot;notepad hsp.txt&quot;  ; ノートパッドでhsp.txtを開く
</code></pre><p>モード２は指定したアプリケーションを最小化した状態で実行します。 DOSアプリケーションの実行時にHSPの画面を遮ることなくバックで実行させることができます。</p><p>モード16は、実行ファイルではなく、データファイルを指定してその拡張子に関連付けられたアプリケーションを実行します。</p><p>例 ：</p><pre><code>exec &quot;hsp.txt&quot;,16  ; hsp.txtを関連付けられたアプリケーションで開く
</code></pre><p>上の例では、「hsp.txt」を関連付けされたアプリケーションで開きます。 (通常は、notepad.exe) また、 モード16ではインターネットのURLを指定することでインターネットショートカットとしても使用することが可能です。</p><p>例 ：</p><pre><code>; インターネットのページを開く
exec &quot;http://www.onionsoft.net/hsp/&quot;,16
</code></pre><p>モード32では、指定したファイルに関連付けされたアプリケーションを経由して、プリンタに印刷をします。 たとえば、</p><p>例 ：</p><pre><code>exec &quot;hsp.txt&quot;,32  ; hsp.txtをプリンタで印刷
</code></pre><p>は、「txt」に関連付けされたアプリケーションで「hsp.txt」を自動的に印刷します。印刷のオプションなどはすべて、関連付けされたアプリケーションで指定されたものになります。</p><p>モードは、複数同時に指定することが可能です。 たとえば、モード2とモード16を同時に指定する場合は、それぞれの値を加算して18になります。この場合は、「最小化モードで関連付けされたアプリケーションを実行」になります。</p><p>※HSP2.61までサポートされていたモード1(タスク実行待ち)は、HSP3ではサポートしていません。起動したプロセスを監視するか、コンソールアプリケーションの場合はpipeexec命令をご使用ください。</p><p><strong>参照</strong>:</p><ul><li>pipeexec</li></ul><p><strong>対応の補足</strong>:</p><p>HSPLet時は、HTML ページを表示する目的で使用されます。 第3引数の意味がオリジナルの HSP とは違うため、この命令を直接使用することはお勧めしません。 代わりに letutil.hsp 内に定義されている showPage fileName, target 命令を使用することをお勧めします。</p><h2 id="end" tabindex="-1">end <a class="header-anchor" href="#end" aria-label="Permalink to &quot;end {#end}&quot;">​</a></h2><p>プログラム終了</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>end p1
</code></pre><ul><li>p1(0) : 終了コード</li></ul><p><strong>説明</strong>:</p><p>HSPのプログラムを終了します。 end命令はスクリプトのどこにあってもかまいません。 end命令が実行されると、そのアプリケーションは終了します。</p><p>アプリケーションの終了コードをパラメーターp1で指定することができます。p1を省略した場合は、0がアプリケーション終了コードとなります。 アプリケーション終了コードは、他のプロセスやバッチファイルへの通知に使用されます。通常は、省略(0)していて問題ありません。</p><p><strong>参照</strong>:</p><ul><li>stop</li></ul><h2 id="gosub" tabindex="-1">gosub <a class="header-anchor" href="#gosub" aria-label="Permalink to &quot;gosub {#gosub}&quot;">​</a></h2><p>指定ラベルにサブルーチンジャンプ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>gosub *label
</code></pre><ul><li>*label : ラベル名</li></ul><p><strong>説明</strong>:</p><p>サブルーチンジャンプをします。 gosub命令は、*labelで指定した場所にジャンプをします。 その後、return命令があるとgosub命令の次の行に復帰して実行を続けます。 gosub〜returnはネスティング(入れ子構造)にすることが可能です。 (最大ネスティング数はHSPが持つスタックメモリの量により変動します)</p><p><strong>参照</strong>:</p><ul><li>goto</li><li>return</li></ul><h2 id="goto" tabindex="-1">goto <a class="header-anchor" href="#goto" aria-label="Permalink to &quot;goto {#goto}&quot;">​</a></h2><p>指定ラベルにジャンプ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><p>*label *label : ラベル名</p><p><strong>説明</strong>:</p><p>指定したラベルに無条件でジャンプします。 以降は、ラベル名で指定された場所から実行を続けます。</p><p><strong>参照</strong>:</p><p>gosub</p><h2 id="if" tabindex="-1">if <a class="header-anchor" href="#if" aria-label="Permalink to &quot;if {#if}&quot;">​</a></h2><p>条件を満たしていればその行の命令を実行</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>if p1
</code></pre><ul><li>p1 : 条件式</li></ul><p><strong>説明</strong>:</p><p>p1の条件式が満たされていれば、それ以降の命令を実行する。満たされていない場合は、次の行に移ります。 BASICと違い、その行の次の命令との間には :(コロン)を入れなければいけないので注意してください。</p><p>例 ：</p><pre><code>a=10
if a=10 : mes &quot;aは10です。&quot;
</code></pre><p>上の例では、「a=10」の部分が条件式になります。条件式には主に、</p><ul><li>a=b : aとbは等しい</li><li>a!b : aとbは等しくない</li><li>a&lt;b : aはbよりも小さい</li><li>a&gt;b : aはbよりも大きい</li><li>a&lt;=b : aはbよりも小さいか等しい</li><li>a&gt;=b : aはbよりも大きいか等しい</li></ul><p>を使います。if＋条件式の後は：(コロン)で区切り、それに続いて条件が満たされた場合に実行される部分を書きます。 (C言語やJavaと同じように「=」「!」を「==」「!=」のように記述することも可能です) もし、条件によってプログラムの流れを変えたい場合には、</p><p>例 ：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=10</span></span>
<span class="line"><span style="color:#A6ACCD;">	if a&gt;10 : goto *over10</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;aは10以下です。&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	stop</span></span>
<span class="line"><span style="color:#A6ACCD;">*over10</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;aは10より大きいです。&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	stop</span></span></code></pre></div><p>上のように、goto命令で別なラベルに飛ばすことも可能です。 また、else命令を使って条件が満たされなかった場合の処理を同じ行に書くことも可能です。</p><p>例:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=10</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;aは、&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	if a=10 : mes &quot;10です。&quot; : else : mes &quot;10ではありません。&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	stop</span></span></code></pre></div><p>この場合は、else命令のある部分までは、条件を満たした場合に実行され、else命令以降は、条件を満たされなかった場合に実行されます。 次の行以降は、条件に関わらず通常通りに実行されます。</p><p>より複雑な条件判断をするために、論理演算式を使うこともできます。</p><ul><li>a&amp;b : aとbがともに正しい (and)</li><li>a|b : aとbのどちらかが正しい (or)</li></ul><p>これによって複数の条件を一度に記述することができます。</p><p>例 ：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=10:b=20</span></span>
<span class="line"><span style="color:#A6ACCD;">	if (a=10)|(b=10) : mes &quot;aかbのどちらかが10です。&quot;</span></span></code></pre></div><p>上の例では、「a=10」と「b=10」 という条件式を|(or)でつないで、どちらかが正しい場合には、正しいという結果が出るようにしています。 論理演算は、 「|」「&amp;」といった記号の他に「or」「and」という文字列でも記述することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">例 ：</span></span>
<span class="line"><span style="color:#A6ACCD;">	if (a=10)or(b=10) : mes &quot;aかbのどちらかが10です。&quot;</span></span></code></pre></div><p>上のように書いても、結果は同じになります。</p><p>if命令の条件が正しい時に実行されるスクリプトを複数行に渡って記述する場合は、</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=10</span></span>
<span class="line"><span style="color:#A6ACCD;">	if a&gt;5 {</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;TRUE&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;(MULTILINE IF)&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span></code></pre></div><p>のように「{」で始めて「}」で終わる部分までを指定します。 (上の例では、 見やすくするためにC言語風に行の最初にTABを入れてありますが、特に必要なものではありません。ユーザーの見やすいように記述してください)</p><p>else命令でも複数行の指定ができます。</p><p>例 :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=10</span></span>
<span class="line"><span style="color:#A6ACCD;">	if a&gt;5 {</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;TRUE&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot;(MULTILINE IF)&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	else {</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot; FALSE&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">		mes &quot; (MULTILINE IF)&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	return</span></span></code></pre></div><p>ただし、else の後に「{」を記述しなければ複数行にはならないので注意してください。</p><p><strong>参照</strong>:</p><ul><li>else</li></ul><h2 id="loop" tabindex="-1">loop <a class="header-anchor" href="#loop" aria-label="Permalink to &quot;loop {#loop}&quot;">​</a></h2><p>ループの始まりに戻る</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>説明</strong>:</p><p>repeat/foreach命令で指定したループの終わりを指定します。 詳しくはrepeat命令の項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>repeat</li><li>foreach</li></ul><h2 id="onexit" tabindex="-1">onexit <a class="header-anchor" href="#onexit" aria-label="Permalink to &quot;onexit {#onexit}&quot;">​</a></h2><p>終了時にジャンプ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>onexit goto/gosub *label
</code></pre><ul><li>*label : ラベル名</li></ul><p><strong>説明</strong>:</p><p>クローズボックス(ウィンドウ右上の終了ボタン)を押した時に、自動的にジャンプする場所を指定します。</p><p>onexitの後に続けて、 gotoまたはgosubキーワードを指定してからラベルを記述します。 gotoの場合には、単純なプログラムジャンプ。 gosubの場合はサブルーチンジャンプを行ないます。 goto/gosubキーワードを省略した場合には、gotoキーワードと同等の動作になります。</p><p>例 :</p><pre><code>onexit gosub *exit_routine  ; 終了時呼び出し
</code></pre><p>通常は、クローズボックスを押すとどのような時でも強制終了してしまいますが、この命令が実行された以降は、クローズボックスを押すとonexit命令で指定したラベルにジャンプし、そこから実行を続けるようになります。</p><p>終了時に確認メッセージを表示したい時、終了したらデータを保存するようにしたい時などに使います。</p><p>この命令が実行されると、 end命令以外ではスクリプトの実行が止められなくなるので、十分に注意して使ってください。</p><p>複数のウィンドウを作成した場合は、いずれかのウィンドウにある終了ボタンで割り込みが発生します。この時、システム変数wparamに終了の通知を受けたウィンドウIDが代入されます。</p><p>onexitでジャンプされた直後は、システム変数iparamに終了要因が値として保存されています。 iparamが0の場合は、ユーザーの意思でプログラムを終了。 iparamが1の場合は、 Windowsシャットダウン(再起動または電源OFF)による終了です。Windowsシャットダウン時の終了処理には、await、wait、stop命令などでシステムにアイドルタイム(待ち時間)を発生させた場合には、シャットダ ウン処理を中止します(シャットダウンされません)。 await、wait、stop命令を使わずにend命令で終了した場合には、そのままシャットダウン処理が継続されます。</p><p>終了時ジャンプの一時的なON/OFFをすることも可能です。</p><pre><code>onexit 0
</code></pre><p>で一時的に割り込みを停止します。</p><pre><code>onexit 1
</code></pre><p>で一時停止した割り込みを再開させることができます。</p><p><strong>参照</strong>:</p><ul><li>onkey</li><li>onclick</li><li>onerror</li></ul><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="return" tabindex="-1">return <a class="header-anchor" href="#return" aria-label="Permalink to &quot;return {#return}&quot;">​</a></h2><p>サブルーチンから復帰</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>return p1
</code></pre><ul><li>p1 : システム変数代入値</li></ul><p><strong>説明</strong>:</p><p>gosub命令やユーザー定義命令などで呼び出しされたサブルーチンを終了します。return命令により、スタックを戻し呼び出し元に復帰します。 p1を指定することにより、サブルーチンから値をシステム変数に反映させることができます。</p><ul><li>p1に数値を指定した場合には、システム変数statに代入されます。</li><li>p1に文字列を指定した場合には、システム変数refstrに代入されます。</li><li>p1に実数値を指定した場合には、システム変数refdvalに代入されます。</li><li>p1の指定を省略した場合には、システム変数の代入は行なわれません。</li></ul><p><strong>参照</strong>:</p><ul><li>gosub</li><li>#deffunc</li><li>#defcfunc</li><li>stat</li><li>refstr</li><li>refdval</li></ul><h2 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run {#run}&quot;">​</a></h2><p>指定したファイルに制御を移す</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>run &quot;filename&quot;,&quot;cmdline&quot;
</code></pre><ul><li>&quot;filename&quot; : 実行するHSPオブジェクトファイル名</li><li>&quot;cmdline&quot; : システム変数dir_cmdlineに代入される文字列</li></ul><p><strong>説明</strong>:</p><p>別のファイルに書かれたHSPのプログラムを実行します。 指定するファイルはHSPのオブジェクトファイル (拡張子がAX)でなければなりません。 オブジェクトファイルは、スクリプトエディタの「オブジェクトファイル作成」によって作成することができます。</p><p>例 ：</p><pre><code>run &quot;MENU2.AX&quot;,&quot;-s&quot;
</code></pre><p>が実行されると、いままでのプログラムはなくなり&quot;MENU2.AX&quot;というファイルのプログラムが最初から実行されます。 画面の状態は維持されますが、変数、メモリバッファの内容はすべて初期化されます。また、「-s」という文字列がシステム変数 dir_cmdlineに代入された状態で実行が開始されます。</p><p>&quot;cmdline&quot;パラメーターが省略された場合は、システム変数dir_cmdlineの内容は 空になります。また、システム変数 dir_cmdlineは最大1024文字まで内容が保存されます。</p><h2 id="stop" tabindex="-1">stop <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop {#stop}&quot;">​</a></h2><p>プログラム中断</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>説明</strong>:</p><p>プログラムの実行を一時中断します。 ボタンがクリックされるまで待つ時などに使用します。</p><p><strong>参照</strong>:</p><ul><li>end</li></ul><h2 id="wait" tabindex="-1">wait <a class="header-anchor" href="#wait" aria-label="Permalink to &quot;wait {#wait}&quot;">​</a></h2><p>実行を一定時間中断する</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>wait p1
</code></pre><ul><li>p1(100) : 待ち時間(10ms単位)</li></ul><p><strong>説明</strong>:</p><p>プログラムの実行を一定時間だけ中断します。</p><p>p1に待ち時間の長さを指定します。単位は10ミリ秒になります。(1ミリ秒=1/1000秒) CPUの速度に関係なく、どんな機種でも同じ待ち時間になります。 ;p1に0を指定した場合、 または省略をした場合は、前回と同じ時間だけ待ちます。</p><p>await命令を使うとwait命令よりも高精度で細かいウエイトが可能ですが、wait命令よりもCPUのタスクを消費します。 リアルタイムに画像を書き換えるなどの処理でなければ、 wait命令を使用した方がCPU(Windows)の負担が軽くなります。 常にデスクトップに配置するようなアクセサリにはwait命令を、ゲームアプリケーションなどにはawait命令を使うといった使い分けをするといいでしょう。</p><p>HSPでは、他のWindowsタスクに処理時間を渡すために長い時間ループが起こる可能性がある場所にはwaitかawait命令を入れることを推奨しています。 waitや await命令がない命令の中を長い時間ループするようなプログラムを実行すると、ウィンドウをドラッグしにくくなったり、他のタスクに移るのに時間がかかったりします。</p><p><strong>参照</strong>:</p><ul><li>await</li></ul><h2 id="repeat" tabindex="-1">repeat <a class="header-anchor" href="#repeat" aria-label="Permalink to &quot;repeat {#repeat}&quot;">​</a></h2><p>ループの始まりの場所を示す</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>repeat p1,p2
</code></pre><ul><li>p1=1〜(-1) : ループ回数</li><li>p2=0〜(0) : システム変数cntのスタート値</li></ul><p><strong>説明</strong>:</p><p>repeat〜loopの間をくり返し実行します。 repeat命令は、くり返しの開始地点を示します。 loop命令は最後に通過したrepeat命令まで戻ります。つまり、</p><pre><code>repeat 5
	print &quot;やっほー&quot;
loop
</code></pre><p>のようなプログラムは、「やっほー」を5回表示します。 repeat命令のパラメータ、p1でくり返しの回数を指定することができます。回数の指定を省略、またはマイナス値を指定すると無限ループになります。 繰り返しの回数が0の場合は、繰り返し部分は実行されず対応する loop命令までジャンプします。</p><p>repeat〜loopを含む部分をさらにループさせるネスト構造も記述することができます。ただし、正常にloop命令を通ってループしないで抜けたりすると、ネスト構造がおかしくなるのでループから強制的に抜けるような構造にはしないようにしてください。</p><p>ループ回数を調べたい時や、カウンターを利用したい時のためにシステム変数cntを参照することができます。cntは通常、0からスタートして、 loop命令でループするたびに1づつ増えていきます。 ただし、repeat命令のp2でカウンタがスタートする数値を変更することも可能です。たとえば、repeat 3,1 のように指定した場合には、変数cntの値は1,2,3の順で変化します。</p><p>ループの内部で、強制的にループを抜け出す場合には、 break命令を使用してください。また、次のループに移るためのcontinue命令も用意されています。</p><p><strong>参照</strong>:</p><ul><li>loop</li><li>break</li><li>continue</li><li>foreach</li></ul><h2 id="break" tabindex="-1">break <a class="header-anchor" href="#break" aria-label="Permalink to &quot;break {#break}&quot;">​</a></h2><p>ループから抜ける</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>説明</strong>:</p><p>repeat〜loop間のループから、強制的に抜け出します。</p><pre><code>repeat 5
	if cnt=2 : break
	mes &quot;繰り返し[&quot;+cnt+&quot;]&quot;
loop
</code></pre><p>上の例では、システム変数が2になった時点、つまり３回目のループになると、if命令の判断によって、break命令が実行されるしくみになっています。 break命令が実行されると、繰り返しの回数がまだ残っていても、 強制的に繰り返しから抜け出し、loop命令の次にある命令から実行を続けます。 break命令以降(上の例では、mes命令)は実行されません。 この命令を使うと、たとえば次のようなスクリプトが作成可能です。</p><pre><code>repeat
	getkey a,1
	if a&gt;0 : break
	await 10
loop
</code></pre><p>上のスクリプトでは、マウスの左ボタンを押すまで待つループになります。 repeat命令の回数指定を省略すると無限ループになるので、それを利用してボタンの状態が 1になるまでは、ずっと同じところを繰り返すようになっています。ボタンが押されると、 break命令が実行され繰り返しから抜け出します。</p><p><strong>参照</strong>:</p><ul><li>repeat</li><li>loop</li><li>continue</li><li>foreach</li></ul><h2 id="continue" tabindex="-1">continue <a class="header-anchor" href="#continue" aria-label="Permalink to &quot;continue {#continue}&quot;">​</a></h2><p>ループをやり直す</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>continue p1
</code></pre><ul><li>p1 = 0〜 : 繰り返しカウンタ変更値</li></ul><p><strong>説明</strong>:</p><p>repeat〜loop間のループをやり直します。 continue命令が実行されると、repeat命令まで戻り次の繰り返しを実行します。</p><pre><code>repeat 5
	if cnt=2 : continue
	mes &quot;cnt=&quot;+cnt
loop
</code></pre><p>上の例では、システム変数cntが2になった時点で、continue命令が実行されるしくみになっています。 上のスクリプトが実行されると、</p><pre><code>cnt=0
cnt=1
cnt=3
cnt=4
</code></pre><p>のような表示になり、システム変数cntが２の時だけmes命令が実行されないのがわかります。 最初はわかりにくいかもしれませんが、continue命令は、loop命令の場所ではないが、loop命令と同じ働きをするとも言えます。 繰り返しのカウンタは、continue命令が実行された場合でも、loop命令と同様1つ増加します。 もし、最後の繰り返しでcontinue命令が実行されると、repeat〜loopが終わった状態、つまりloop命令の次の命令から実行を続けます。</p><p>さらにもう１つ、continue命令にはパラメータを指定する使い方が存在します。 continueの後に、数値または数値型変数を指定することにより、繰り返しのカウンタを示すシステム変数cntの内容を変更することができます。 たとえば、「continue 1」と指定した場合は、システム変数cntの内容は1になり、その値のままrepeat命令の次から繰り返しを続けます。 パラメータを省略して、ただの「continue」だけの場合はloop命令と同様の処理、数値を指定すると、カウンタの値を変更して繰り返しをやり直すことになります。 ですから、</p><pre><code>repeat 1
	await 10
	getkey a,1
	if a=0 : continue 0
loop
</code></pre><p>このようなスクリプトでは、通常1回だけしか実行されないはずの、 repeat〜loopの繰り返しですが、マウスの左ボタンが押されていない場合は、カウンタが0に戻され無限ループの状態になります。 これで、ボタンを押すまで待つという動作になります。</p><p><strong>参照</strong>:</p><ul><li>repeat</li><li>foreach</li><li>loop</li><li>break</li></ul><h2 id="onkey" tabindex="-1">onkey <a class="header-anchor" href="#onkey" aria-label="Permalink to &quot;onkey {#onkey}&quot;">​</a></h2><p>キー割り込み実行指定</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>onkey goto/gosub *label
</code></pre><ul><li>*label : ラベル名</li></ul><p><strong>説明</strong>:</p><p>キーボードを押した時に、自動的にジャンプする場所を指定します。</p><p>onkeyの後に続けて、gotoまたはgosubキーワードを指定してからラベルを記述します。gotoの場合には、単純なプログラムジャンプ。 gosubの場合はサブルーチンジャンプを行ないます。 goto/gosubキーワードを省略した場合には、gotoキーワードと同等の動作になります。</p><p>onkey命令でラベルを指定すると、それ以降はHSPのウィンドウがアクティブな時にキー入力があるたびに*labelで指定したラベルにジャンプします。</p><p>割り込みジャンプは、stop命令および、wait、 await命令で停止している時に割り込みを受け付けてジャンプを行います。 また、割り込みによりジャンプを行なった後はシステム変数iparam、wparam、lparamがセットされます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">割り込み要因 | iparam     | wparam | lparam</span></span>
<span class="line"><span style="color:#A6ACCD;"> ---------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    onkey       | 文字コード | wParam | lParam</span></span></code></pre></div><p>システム変数iparamには、割り込み要因ごとのパラメータが代入されます。 また、wparam,lparamはWindowsメッセージとして渡されたパラメータがそのまま格納されています。 イベント割り込み実行の一時的なON/OFFをすることも可能です。</p><pre><code>onkey 0
</code></pre><p>で一時的にキー割り込みを停止します。</p><pre><code>onkey 1
</code></pre><p>で一時停止したキー割り込みを再開させることができます。</p><p><strong>参照</strong>:</p><ul><li>onclick</li><li>onexit</li><li>onerror</li></ul><h2 id="onclick" tabindex="-1">onclick <a class="header-anchor" href="#onclick" aria-label="Permalink to &quot;onclick {#onclick}&quot;">​</a></h2><p>クリック割り込み実行指定</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><p>goto/gosub *label *label : ラベル名</p><p><strong>説明</strong>:</p><p>マウスのボタンを押した時に、自動的にジャンプする場所を指定します。</p><p>onclickの後に続けて、gotoまたはgosubキーワードを指定してからラベルを記述します。gotoの場合には、単純なプログラムジャンプ。 gosubの場合はサブルーチンジャンプを行ないます。 goto/gosubキーワードを省略した場合には、gotoキーワードと同等の動作になります。</p><p>onclicky命令でラベルを指定すると、 それ以降はHSPのウィンドウ上でマウスクリックがあるたびに*labelで指定したラベルにジャンプします。</p><p>割り込みジャンプは、stop命令および、wait、await命令で停止している時に割り込みを受け付けてジャンプを行います。 また、割り込みによりジャンプを行なった後はシステム変数iparam、wparam、lparamがセットされます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">割り込み要因 | iparam         | wparam | lparam</span></span>
<span class="line"><span style="color:#A6ACCD;"> -------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">   onclick      | マウスボタンID | wParam | lParam</span></span></code></pre></div><p>システム変数iparamには、割り込み要因ごとのパラメータが代入されます。 また、wparam,lparamはWindowsメッセージとして渡されたパラメータがそのまま格納されています。 イベント割り込み実行の一時的なON/OFFをすることも可能です。</p><pre><code>onclick 0
</code></pre><p>で一時的に割り込みを停止します。</p><pre><code>onclick 1
</code></pre><p>で一時停止した割り込みを再開させることができます。</p><p><strong>参照</strong>:</p><ul><li>onkey</li><li>onexit</li><li>onerror</li></ul><h2 id="onerror" tabindex="-1">onerror <a class="header-anchor" href="#onerror" aria-label="Permalink to &quot;onerror {#onerror}&quot;">​</a></h2><p>エラー発生時にジャンプ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>onerror goto/gosub *label
</code></pre><ul><li>*label : ラベル名</li></ul><p><strong>説明</strong>:</p><p>スクリプトが原因で HSP内部でエラーが発生した時に、自動的にジャンプする場所を指定します。</p><p>onerrorの後に続けて、gotoまたはgosubキーワードを指定してからラベルを記述します。gotoの場合には、単純なプログラムジャンプ。 gosubの場合はサブルーチンジャンプを行ないます。 goto/gosubキーワードを省略した場合には、gotoキーワードと同等の動作になります。</p><p>通常は、エラー発生時にシステムのエラーメッセージダイアログが表示されますが、そのかわりに指定したラベルにジャンプするように設定されます。ジャンプ後は、以下のシステム変数に情報が代入されます。</p><ul><li>wparam : エラー番号</li><li>lparam : エラー発生行番号</li><li>iparam : 0(なし)</li></ul><p>onerror命令によりエラー後の処理を指定した場合であっても、 必要な処理が終わったら、そのままアプリケーションの実行は再開せずに、 なるべくend命令で終了させてください。 onerror命令は、エラーから回復させるものではありません。 エラー発生の原因によっては、 HSPのシステム自体が不安定になったり障害が発生することも有り得ます。 onerror命令を使う場面としては、実行ファイル作成時にエラーが発生した場合にアプリケーション側で独自のエラー表示を行ないたい場合や、特定のエラーが発生する場合にだけデバッグのための表示を行なうなどが考えられます。</p><p>終了時ジャンプの一時的なON/OFFをすることも可能です。</p><pre><code>onerror 0
</code></pre><p>で一時的に割り込みを停止します。</p><pre><code>onerror 1
</code></pre><p>で一時停止した割り込みを再開させることができます。</p><p><strong>参照</strong>:</p><ul><li>onkey</li><li>onclick</li><li>onexit</li></ul><h2 id="exgoto" tabindex="-1">exgoto <a class="header-anchor" href="#exgoto" aria-label="Permalink to &quot;exgoto {#exgoto}&quot;">​</a></h2><p>指定ラベルに条件ジャンプ</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>exgoto var,p1,p2,*label
</code></pre><ul><li>var : 比較に使用される変数</li><li>p1 : 比較フラグ</li><li>p2 : 比較値</li><li>*label : ラベル名</li></ul><p><strong>説明</strong>:</p><p>varで指定された変数に代入されている値と、 p2の比較値により指定したラベルに条件でジャンプします。 比較方法は、p1の比較フラグが0以上(正値)の場合は(varの値&gt;=p2)が成立した時にジャンプ、p1が-1以下(負値)の場合は (varの値&lt;=p2)が成立した時にジャンプを行ないます。 varで指定された変数は、整数型である必要があります。別な型で初期化されている場合は、実行時にエラーとなります。 この命令は、 forなど一部のマクロ処理を高速化するために用意された命令です。 exgoto命令を単体で使用することもできますが、スクリプトの視認性からもif命令による通常の条件分岐を行なうことを推奨致します。</p><p><strong>参照</strong>:</p><ul><li>goto</li><li>if</li></ul><h2 id="on" tabindex="-1">on <a class="header-anchor" href="#on" aria-label="Permalink to &quot;on {#on}&quot;">​</a></h2><p>数値による分岐</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>on p1 goto/gosub ラベル0,ラベル1…
</code></pre><ul><li>p1=0〜(0) : 分岐のための値</li><li>ラベル0〜 : 分岐先のラベル名</li></ul><p><strong>説明</strong>:</p><p>on命令は、p1で指定された値が0,1,2…に応じて分岐先を選択します。 「on 数値 goto」または、「on 数値 gosub」 のような書式で、続いて分岐する先のラベルを1つ以上「,」で区切って記述することができます。 指定された数値が0の場合はラベル0が、数値が1の場合はラベル1が分岐の対象になります、 以降2,3,4…と対応したラベルを任意の数だけ記述していくことが可能です。 「on 数値 goto」の場合は goto命令と同じ単純な分岐、「on 数値 gosub」の場合はgosub命令と同じサブルーチンジャンプを行ないます。 数値がマイナス値か、対応したラベルが指定されていない場合は分岐は行なわれずに次の行に進みます。 n88系のBASICと違い最初のラベルが数値0に対応しているのでご注意下さい。(n88系BASICでは数値1が最初のラベルになります)</p><p><strong>参照</strong>:</p><ul><li>goto</li><li>gosub</li></ul><p><strong>例</strong>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=1</span></span>
<span class="line"><span style="color:#A6ACCD;">	on a goto *a0,*a1,*a2</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;その他&quot;:stop</span></span>
<span class="line"><span style="color:#A6ACCD;">*a0</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;A=0&quot;:stop</span></span>
<span class="line"><span style="color:#A6ACCD;">*a1</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;A=1&quot;:stop</span></span>
<span class="line"><span style="color:#A6ACCD;">*a2</span></span>
<span class="line"><span style="color:#A6ACCD;">	mes &quot;A=2&quot;:stop</span></span></code></pre></div><h2 id="while" tabindex="-1">while <a class="header-anchor" href="#while" aria-label="Permalink to &quot;while {#while}&quot;">​</a></h2><p>while繰り返し開始</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>パラメーター</strong>:</p><pre><code>while p1
</code></pre><ul><li>p1=条件式(1) : 繰り返しを行なう条件</li></ul><p><strong>説明</strong>:</p><p>whileに続く条件が満たされている間だけ、whileからwendまでを繰り返します。 条件が満たされていない場合はwhileからwendまでを実行しません。 whileに続く条件を省略した場合は、無限に繰り返しを行ないます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a=0</span></span>
<span class="line"><span style="color:#A6ACCD;">	while a&lt;5</span></span>
<span class="line"><span style="color:#A6ACCD;">	a=a+1:mes &quot;A=&quot;+a</span></span>
<span class="line"><span style="color:#A6ACCD;">	wend     ; aが5以下の間だけwhile以下を繰り返す</span></span></code></pre></div><p>また、_continue、_breakマクロによって再開、脱出が可能です。 while〜wend制御は、プリプロセッサのマクロ機能を使って実現されています。 CやJava等に近い記述をしたいような場合にお使い下さい。 初心者の方には、repeat〜loop命令か、if命令による繰り返し記述を推奨します。</p><p><strong>参照</strong>:</p><ul><li>_continue</li><li>_break</li><li>wend</li></ul><h2 id="wend" tabindex="-1">wend <a class="header-anchor" href="#wend" aria-label="Permalink to &quot;wend {#wend}&quot;">​</a></h2><p>while繰り返し終了</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>whileで指定した繰り返し区間の終わりを指定します。 詳しくはwhileマクロの項を参照してください。</p><p><strong>参照</strong>:</p><p>while</p><h2 id="until" tabindex="-1">until <a class="header-anchor" href="#until" aria-label="Permalink to &quot;until {#until}&quot;">​</a></h2><p>do繰り返し終了</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>パラメーター</strong>:</p><pre><code>until p1
</code></pre><ul><li>p1=条件式(1) : 繰り返しを行なう条件</li></ul><p><strong>説明</strong>:</p><p>untilに続く条件が満たされるまで、doからuntilまでの部分を繰り返します。 条件が満たされている場合でも、最低一回はdo〜until内を実行します。 untilに続く条件を省略した場合は、繰り返しを行ないません。</p><pre><code>a=0
do
a=a+1:mes &quot;A=&quot;+a
until a&gt;5    ; aが5以上になるまでdo以下を繰り返す
</code></pre><p>また、_continue、_breakマクロによって再開、脱出が可能です。 do〜until制御は、プリプロセッサのマクロ機能を使って実現されています。 CやJava等に近い記述をしたいような場合にお使い下さい。 初心者の方には、repeat〜loop命令か、goto命令とif命令を組み合わせた繰り返し記述を推奨します。</p><p><strong>参照</strong>:</p><ul><li>_continue</li><li>_break</li><li>do</li></ul><h2 id="do" tabindex="-1">do <a class="header-anchor" href="#do" aria-label="Permalink to &quot;do {#do}&quot;">​</a></h2><p>do繰り返し開始</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>untilまでの繰り返し区間の始まりを指定します。 繰り返し条件は、untilマクロによって記述されます。 詳しくはuntilマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>until</li></ul><h2 id="for" tabindex="-1">for <a class="header-anchor" href="#for" aria-label="Permalink to &quot;for {#for}&quot;">​</a></h2><p>指定回数繰り返し開始</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>パラメーター</strong>:</p><pre><code>for p1,p2,p3,p4
</code></pre><ul><li>p1 : 変数名</li><li>p2(0) : 初期値</li><li>p3(0) : 終値</li><li>p4(1) : 増分</li></ul><p><strong>説明</strong>:</p><p>パラメーターとして変数名、初期値、終値、増分などを指定すると、for〜nextの間を指定回数繰り返します。 カッコ内は省略した場合の値です。変数名は省略できません。 指定された変数をカウンターとして使用し、初期値から始まって、１回繰り返すごとに増分を足していきます。終値に達した時点で、繰り返しから抜けます(終値はループに含みません)。 最初から終値の条件が満たされている場合は、繰り返しを実行しません。 また、_continue、_breakマクロによって再開、脱出が可能です。</p><pre><code>for a,0,5,1
mes &quot;A=&quot;+a
next    ; aが0から4の間(５回)繰り返す
</code></pre><p>この例では、変数aは0,1,2,3,4と５回繰り返してループを終わります。 増分にマイナス値を指定することも可能です。</p><pre><code>for a,5,0,-1
mes &quot;A=&quot;+a
next    ; aが5から1の間(５回)繰り返す
</code></pre><p>この場合、変数aは5,4,3,2,1と５回繰り返してループを終わります。</p><p>forマクロで指定され初期値及び、終値は必ず整数を指定する必要があります。 他の型を指定した場合は、エラーとなります。 また、増分や終値の指定によっては無限ループになる可能性がありますので注意してください。</p><p>for〜next制御は、プリプロセッサのマクロ機能を使って実現されています。 CやJava等に近い記述をしたいような場合にお使い下さい。 初心者の方には、repeat〜loop命令か、if命令による繰り返し記述を推奨します。forマクロは、 内部でマクロ展開後に特殊なプログラム制御命令exgotoを生成します。</p><p><strong>参照</strong>:</p><ul><li>_continue</li><li>_break</li><li>next</li><li>exgoto</li></ul><h2 id="next" tabindex="-1">next <a class="header-anchor" href="#next" aria-label="Permalink to &quot;next {#next}&quot;">​</a></h2><p>指定回数繰り返し終了</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>forで指定した繰り返し区間の終わりを指定します。 詳しくはforマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>for</li></ul><h2 id="switch" tabindex="-1">switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;switch {#switch}&quot;">​</a></h2><p>比較ブロック開始</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>パラメーター</strong>:</p><pre><code>switch p1
</code></pre><ul><li>p1 : 比較元</li></ul><p><strong>説明</strong>:</p><p>switch〜case〜swend は、ブロック内に複数の条件判断と処理をまとめて書くことができる構文です。 p1で指定する比較元のパラメーターは、変数または式を指定することができます。switch以降は、</p><pre><code>case 比較値
</code></pre><p>を置くことで、これ以降に「比較元」が「比較値」と同じだった場合に処理する内容を記述することができます。 caseは、ブロック内に複数記述することができ、それぞれの比較値ごとの処理を指定できます。caseの比較が正しい場合は、 swbreakが存在するまで以降の命令を実行します。また、caseの替わりに</p><pre><code>default
</code></pre><p>を置くと、caseで指定したどの比較値にもあてはまらない条件の場合に以降が実行されます。</p><p>switchブロックが終了した場合は、</p><pre><code>swend
</code></pre><p>を必ず最後に書いておく必要があります。 以下は、switchマクロを使用したスクリプトの例です。</p><pre><code>a=0
switch a               ; aを比較対象とする
case 0                 ; aが0だった場合
	mes &quot;A=0&quot;
	swbreak            ; case0の条件実行終了
case 1                 ; aが1だった場合
	mes &quot;A=1&quot;
default                ; aが0以外だった場合
	mes &quot;A!=0&quot;
	swbreak
swend
</code></pre><p>この例では、変数aの内容が0か1かそれ以外かで条件分岐を行なっています。 「case 0」以降は、「swbreak」までが実行されますが、「case 1」の場合は、「swbreak」が存在しないため、「default」以降に実行される「mes &quot;A!=0&quot;」も含めて実行されるので注意してください。</p><p><strong>参照</strong>:</p><ul><li>case</li><li>default</li><li>swbreak</li><li>swend</li></ul><h2 id="swend" tabindex="-1">swend <a class="header-anchor" href="#swend" aria-label="Permalink to &quot;swend {#swend}&quot;">​</a></h2><p>比較ブロック終了</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>switchで指定した比較ブロックの終わりを指定します。 詳しくはswitchマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>switch</li><li>case</li><li>default</li><li>swbreak</li></ul><h2 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;default {#default}&quot;">​</a></h2><p>デフォルト比較指定</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>switch〜swendの比較ブロック内で、 それまでのcaseにあてはまらない条件の時に実行される処理を指定します。 詳しくはswitchマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>switch</li><li>case</li><li>swbreak</li><li>swend</li></ul><h2 id="case" tabindex="-1">case <a class="header-anchor" href="#case" aria-label="Permalink to &quot;case {#case}&quot;">​</a></h2><p>比較値指定</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>パラメーター</strong>:</p><pre><code>case p1
</code></pre><ul><li>p1 : 比較値</li></ul><p><strong>説明</strong>:</p><p>switch〜swendの比較ブロック内で、比較元との条件を指定して正しい場合に実行される処理を指定します。 詳しくはswitchマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>switch</li><li>default</li><li>swbreak</li><li>swend</li></ul><h2 id="swbreak" tabindex="-1">swbreak <a class="header-anchor" href="#swbreak" aria-label="Permalink to &quot;swbreak {#swbreak}&quot;">​</a></h2><p>比較実行脱出指定</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>switch〜swendの比較ブロック内から脱出します。 詳しくはswitchマクロの項を参照してください。</p><p><strong>参照</strong>:</p><ul><li>switch</li><li>default</li><li>case</li><li>swend</li></ul><h2 id="_continue" tabindex="-1">_continue <a class="header-anchor" href="#_continue" aria-label="Permalink to &quot;_continue {#_continue}&quot;">​</a></h2><p>マクロループをやり直す</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>標準マクロによって定義されている繰り返しマクロ、 while〜wend、do〜until、for〜next間のループをやり直します。 現在以降の繰り返しブロック内は実行せずに、次の繰り返しから再開されます。</p><p><strong>参照</strong>:</p><ul><li>_break</li><li>while</li><li>wend</li><li>do</li><li>until</li><li>for</li><li>next</li></ul><h2 id="_break" tabindex="-1">_break <a class="header-anchor" href="#_break" aria-label="Permalink to &quot;_break {#_break}&quot;">​</a></h2><p>マクロループを脱出する</p><p><strong>グループ</strong>:</p><p>プログラム制御マクロ</p><p><strong>説明</strong>:</p><p>標準マクロによって定義されている繰り返しマクロ、 while〜wend、do〜until、for〜next間のループから抜け出します。 現在以降の繰り返しブロック内は実行せずに、ループの次にある命令から再開されます。</p><p><strong>参照</strong>:</p><ul><li>_continue</li><li>while</li><li>wend</li><li>do</li><li>until</li><li>for</li><li>next</li></ul><h2 id="foreach" tabindex="-1">foreach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;foreach {#foreach}&quot;">​</a></h2><p>変数の要素数だけ繰り返す</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>foreach p1
</code></pre><ul><li>p1=変数名 : ループの対象となる変数</li></ul><p><strong>説明</strong>:</p><p>配列変数に格納されている要素の数だけ繰り返しを行ないます。 foreachは、repeat命令と同様にループ開始場所に記述し、 ループの終了場所にloop命令を記述します。 repeat命令との違いは、指定された配列変数の要素数が繰り返し回数になる点と、モジュール型変数の場合には、delmod命令で削除された要素はループ内容を実行しないという点です。</p><p>例 :</p><pre><code>dim a,10
foreach a
mes &quot;#&quot;+cnt+&quot;:&quot;+a.cnt
loop
</code></pre><p>ループの中で、システム変数cntを配列要素として指定することで、 すべての要素を繰り返し実行させるような処理を簡潔に書くことができます。 また、break、continue命令もrepeat命令使用時と同じように機能します。</p><p><strong>参照</strong>:</p><ul><li>repeat</li><li>loop</li><li>break</li><li>continue</li></ul><h2 id="oncmd" tabindex="-1">oncmd <a class="header-anchor" href="#oncmd" aria-label="Permalink to &quot;oncmd {#oncmd}&quot;">​</a></h2><p>Windowsメッセージ割り込み実行指定</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>パラメーター</strong>:</p><pre><code>oncmd goto/gosub *label,p1
</code></pre><ul><li>*label : ラベル名</li><li>p1 : メッセージID</li></ul><p><strong>説明</strong>:</p><p>指定されたウィンドウメッセージが送られた時に、自動的にジャンプする場所を指定します。</p><p>oncmdの後に続けて、gotoまたはgosubキーワードを指定してからラベルを記述します。 gotoの場合には、単純なプログラムジャンプ。 gosubの場合はサブルーチンジャンプを行ないます。 goto/gosubキーワードを省略した場合には、gotoキーワードと同等の動作になります。</p><p>oncmd命令でラベルを指定すると、それ以降はHSPのウィンドウに対してp1のメッセージが送られた時に*labelで指定したラベルにジャンプします。 oncmd命令は、現在の操作先ウィンドウのみが対象になります。 複数のウィンドウを作成している場合は、 ウィンドウごとにoncmd命令による登録が可能です。</p><p>既に登録されているウィンドウメッセージが指定された場合は、以前の登録が無効になります。 また、割り込みの登録は、ウィンドウの初期化とは同期していません。 一度登録された割り込みは、アプリケーションが終了するまで有効になります。</p><p>割り込みジャンプは、stop命令および、wait、 await命令で停止している時に割り込みを受け付けてジャンプを行います。 また、割り込みによりジャンプを行なった後はシステム変数iparam、wparam、lparamがセットされます。 割り込みが発生したウィンドウIDは、 ginfo関数により取得することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">割り込み要因 | iparam       | wparam | lparam</span></span>
<span class="line"><span style="color:#A6ACCD;"> ---------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">   oncmd        | メッセージID | wParam | lParam</span></span></code></pre></div><p>システム変数iparamには、送信されたメッセージIDが代入されます。 また、wparam,lparamはWindowsメッセージとして渡されたパラメータがそのまま格納されています。 割り込みの設定で、 gosubキーワードによるサブルーチンジャンプが発生した場合は、return命令により戻り値を設定することが可能です。 「return 数値」で、ウィンドウプロシージャーが返す値を指定します。 return命令にパラメーターを指定しなかった場合には、デフォルトのウインドゥプロシージャーに処理が渡されます。</p><p>イベント割り込み実行の一時的なON/OFFをすることも可能です。</p><pre><code>oncmd 0
</code></pre><p>で一時的に割り込みを停止します。</p><pre><code>oncmd 1
</code></pre><p>で一時停止した割り込みを再開させることができます。</p><p><strong>参照</strong>:</p><ul><li>onkey</li><li>onclick</li><li>onexit</li><li>onerror</li></ul><h2 id="else" tabindex="-1">else <a class="header-anchor" href="#else" aria-label="Permalink to &quot;else {#else}&quot;">​</a></h2><p>条件を満たしていなければその行の命令を実行</p><p><strong>グループ</strong>:</p><p>プログラム制御命令</p><p><strong>説明</strong>:</p><p>if命令と組み合わせて使用します。 詳しくはif命令の解説を参照してください。</p><p><strong>例</strong>:</p><pre><code>if a == 0 {
	mes &quot;aは0です。&quot;
} else {
	mes &quot;aは0ではありません。&quot;
}
</code></pre><p><strong>参照</strong>:</p><ul><li>if</li></ul>`,519),l=[t];function s(r,i,c,u,g,d){return p(),a("div",null,l)}const q=o(n,[["render",s]]);export{b as __pageData,q as default};
