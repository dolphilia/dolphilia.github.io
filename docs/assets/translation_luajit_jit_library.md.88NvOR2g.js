import{_ as t,o as i,c as e,R as a}from"./chunks/framework.c2IVng1e.js";const m=JSON.parse('{"title":"jit.* Library","description":"","frontmatter":{},"headers":[],"relativePath":"translation/luajit/jit_library.md","filePath":"translation/luajit/jit_library.md","lastUpdated":null}'),s={name:"translation/luajit/jit_library.md"},o=a('<h1 id="jit-library" tabindex="-1">jit.* Library <a class="header-anchor" href="#jit-library" aria-label="Permalink to &quot;jit.* Library&quot;">​</a></h1><p>The functions in this built-in module control the behavior of the JIT compiler engine. Note that JIT-compilation is fully automatic — you probably won&#39;t need to use any of the following functions unless you have special needs.</p><h4 id="jit-on" tabindex="-1">jit.on() <a class="header-anchor" href="#jit-on" aria-label="Permalink to &quot;jit.on()&quot;">​</a></h4><h4 id="jit-off" tabindex="-1">jit.off() <a class="header-anchor" href="#jit-off" aria-label="Permalink to &quot;jit.off()&quot;">​</a></h4><p>Turns the whole JIT compiler on (default) or off. These functions are typically used with the command line options -j on or -j off.</p><h4 id="jit-flush" tabindex="-1">jit.flush() <a class="header-anchor" href="#jit-flush" aria-label="Permalink to &quot;jit.flush()&quot;">​</a></h4><p>Flushes the whole cache of compiled code.</p><h4 id="jit-on-func-true-true-false" tabindex="-1"><code>jit.on(func|true [,true|false])</code> <a class="header-anchor" href="#jit-on-func-true-true-false" aria-label="Permalink to &quot;`jit.on(func|true [,true|false])`&quot;">​</a></h4><h4 id="jit-off-func-true-true-false" tabindex="-1"><code>jit.off(func|true [,true|false])</code> <a class="header-anchor" href="#jit-off-func-true-true-false" aria-label="Permalink to &quot;`jit.off(func|true [,true|false])`&quot;">​</a></h4><h4 id="jit-flush-func-true-true-false" tabindex="-1"><code>jit.flush(func|true [,true|false])</code> <a class="header-anchor" href="#jit-flush-func-true-true-false" aria-label="Permalink to &quot;`jit.flush(func|true [,true|false])`&quot;">​</a></h4><p>jit.on enables JIT compilation for a Lua function (this is the default).</p><p>jit.off disables JIT compilation for a Lua function and flushes any already compiled code from the code cache.</p><p>jit.flush flushes the code, but doesn&#39;t affect the enable/disable status.</p><p>The current function, i.e. the Lua function calling this library function, can also be specified by passing true as the first argument.</p><p>If the second argument is true, JIT compilation is also enabled, disabled or flushed recursively for all sub-functions of a function. With false only the sub-functions are affected.</p><p>The jit.on and jit.off functions only set a flag which is checked when the function is about to be compiled. They do not trigger immediate compilation.</p><p>Typical usage is jit.off(true, true) in the main chunk of a module to turn off JIT compilation for the whole module for debugging purposes.</p><h4 id="jit-flush-tr" tabindex="-1"><code>jit.flush(tr)</code> <a class="header-anchor" href="#jit-flush-tr" aria-label="Permalink to &quot;`jit.flush(tr)`&quot;">​</a></h4><p>Flushes the root trace, specified by its number, and all of its side traces from the cache. The code for the trace will be retained as long as there are any other traces which link to it.</p><h4 id="status-jit-status" tabindex="-1">status, ... = jit.status() <a class="header-anchor" href="#status-jit-status" aria-label="Permalink to &quot;status, ... = jit.status()&quot;">​</a></h4><p>Returns the current status of the JIT compiler. The first result is either true or false if the JIT compiler is turned on or off. The remaining results are strings for CPU-specific features and enabled optimizations.</p><h4 id="jit-version" tabindex="-1">jit.version <a class="header-anchor" href="#jit-version" aria-label="Permalink to &quot;jit.version&quot;">​</a></h4><p>Contains the LuaJIT version string.</p><h4 id="jit-version-num" tabindex="-1">jit.version_num <a class="header-anchor" href="#jit-version-num" aria-label="Permalink to &quot;jit.version_num&quot;">​</a></h4><p>Contains the version number of the LuaJIT core. Version xx.yy.zz is represented by the decimal number xxyyzz.</p><p>DEPRECATED after the switch to rolling releases. zz is frozen at 99.</p><h4 id="jit-os" tabindex="-1">jit.os <a class="header-anchor" href="#jit-os" aria-label="Permalink to &quot;jit.os&quot;">​</a></h4><p>Contains the target OS name: &quot;Windows&quot;, &quot;Linux&quot;, &quot;OSX&quot;, &quot;BSD&quot;, &quot;POSIX&quot; or &quot;Other&quot;.</p><h4 id="jit-arch" tabindex="-1">jit.arch <a class="header-anchor" href="#jit-arch" aria-label="Permalink to &quot;jit.arch&quot;">​</a></h4><p>Contains the target architecture name: &quot;x86&quot;, &quot;x64&quot;, &quot;arm&quot;, &quot;arm64&quot;, &quot;arm64be&quot;, &quot;ppc&quot;, &quot;mips&quot;, &quot;mipsel&quot;, &quot;mips64&quot;, &quot;mips64el&quot;, &quot;mips64r6&quot;, &quot;mips64r6el&quot;.</p><h2 id="jit-opt-—-jit-compiler-optimization-control" tabindex="-1">jit.opt.* — JIT compiler optimization control <a class="header-anchor" href="#jit-opt-—-jit-compiler-optimization-control" aria-label="Permalink to &quot;jit.opt.* — JIT compiler optimization control&quot;">​</a></h2><p>This submodule provides the backend for the -O command line option. You can also use it programmatically, e.g.:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- same as -O2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-dce&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hotloop=10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hotexit=2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Unlike in LuaJIT 1.x, the module is built-in and optimization is turned on by default! It&#39;s no longer necessary to run require(&quot;jit.opt&quot;).start(), which was one of the ways to enable optimization.</p><h2 id="jit-util-—-jit-compiler-introspection" tabindex="-1">jit.util.* — JIT compiler introspection <a class="header-anchor" href="#jit-util-—-jit-compiler-introspection" aria-label="Permalink to &quot;jit.util.* — JIT compiler introspection&quot;">​</a></h2><p>This submodule holds functions to introspect the bytecode, generated traces, the IR and the generated machine code. The functionality provided by this module is still in flux and therefore undocumented.</p><p>The debug modules -jbc, -jv and -jdump make extensive use of these functions. Please check out their source code, if you want to know more.</p>',37),n=[o];function r(l,h,u,c,p,d){return i(),e("div",null,n)}const k=t(s,[["render",r]]);export{m as __pageData,k as default};
