import{_ as s,c as a,o as n,a as l}from"./app.e18c80f2.js";const A=JSON.parse('{"title":"FEATURE OVERVIEW","description":"","frontmatter":{},"headers":[],"relativePath":"translation/sokol/shape.md","lastUpdated":1676126774000}'),p={name:"translation/sokol/shape.md"},e=l(`<p>sokol_shape.h -- create simple primitive shapes for sokol_gfx.h</p><p>Project URL: <a href="https://github.com/floooh/sokol" target="_blank" rel="noreferrer">https://github.com/floooh/sokol</a></p><p>Do this: #define SOKOL_IMPL or #define SOKOL_SHAPE_IMPL before you include this file in <em>one</em> C or C++ file to create the implementation.</p><p>Include the following headers before including sokol_shape.h:</p><pre><code>sokol_gfx.h
</code></pre><p>...optionally provide the following macros to override defaults:</p><p>SOKOL_ASSERT(c) - your own assert macro (default: assert(c)) SOKOL_SHAPE_API_DECL- public function declaration prefix (default: extern) SOKOL_API_DECL - same as SOKOL_SHAPE_API_DECL SOKOL_API_IMPL - public function implementation prefix (default: -)</p><p>If sokol_shape.h is compiled as a DLL, define the following before including the declaration or implementation:</p><p>SOKOL_DLL</p><p>On Windows, SOKOL_DLL will define SOKOL_SHAPE_API_DECL as __declspec(dllexport) or __declspec(dllimport) as needed.</p><h1 id="feature-overview" tabindex="-1">FEATURE OVERVIEW <a class="header-anchor" href="#feature-overview" aria-hidden="true">#</a></h1><p>sokol_shape.h creates vertices and indices for simple shapes and builds structs which can be plugged into sokol-gfx resource creation functions:</p><p>The following shape types are supported:</p><pre><code>- plane
- cube
- sphere (with poles, not geodesic)
- cylinder
- torus (donut)
</code></pre><p>Generated vertices look like this:</p><pre><code>typedef struct sshape_vertex_t {
    float x, y, z;
    uint32_t normal;        // packed normal as BYTE4N
    uint16_t u, v;          // packed uv coords as USHORT2N
    uint32_t color;         // packed color as UBYTE4N (r,g,b,a);
} sshape_vertex_t;
</code></pre><p>Indices are generally 16-bits wide (SG_INDEXTYPE_UINT16) and the indices are written as triangle-lists (SG_PRIMITIVETYPE_TRIANGLES).</p><h1 id="examples" tabindex="-1">EXAMPLES: <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h1><p>Create multiple shapes into the same vertex- and index-buffer and render with separate draw calls:</p><p><a href="https://github.com/floooh/sokol-samples/blob/master/sapp/shapes-sapp.c" target="_blank" rel="noreferrer">https://github.com/floooh/sokol-samples/blob/master/sapp/shapes-sapp.c</a></p><p>Same as the above, but pre-transform shapes and merge them into a single shape that&#39;s rendered with a single draw call.</p><p><a href="https://github.com/floooh/sokol-samples/blob/master/sapp/shapes-transform-sapp.c" target="_blank" rel="noreferrer">https://github.com/floooh/sokol-samples/blob/master/sapp/shapes-transform-sapp.c</a></p><h1 id="step-by-step" tabindex="-1">STEP-BY-STEP: <a class="header-anchor" href="#step-by-step" aria-hidden="true">#</a></h1><p>Setup an sshape_buffer_t struct with pointers to memory buffers where generated vertices and indices will be written to:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_vertex_t</span><span style="color:#A6ACCD;"> vertices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">512</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> indices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    .vertices </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        .buffer </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">SSHAPE_RANGE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vertices</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    .indices </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        .buffer </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">SSHAPE_RANGE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">indices</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>To find out how big those memory buffers must be (in case you want to allocate dynamically) call the following functions:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_plane_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">tiles</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_box_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">tiles</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_sphere_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">slices</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stacks</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_cylinder_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">slices</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">stacks</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_torus_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sides</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">rings</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>The returned sshape_sizes_t struct contains vertex- and index-counts as well as the equivalent buffer sizes in bytes. For instance:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_sizes_t</span><span style="color:#A6ACCD;"> sizes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_sphere_sizes</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> num_vertices </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sizes.vertices.num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> num_indices </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sizes.indices.num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> vertex_buffer_size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sizes.vertices.size</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> index_buffer_size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sizes.indices.size</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>With the sshape_buffer_t struct that was setup earlier, call any of the shape-builder functions:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_plane</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_plane_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_box</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_box_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_sphere</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_sphere_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_cylinder</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_cylinder_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_torus</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_torus_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>Note how the sshape_buffer_t struct is both an input value and the return value. This can be used to append multiple shapes into the same vertex- and index-buffers (more on this later).</p><p>The second argument is a struct which holds creation parameters.</p><p>For instance to build a sphere with radius 2, 36 &quot;cake slices&quot; and 12 stacks:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_sphere</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;(</span><span style="color:#FFCB6B;">sshape_sphere_t</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    .radius </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2.0f</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .slices </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .stacks </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p>If the provided buffers are big enough to hold all generated vertices and indices, the &quot;valid&quot; field in the result will be true:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buf.valid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>The shape creation parameters have &quot;useful defaults&quot;, refer to the actual C struct declarations below to look up those defaults.</p><p>You can also provide additional creation parameters, like a common vertex color, a debug-helper to randomize colors, tell the shape builder function to merge the new shape with the previous shape into the same draw-element-range, or a 4x4 transform matrix to move, rotate and scale the generated vertices:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_sphere</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;(</span><span style="color:#FFCB6B;">sshape_sphere_t</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    .radius </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2.0f</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .slices </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    .stacks </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// merge with previous shape into a single element-range</span></span>
<span class="line"><span style="color:#F07178;">    .merge </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// set vertex color to red+opaque</span></span>
<span class="line"><span style="color:#F07178;">    .color </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_color_4f</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// set position to y = 2.0</span></span>
<span class="line"><span style="color:#F07178;">    .transform </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        .m </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.0f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.0f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">buf.valid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>The following helper functions can be used to build a packed color value or to convert from external matrix types:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_color_4f</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_color_3f</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_color_4b</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_color_3b</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint8_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_mat4_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_mat4</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_mat4_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_mat4_transpose</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"></span></code></pre></div><p>After the shape builder function has been called, the following functions are used to extract the build result for plugging into sokol_gfx.h:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_element_range_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_element_range</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer_desc </span><span style="color:#82AAFF;">sshape_vertex_buffer_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer_desc </span><span style="color:#82AAFF;">sshape_index_buffer_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer_layout_desc </span><span style="color:#82AAFF;">sshape_buffer_layout_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_vertex_attr_desc </span><span style="color:#82AAFF;">sshape_position_attr_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_vertex_attr_desc </span><span style="color:#82AAFF;">sshape_normal_attr_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_vertex_attr_desc </span><span style="color:#82AAFF;">sshape_texcoord_attr_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_vertex_attr_desc </span><span style="color:#82AAFF;">sshape_color_attr_desc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>The sshape_element_range_t struct contains the base-index and number of indices which can be plugged into the sg_draw() call:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_element_range_t</span><span style="color:#A6ACCD;"> elms </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_element_range</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#82AAFF;">sg_draw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">elms.base_element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> elms.num_elements</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>To create sokol-gfx vertex- and index-buffers from the generated shape data:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// create sokol-gfx vertex buffer</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer_desc vbuf_desc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_vertex_buffer_desc</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer vbuf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sg_make_buffer</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">vbuf_desc</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// create sokol-gfx index buffer</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer_desc ibuf_desc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_index_buffer_desc</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_buffer ibuf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sg_make_buffer</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">ibuf_desc</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>The remaining functions are used to populate the vertex-layout item in sg_pipeline_desc, note that these functions don&#39;t depend on the created geometry, they always return the same result:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sg_pipeline pip </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sg_make_pipeline</span><span style="color:#89DDFF;">(&amp;(</span><span style="color:#A6ACCD;">sg_pipeline_desc</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    .layout </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        .</span><span style="color:#A6ACCD;">buffers</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_buffer_layout_desc</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">        .attrs </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_position_attr_desc</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ssape_normal_attr_desc</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_texcoord_attr_desc</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_color_attr_desc</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p>Note that you don&#39;t have to use all generated vertex attributes in the pipeline&#39;s vertex layout, the sg_buffer_layout_desc struct returned by sshape_buffer_layout_desc() contains the correct vertex stride to skip vertex components.</p><h1 id="writing-multiple-shapes-into-the-same-buffer" tabindex="-1">WRITING MULTIPLE SHAPES INTO THE SAME BUFFER <a class="header-anchor" href="#writing-multiple-shapes-into-the-same-buffer" aria-hidden="true">#</a></h1><p>You can merge multiple shapes into the same vertex- and index-buffers and either render them as a single shape, or in separate draw calls.</p><p>To build a single shape made of two cubes which can be rendered in a single draw-call:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sshape_vertex_t vertices[128];</span></span>
<span class="line"><span style="color:#A6ACCD;">uint16_t indices[16];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sshape_buffer_t buf = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    .vertices.buffer = SSHAPE_RANGE(vertices),</span></span>
<span class="line"><span style="color:#A6ACCD;">    .indices.buffer  = SSHAPE_RANGE(indices)</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// first cube at pos x=-2.0 (with default size of 1x1x1)</span></span>
<span class="line"><span style="color:#A6ACCD;">buf = sshape_build_cube(&amp;buf, &amp;(sshape_box_t){</span></span>
<span class="line"><span style="color:#A6ACCD;">    .transform = {</span></span>
<span class="line"><span style="color:#A6ACCD;">        .m = {</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 1.0f, 0.0f, 0.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 0.0f, 1.0f, 0.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 0.0f, 0.0f, 1.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            {-2.0f, 0.0f, 0.0f, 1.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">// ...and append another cube at pos pos=+1.0</span></span>
<span class="line"><span style="color:#A6ACCD;">// NOTE the .merge = true, this tells the shape builder</span></span>
<span class="line"><span style="color:#A6ACCD;">// function to not advance the current shape start offset</span></span>
<span class="line"><span style="color:#A6ACCD;">buf = sshape_build_cube(&amp;buf, &amp;(sshape_box_t){</span></span>
<span class="line"><span style="color:#A6ACCD;">    .merge = true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    .transform = {</span></span>
<span class="line"><span style="color:#A6ACCD;">        .m = {</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 1.0f, 0.0f, 0.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 0.0f, 1.0f, 0.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            { 0.0f, 0.0f, 1.0f, 0.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">            {-2.0f, 0.0f, 0.0f, 1.0f },</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">assert(buf.valid);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// skipping buffer- and pipeline-creation...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sshape_element_range_t elms = sshape_element_range(&amp;buf);</span></span>
<span class="line"><span style="color:#A6ACCD;">sg_draw(elms.base_element, elms.num_elements, 1);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>To render the two cubes in separate draw-calls, the element-ranges used in the sg_draw() calls must be captured right after calling the builder-functions:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sshape_vertex_t</span><span style="color:#A6ACCD;"> vertices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> indices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_buffer_t</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    .</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">SSHAPE_RANGE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vertices</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">    .</span><span style="color:#A6ACCD;">indices</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">SSHAPE_RANGE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">indices</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// build a red cube...</span></span>
<span class="line"><span style="color:#A6ACCD;">buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_cube</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;(</span><span style="color:#FFCB6B;">sshape_box_t</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    .color </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_color_3b</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_element_range_t</span><span style="color:#A6ACCD;"> red_cube </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_element_range</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// append a green cube to the same vertex-/index-buffer:</span></span>
<span class="line"><span style="color:#A6ACCD;">buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_build_cube</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">bud</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">sshape_box_t</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    .color </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sshape_color_3b</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">sshape_element_range_t</span><span style="color:#A6ACCD;"> green_cube </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sshape_element_range</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// skipping buffer- and pipeline-creation...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">sg_draw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">red_cube.base_element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> red_cube.num_elements</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">sg_draw</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">green_cube.base_element</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> green_cube.num_elements</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>...that&#39;s about all 😃</p><h1 id="license" tabindex="-1">LICENSE <a class="header-anchor" href="#license" aria-hidden="true">#</a></h1><p>zlib/libpng license</p><p>Copyright (c) 2020 Andre Weissflog</p><p>This software is provided &#39;as-is&#39;, without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.</p><p>Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:</p><pre><code>1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software in a
product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not
be misrepresented as being the original software.

3. This notice may not be removed or altered from any source
distribution.
</code></pre>`,64),o=[e];function t(c,r,y,F,i,D){return n(),a("div",null,o)}const f=s(p,[["render",t]]);export{A as __pageData,f as default};
