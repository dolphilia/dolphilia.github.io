import{_ as c,D as i,o as p,c as m,k as n,a as t,I as e,w as a,R as o}from"./chunks/framework.c2IVng1e.js";const B=JSON.parse('{"title":"Status","description":"","frontmatter":{},"headers":[],"relativePath":"translation/luajit/status.md","filePath":"translation/luajit/status.md","lastUpdated":null}'),u={name:"translation/luajit/status.md"},_=n("h1",{id:"status",tabindex:"-1"},[t("Status "),n("a",{class:"header-anchor",href:"#status","aria-label":'Permalink to "Status"'},"​")],-1),v=n("p",null,"LuaJIT is actively developed and maintained. You can follow the development progress in the git repository, the LuaJIT mailing list and the issue tracker.",-1),b=n("h2",{id:"versions-and-branches",tabindex:"-1"},[t("Versions and Branches "),n("a",{class:"header-anchor",href:"#versions-and-branches","aria-label":'Permalink to "Versions and Branches"'},"​")],-1),f=n("p",null,"Branch Maintained Breaking Changes New Features Recommended Use v2.0 bugfixes no no Compatibility only v2.1 yes no limited Production (TBA) yes yes yes Development",-1),g={class:"katex"},k={class:"katex-mathml"},P=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">maj</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord">.</span></span></span>',1),S=o('<p>The old git master branch is phased out and stays pinned to the v2.0 branch. Please follow the versioned branches instead.</p><h3 id="feature-and-maintenance-policy" tabindex="-1">Feature and Maintenance Policy <a class="header-anchor" href="#feature-and-maintenance-policy" aria-label="Permalink to &quot;Feature and Maintenance Policy&quot;">​</a></h3><ul><li>Older versions receive fixes and backports, but no new features.</li><li>Only recent versions receive new features.</li><li>Production-use branches receive only non-breaking changes and limited, upwards-compatible features.</li><li>Development-use branches also have breaking changes. Any commit may break API, ABI and bytecode compatibility.</li><li>TBA = to-be-announced here, when a new development branch will open.</li></ul><h2 id="release-policy" tabindex="-1">Release Policy <a class="header-anchor" href="#release-policy" aria-label="Permalink to &quot;Release Policy&quot;">​</a></h2><p>LuaJIT uses rolling releases. The authoritative origin is the git repository from this site. You should regularly pull from the selected git branch to get the latest fixes and developments. No release tarballs or binaries are made available.</p>',5),y={class:"katex"},T={class:"katex-mathml"},x=o('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">maj</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord">.</span></span></span>',1),E=o('<div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">luajit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>If you only have a version number and need to know the related commit, then fill in the parts of the version number in this command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$major</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$minor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$timestamp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span></code></pre></div><h2 id="operating-systems" tabindex="-1">Operating Systems <a class="header-anchor" href="#operating-systems" aria-label="Permalink to &quot;Operating Systems&quot;">​</a></h2><h3 id="server-desktop-and-embedded" tabindex="-1">Server, Desktop and Embedded <a class="header-anchor" href="#server-desktop-and-embedded" aria-label="Permalink to &quot;Server, Desktop and Embedded&quot;">​</a></h3><p>OS Min. Version Requirements LuaJIT Versions Linux v2.0 – *BSD v2.0 – macOS (OSX) 10.4 v2.1 – POSIX mmap, dlopen v2.0 – Windows 7 x86 or x64, ARM64: TBA v2.0 –</p><h3 id="mobile" tabindex="-1">Mobile <a class="header-anchor" href="#mobile" aria-label="Permalink to &quot;Mobile&quot;">​</a></h3><p>OS Min. Version Requirements LuaJIT Versions Android 4.0 Recent Android NDK v2.0 – iOS 3.0 Xcode iOS SDK v2.1 –</p><h3 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;Console&quot;">​</a></h3><p>OS Min. Version Requirements LuaJIT Versions PS3 PS3 SDK v2.0 – v2.1 EOL PS4 PS4 SDK (ORBIS) v2.0 – PS5 PS5 SDK (PROSPERO) v2.1 – PS Vita PS Vita SDK (PSP2) v2.0 – v2.1 EOL Xbox 360 Xbox 360 SDK (XEDK) v2.0 – v2.1 EOL Xbox One Xbox One SDK (DURANGO) v2.1 – Nintendo Switch NintendoSDK + NX Addon v2.1 –</p><p>The codebase has compatibility defines for some more systems, but without official support.</p><h2 id="cpu-architectures" tabindex="-1">CPU Architectures <a class="header-anchor" href="#cpu-architectures" aria-label="Permalink to &quot;CPU Architectures&quot;">​</a></h2><p>CPU Bits Endianess FP Requirements LuaJIT Versions x86 32 little FPU v2.1+: SSE2 v2.0 – x64 64 little FPU v2.0 – ARM 32 little FPU + soft ARMv5+, ARM9E+ v2.0 – ARM64 64 little + big FPU v2.1 – PPC32 32 big FPU + soft v2.0 – v2.1 EOL PPC/e500 v2 32 big FPU v2.0 EOL MIPS32 r1-r5 32 big + little FPU + soft v2.0 – MIPS64 r1-r5 64 big + little FPU + soft v2.1 – MIPS64 r6 64 big + little FPU + soft v2.1 EOL RISC-V 64 little hard RVA22+ (TBA)</p><p>There are no plans to add historic architectures or to continue support for end-of-life (EOL) architectures, for which no new CPUs are commonly available anymore. Likewise, there are no plans to support marginal and/or de-facto-dead architectures.</p>',14);function C(F,w,A,I,O,V){const s=i("mi"),l=i("mrow"),r=i("annotation"),h=i("semantics"),d=i("math");return p(),m("div",null,[_,v,b,f,n("p",null,[t("Each versioned branch corresponds to a "),n("span",g,[n("span",k,[e(d,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[e(h,null,{default:a(()=>[e(l,null,{default:a(()=>[e(s,null,{default:a(()=>[t("m")]),_:1}),e(s,null,{default:a(()=>[t("a")]),_:1}),e(s,null,{default:a(()=>[t("j")]),_:1}),e(s,null,{default:a(()=>[t("o")]),_:1}),e(s,null,{default:a(()=>[t("r")]),_:1}),e(s,{mathvariant:"normal"},{default:a(()=>[t(".")]),_:1})]),_:1}),e(r,{encoding:"application/x-tex"},{default:a(()=>[t("major.")]),_:1})]),_:1})]),_:1})]),P]),t("minor version of LuaJIT.")]),S,n("p",null,[t("Instead of manual increments for each release, the build process uses the POSIX time stamp of the latest commit as the release number of the semantic version. The full version number in the format "),n("span",y,[n("span",T,[e(d,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[e(h,null,{default:a(()=>[e(l,null,{default:a(()=>[e(s,null,{default:a(()=>[t("m")]),_:1}),e(s,null,{default:a(()=>[t("a")]),_:1}),e(s,null,{default:a(()=>[t("j")]),_:1}),e(s,null,{default:a(()=>[t("o")]),_:1}),e(s,null,{default:a(()=>[t("r")]),_:1}),e(s,{mathvariant:"normal"},{default:a(()=>[t(".")]),_:1})]),_:1}),e(r,{encoding:"application/x-tex"},{default:a(()=>[t("major.")]),_:1})]),_:1})]),_:1})]),x]),t("minor.$timestamp can be shown with:")]),E])}const D=c(u,[["render",C]]);export{B as __pageData,D as default};
