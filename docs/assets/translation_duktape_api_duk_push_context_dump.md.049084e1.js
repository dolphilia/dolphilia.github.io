import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.92ce8a2a.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_push_context_dump.md","filePath":"translation/duktape/api/duk_push_context_dump.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_push_context_dump.md"},t=p(`<h2 id="duk-push-context-dump" tabindex="-1">duk_push_context_dump() <a class="header-anchor" href="#duk-push-context-dump" aria-label="Permalink to &quot;duk_push_context_dump()&quot;">​</a></h2><p>1.0.0 stack debug</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_push_context_dump</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_push_context_dump</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | -&gt; | ... | str |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>コンテキスト ctx の現在のアクティブ化の状態を要約した一行文字列をプッシュします。これは Duktape/C コードのデバッグに有用であり、実稼働環境での使用は意図していない。</p><p>正確なダンプ内容はバージョンに依存します。現在のフォーマットでは、スタック・トップ（スタック上の要素数）を含み、現在の要素をJXフォーマット（Duktapeのカスタム拡張JSONフォーマット）の値の配列としてプリントアウトします。以下の例では、次のようなものがプリントされます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ctx:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">top=</span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stack=[</span><span style="color:#79B8FF;">123</span><span style="color:#9ECBFF;">,&quot;foo&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ctx:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">top=</span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stack=[</span><span style="color:#005CC5;">123</span><span style="color:#032F62;">,&quot;foo&quot;]</span></span></code></pre></div><p>プロダクションコードにダンプコールを残しておくべきではありません。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_context_dump</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_context_dump</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div>`,13),l=[t];function e(c,r,d,i,u,y){return a(),n("div",null,l)}const E=s(o,[["render",e]]);export{h as __pageData,E as default};
