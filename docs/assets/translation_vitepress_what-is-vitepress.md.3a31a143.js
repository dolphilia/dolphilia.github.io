import{_ as e,o as a,c as s,Q as t}from"./chunks/framework.92ce8a2a.js";const P=JSON.parse('{"title":"VitePressとは？","description":"","frontmatter":{},"headers":[],"relativePath":"translation/vitepress/what-is-vitepress.md","filePath":"translation/vitepress/what-is-vitepress.md","lastUpdated":1676126774000}'),r={name:"translation/vitepress/what-is-vitepress.md"},i=t('<h1 id="vitepressとは" tabindex="-1">VitePressとは？ <a class="header-anchor" href="#vitepressとは" aria-label="Permalink to &quot;VitePressとは？&quot;">​</a></h1><p>VitePressはVuePressの弟分でViteの上に構築されています。</p><blockquote><p>警告: VitePressは現在アルファ版です。すでにドキュメントを作成するのに適した状態になっていますが、マイナーリリースの間に設定やテーマ設定のAPIが変更される可能性があります。</p></blockquote><h2 id="モチベーション" tabindex="-1">モチベーション <a class="header-anchor" href="#モチベーション" aria-label="Permalink to &quot;モチベーション&quot;">​</a></h2><p>私たちはVuePress v1を愛用しています。しかし、Webpackの上に構築されており、数ページのシンプルなdocサイトでも開発サーバーを立ち上げるのにかかる時間は耐え難いものになっています。HMRの更新でさえブラウザに反映されるのに数秒かかることもあります。</p><p>これはVuePress v1がWebpackアプリであることが根本的な原因です。たった2ページでもWebpackプロジェクト（テーマのソースファイルをすべて含む）がコンパイルされているのです。プロジェクトが多くのページを持つ場合はさらに悪化します。サーバーが何かを表示する前に、すべてのページが最初に完全にコンパイルされなければなりません</p><p>Viteはこれらの問題をうまく解決しています。ほぼ瞬時にサーバーを起動し、提供されるページのみをコンパイルするオンデマンドコンパイル、そして高速なHMRを備えています。さらにVuePress v1には私が長い間指摘してきたデザイン上の問題がいくつかありますが、リファクタリングが必要なため修正する時間がありませんでした。</p><p>今、ViteとVue 3で『Vueを使った静的サイトジェネレータ』の本当の姿を考え直す時が来たのです。</p><h2 id="vuepress-v1からの改善点" tabindex="-1">VuePress v1からの改善点 <a class="header-anchor" href="#vuepress-v1からの改善点" aria-label="Permalink to &quot;VuePress v1からの改善点&quot;">​</a></h2><p>VuePress v1から改善された点がいくつかあります...</p><h3 id="vue-3を使用しています" tabindex="-1">Vue 3を使用しています <a class="header-anchor" href="#vue-3を使用しています" aria-label="Permalink to &quot;Vue 3を使用しています&quot;">​</a></h3><p>Vue 3の改良されたテンプレート静的解析を利用して、静的コンテンツを可能な限り文字列化します。静的コンテンツはJavaScriptのレンダー関数コードではなく、文字列リテラルとして送信されます。したがってJSペイロードの解析がはるかに容易になり、ハイドレーションも高速になります。</p><p>この最適化はユーザーがmarkdownコンテンツ内にVueコンポーネントを自由に混在させることが可能なまま適用されることに注目してください。コンパイラは自動的に静的・動的な分離を行うので、それについて考える必要はありません。</p><h3 id="viteを使用しています" tabindex="-1">Viteを使用しています <a class="header-anchor" href="#viteを使用しています" aria-label="Permalink to &quot;Viteを使用しています&quot;">​</a></h3><ul><li>開発サーバーの起動の高速化</li><li>ホットアップデートの高速化</li><li>ビルドの高速化 (内部でロールアップを使用)</li></ul><h3 id="ページの軽量化" tabindex="-1">ページの軽量化 <a class="header-anchor" href="#ページの軽量化" aria-label="Permalink to &quot;ページの軽量化&quot;">​</a></h3><p>Vue 3のツリーシェイクとロールアップのコード分割</p><ul><li>リクエストごとに各ページのメタデータを送信しないようにしました。これにより、ページの重みとページ数の合計が切り離され、現在のページのメタデータのみが送信されます。クライアント側のナビゲーションは、新しいページのコンポーネントとメタデータを一緒に取得します。</li><li>VitePressのニーズは非常にシンプルで特殊なので、vue-routerは使用しません。代わりにシンプルなカスタムルーター（200LOC以下）が使用されます。</li></ul><h3 id="その他の違い" tabindex="-1">その他の違い <a class="header-anchor" href="#その他の違い" aria-label="Permalink to &quot;その他の違い&quot;">​</a></h3><p>VitePressはシンプルで設定可能な部分が少ないくなっています。VitePressは現在のVuePressにある複雑さを縮小し、ミニマリストのルーツから再スタートすることを目的としています。</p><p>VitePressは未来志向です。VitePressはネイティブESモジュールのインポートをサポートするブラウザのみを対象としています。VitePressはネイティブのJavaScriptをトランスコンパイルせずに使用し、CSS変数を使用してテーマ化することを推奨しています。</p><h2 id="今後、次のvuepressとなるのでしょうか" tabindex="-1">今後、次のvuepressとなるのでしょうか？ <a class="header-anchor" href="#今後、次のvuepressとなるのでしょうか" aria-label="Permalink to &quot;今後、次のvuepressとなるのでしょうか？&quot;">​</a></h2><p>すでにvuepress-nextがあり、それがVuePressの次のメジャーバージョンとなるでしょう。VuePress v1よりも多くの改良が施されており、Viteにも対応するようになりました。</p><p>VitePressは現在のVuePressのエコシステム（主にテーマとプラグイン）と互換性がありません。VitePressはテーマ作成APIを大幅に削減し（ファイルレイアウトの規則ではなく、JavaScriptのAPIを優先）、プラグインはおそらくなし（すべてのカスタマイズはテーマで行われます）とするのが全体のアイデアです。</p><p>このトピックについては現在も議論が続いています。もし興味があればあなたの意見を聞かせてください。</p>',25),o=[i];function p(l,u,h,n,c,d){return a(),s("div",null,o)}const v=e(r,[["render",p]]);export{P as __pageData,v as default};
