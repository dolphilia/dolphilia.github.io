import{_ as s,o as l,c as a,R as o}from"./chunks/framework.320df067.js";const A=JSON.parse('{"title":"LLVMシステム入門","description":"","frontmatter":{},"headers":[],"relativePath":"translation/llvm/getting_started.md","filePath":"translation/llvm/getting_started.md","lastUpdated":1690210523000}'),n={name:"translation/llvm/getting_started.md"},p=o(`<h1 id="llvmシステム入門" tabindex="-1">LLVMシステム入門 <a class="header-anchor" href="#llvmシステム入門" aria-label="Permalink to &quot;LLVMシステム入門&quot;">​</a></h1><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>LLVMプロジェクトへようこそ！</p><p>LLVMプロジェクトには複数のコンポーネントがあります。プロジェクトの中核は &quot;LLVM &quot;と呼ばれるものです。これには、中間表現を処理してオブジェクト・ファイルに変換するために必要なツール、ライブラリ、ヘッダーファイルのすべてが含まれています。ツールには、アセンブラ、逆アセンブラ、ビットコードアナライザ、ビットコードオプティマイザが含まれる。また、基本的なリグレッション・テストも含まれている。</p><p>Cライクな言語はClangフロントエンドを使う。このコンポーネントは、C、C++、Objective C、Objective C++のコードをLLVMビットコードにコンパイルし、そこからLLVMを使ってオブジェクト・ファイルにコンパイルする。</p><p>その他のコンポーネントには、libc++ C++標準ライブラリー、LLDリンカーなどがある。</p><h2 id="ソースコードの入手とllvmのビルド" tabindex="-1">ソースコードの入手とLLVMのビルド <a class="header-anchor" href="#ソースコードの入手とllvmのビルド" aria-label="Permalink to &quot;ソースコードの入手とLLVMのビルド&quot;">​</a></h2><ol><li>LLVM（Clangのようなサブプロジェクトを含む）をチェックアウトする:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/llvm/llvm-project.git</span></span></code></pre></div><p>Windowsでは:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">core.autocrlf=</span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/llvm/llvm-project.git</span></span></code></pre></div><p>ストレージを節約し、チェックアウト時間を短縮するために、浅いクローンを行いたい場合がある。例えば、LLVMプロジェクトの最新リビジョンを取得するには</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--depth</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/llvm/llvm-project.git</span></span></code></pre></div><ol start="2"><li>LLVMとClangの設定とビルド:</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm-project</span></span>
<span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">generato</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> [options]</span></span></code></pre></div><p>一般的なビルド・システム・ジェネレーターには次のようなものがある:</p><ul><li>Ninja - Ninja のビルドファイルを生成します。ほとんどの llvm 開発者は Ninja を使っています。</li><li>Unix Makefiles - make 互換の並列 makefile を生成します。</li><li>Visual Studio - Visual Studio プロジェクトとソリューションを生成します。</li><li>Xcode - Xcodeプロジェクトを生成します。</li><li>より包括的なリストは CMake docs を参照してください。</li></ul><p>一般的なオプション:</p><ul><li><code>-DLLVM_ENABLE_PROJECTS=&#39;...&#39;</code> — 追加でビルドしたいLLVMサブプロジェクトのセミコロン区切りのリスト。clang、clang-tools-extra、lldb、lld、polly、cross-project-testsのいずれかを含めることができます。例えば、LLVM、Clang、LLDをビルドするには、<code>-DLLVM_ENABLE_PROJECTS=&quot;clang;lld&quot;</code>とします。</li><li><code>-DCMAKE_INSTALL_PREFIX=directory</code> — ディレクトリには、LLVMツールとライブラリをインストールする場所のフルパス名を指定します（デフォルトは<code>/usr/local</code>）。</li><li><code>-DCMAKE_BUILD_TYPE=type</code> — ビルドの最適化レベルとデバッグ情報を制御します。有効なオプションは Debug、Release、RelWithDebInfo、MinSizeRel です。詳細は CMAKE_BUILD_TYPE を参照してください。</li><li><code>DLLVM_ENABLE_ASSERTIONS=ON</code> — アサーション・チェックを有効にしてコンパイルする（デフォルトはDebugビルドでON、その他のビルド・タイプではOFF）。</li><li><code>DLLVM_USE_LINKER=lld</code> — あなたのシステムにlldリンカーがインストールされていれば、それを使ってリンクする。デフォルトのリンカーが遅い場合、これでリンク時間を劇的に短縮できる。</li><li><code>DLLVM_PARALLEL_{COMPILE,LINK}_JOBS=N</code> — 同時に並行して実行されるコンパイル/リンクジョブの数を制限する。リンクは大量のメモリーを使用することがあるため、これはリンクにおいて特に重要です。LLVMのビルドでメモリの問題に遭遇した場合は、同時に実行するコンパイル／リンク・ジョブの最大数を制限するように設定してみてください。</li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> [--target </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">targe</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">]</span></span></code></pre></div><p>または上記で指定したビルドシステムを直接使用する。</p><ul><li>デフォルトのターゲット (<code>cmake --build build</code> または <code>make -C build</code>) は LLVM のすべてをビルドする。</li><li>check-allターゲット（<code>ninja check-all</code>）はリグレッションテストを実行し、すべてが正常に動作することを確認します。</li><li>CMakeは各ツールとライブラリのビルドターゲットを生成し、ほとんどのLLVMサブプロジェクトは独自の <code>check-&lt;project&gt;</code> ターゲットを生成します。</li><li>シリアル・ビルドを実行すると遅くなります。速度を改善するには、並列ビルドを試してください。Ninjaではデフォルトで並列ビルドが実行されます。makeでは <code>-j NN</code> オプションを使います。NNは並列ジョブの数で、例えば利用可能なCPUの数です。</li></ul><p>LLVMのみをビルドし、他のサブプロジェクトはビルドしない、基本的なCMakeとビルド/テストの呼び出し:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=Debug</span></span>
<span class="line"><span style="color:#FFCB6B;">ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">check-llvm</span></span></code></pre></div><p>これにより、デバッグ情報を含むLLVMビルドがセットアップされ、LLVMがコンパイルされ、LLVMテストが実行される。</p><ul><li>CMakeオプションの詳細については、CMakeを参照してください。</li><li>ビルドやテストに失敗した場合は、以下を参照してください。</li></ul><p>LLVMの設定とコンパイルの詳細については、「LLVMを始める」のセクションを参照してください。ソースコード・ツリーのレイアウトについては、「ディレクトリのレイアウト」を参照してください。</p><h3 id="スタンドアローン・ビルド" tabindex="-1">スタンドアローン・ビルド <a class="header-anchor" href="#スタンドアローン・ビルド" aria-label="Permalink to &quot;スタンドアローン・ビルド&quot;">​</a></h3><p>スタンドアロン・ビルドは、あなたのシステムにすでに存在するclangやllvmライブラリのビルド済みバージョンに対してサブプロジェクトをビルドすることを可能にします。</p><p>スタンドアロンビルドを行うには、llvm-project の標準チェックアウトからソースコードを使うことができます（上で説明しました）。</p><p>スタンドアロンビルドを行うには、他のプロジェクトのスタンドアロンビルドで利用できるように適切に設定された llvm インストールが必要です。これは、ディストロが提供するLLVMインストールでもよいし、次のように自分でビルドしてもよい:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path/to/llvm-project/llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> $builddir \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_INSTALL_UTILS=ON</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DCMAKE_INSTALL_PREFIX=/path/to/llvm/install/prefix</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">other</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">options</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> $builddir </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>llvmをインストールしたら、スタンドアロンビルド用にプロジェクトを設定するために、CMakeを次のように起動します。:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path/to/llvm-project/</span><span style="color:#A6ACCD;">$subproj \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> $buildir_subproj \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_EXTERNAL_LIT=/path/to/lit</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_ROOT=/path/to/llvm/install/prefix</span></span></code></pre></div><p>注目してください：</p><ul><li>スタンドアロンビルドは、LLVMNがビルドされた元のフォルダではないフォルダで行う必要があります（<code>$builddir!=$builddir_subproj</code>）。</li><li><code>LLVM_ROOT</code>はllvmのインストール先の接頭辞を指す必要があります。例えば、llvmが<code>/usr/bin</code>と<code>/usr/lib64</code>にインストールされている場合、<code>-DLVM_ROOT=/usr/</code>を渡す必要があります。</li><li><code>LLVM_ROOT</code>オプションと<code>LLVM_EXTERNAL_LIT</code>オプションは、すべてのサブプロジェクトのスタンドアロンビルドを行うために必要です。各サブ・プロジェクトに必要なその他のオプションは、以下の表にある。</li></ul><p><code>check-$subproj</code>と<code>install</code>ビルド・ターゲットは、以下の表に記載されているサブ・プロジェクトでサポートされています。</p><table><thead><tr><th>Sub-Project</th><th>Required Sub-Directories</th><th>Required CMake Options</th></tr></thead><tbody><tr><td>llvm</td><td>llvm, cmake, third-party</td><td><code>LLVM_INSTALL_UTILS=ON</code></td></tr><tr><td>clang</td><td>clang, cmake</td><td><code>CLANG_INCLUDE_TESTS=ON</code> (Required for <code>check-clang</code> only)</td></tr><tr><td>lld</td><td>lld, cmake</td><td></td></tr></tbody></table><p>スタンドアロン <code>clang</code> のビルド例:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">build_llvm</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/build-llvm</span></span>
<span class="line"><span style="color:#A6ACCD;">build_clang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/build-clang</span></span>
<span class="line"><span style="color:#A6ACCD;">installprefix</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/install</span></span>
<span class="line"><span style="color:#A6ACCD;">llvm</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/llvm-project</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> $build_llvm</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> $installprefix</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> $llvm</span><span style="color:#C3E88D;">/llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> $build_llvm \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_INSTALL_UTILS=ON</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DCMAKE_INSTALL_PREFIX=</span><span style="color:#A6ACCD;">$installprefix</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=Release</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> $build_llvm </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-S</span><span style="color:#A6ACCD;"> $llvm</span><span style="color:#C3E88D;">/clang</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-B</span><span style="color:#A6ACCD;"> $build_clang \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_EXTERNAL_LIT=</span><span style="color:#A6ACCD;">$build_llvm</span><span style="color:#C3E88D;">/utils/lit</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">-DLLVM_ROOT=</span><span style="color:#A6ACCD;">$installprefix</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> $build_clang</span></span></code></pre></div><h2 id="必要条件" tabindex="-1">必要条件 <a class="header-anchor" href="#必要条件" aria-label="Permalink to &quot;必要条件&quot;">​</a></h2><p>LLVMシステムを使い始める前に、以下の要件を確認してください。どのようなハードウェアとソフトウェアが必要かを前もって知っておくことで、トラブルを避けることができるかもしれません。</p><h3 id="ハードウェア" tabindex="-1">ハードウェア <a class="header-anchor" href="#ハードウェア" aria-label="Permalink to &quot;ハードウェア&quot;">​</a></h3><p>LLVMは以下のホスト・プラットフォームで動作することが知られている:</p><table><thead><tr><th>OS</th><th>Arch</th><th>Compilers</th></tr></thead><tbody><tr><td>Linux</td><td>x86(1)</td><td>GCC, Clang</td></tr><tr><td>Linux</td><td>amd64</td><td>GCC, Clang</td></tr><tr><td>Linux</td><td>ARM</td><td>GCC, Clang</td></tr><tr><td>Linux</td><td>Mips</td><td>GCC, Clang</td></tr><tr><td>Linux</td><td>PowerPC</td><td>GCC, Clang</td></tr><tr><td>Linux</td><td>SystemZ</td><td>GCC, Clang</td></tr><tr><td>Solaris</td><td>V9 (Ultrasparc)</td><td>GCC</td></tr><tr><td>DragonFlyBSD</td><td>amd64</td><td>GCC, Clang</td></tr><tr><td>FreeBSD</td><td>x86(1)</td><td>GCC, Clang</td></tr><tr><td>FreeBSD</td><td>amd64</td><td>GCC, Clang</td></tr><tr><td>NetBSD</td><td>x86(1)</td><td>GCC, Clang</td></tr><tr><td>NetBSD</td><td>amd64</td><td>GCC, Clang</td></tr><tr><td>OpenBSD</td><td>x86(1)</td><td>GCC, Clang</td></tr><tr><td>OpenBSD</td><td>amd64</td><td>GCC, Clang</td></tr><tr><td>macOS(2)</td><td>PowerPC</td><td>GCC</td></tr><tr><td>macOS</td><td>x86</td><td>GCC, Clang</td></tr><tr><td>Cygwin/Win32</td><td>x86(1, 3)</td><td>GCC</td></tr><tr><td>Windows</td><td>x86(1)</td><td>Visual Studio</td></tr><tr><td>Windows x64</td><td>x86-64</td><td>Visual Studio</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">備考</p><ol><li>Pentiumプロセッサー以上でコード生成をサポート</li><li>コード生成は32ビットABIのみサポート</li><li>Win32ベースのシステムでLLVMモジュールを使用するには、<code>-DBUILD_SHARED_LIBS=On</code>でLLVMを設定することができます。</li></ol></div><p>デバッグビルドには多くの時間とディスク容量が必要であることに注意してください。LLVMのみのビルドの場合、1～3GB程度のスペースが必要です。LLVMとClangの完全なビルドには、約15～20GBのディスク・スペースが必要です。正確な必要容量はシステムによって異なります。(これは、すべてのデバッグ情報と、ライブラリーが複数のツールに静的にリンクされているためです)。</p><p>スペースに制約がある場合は、選択したツールまたは選択したターゲットのみをビルドすることができます。Releaseビルドでは、かなり少ないスペースで済みます。</p><p>LLVMスイートは他のプラットフォームでもコンパイルできる可能性がありますが、その保証はありません。コンパイルが成功すれば、LLVMユーティリティはLLVMビットコードをアセンブル、逆アセンブル、解析、最適化できるはずです。コード生成も同様に動作するはずだが、生成されたネイティブ・コードはあなたのプラットフォームでは動作しないかもしれない。</p><h3 id="ソフトウェア" tabindex="-1">ソフトウェア <a class="header-anchor" href="#ソフトウェア" aria-label="Permalink to &quot;ソフトウェア&quot;">​</a></h3><p>LLVMをコンパイルするには、いくつかのソフトウェア・パッケージがインストールされている必要があります。以下の表は、それらの必要なパッケージの一覧です。Packageの列は、LLVMが依存するソフトウェア・パッケージの通常の名前です。Versionの列には、パッケージの「動作確認済み」バージョンが記載されています。Notes列には、LLVMがそのパッケージをどのように使用するか、その他の詳細が記載されています。</p><table><thead><tr><th>Package</th><th>Version</th><th>Notes</th></tr></thead><tbody><tr><td>CMake</td><td><code>&gt;=3.20.0</code></td><td>Makefile/workspace generator</td></tr><tr><td>GCC</td><td><code>&gt;=7.1.0</code></td><td>C/C++ compiler(1)</td></tr><tr><td>python</td><td><code>&gt;=3.6</code></td><td>Automated test suite(2)</td></tr><tr><td>zlib</td><td><code>&gt;=1.2.3.4</code></td><td>Compression library(3)</td></tr><tr><td>GNU Make</td><td><code>3.79</code>, <code>3.79.1</code></td><td>Makefile/build processor(4)</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">備考</p><ol><li>必要なのはC言語とC++言語だけなので、LLVMの目的のために他の言語をビルドする必要はない。具体的なバージョン情報については以下を参照のこと。</li><li>llvm/test\`ディレクトリで自動テストスイートを実行したい場合にのみ必要。</li><li>オプションで、選択したLLVMツールに圧縮/解凍機能を追加します。</li><li>オプションで、CMake がサポートしている他のビルドツールを使うことができます。</li></ol></div><p>さらに、コンパイル・ホストには、通常のUnixユーティリティの数々があることが期待される。具体的には:</p><ul><li>ar — アーカイブ・ライブラリー・ビルダー</li><li>bzip2 — ディストリビューション生成用bzip2コマンド</li><li>bunzip2 — bunzip2コマンドによる配布チェック</li><li>chmod — ファイルのパーミッションを変更する</li><li>cat — 出力連結ユーティリティ</li><li>cp — コピーファイル</li><li>date — 現在の日時を表示する</li><li>echo — 標準出力にプリントする</li><li>egrep — 拡張正規表現検索ユーティリティ</li><li>find — ファイルシステム内のファイル/ディレクトリを検索する</li><li>grep — 正規表現検索ユーティリティ</li><li>gzip — 配信生成用gzipコマンド</li><li>gunzip — 配布チェックのためのgunzipコマンド</li><li>install — インストール・ディレクトリ/ファイル</li><li>mkdir — ディレクトリを作成する</li><li>mv — ファイルを移動する</li><li>ranlib — アーカイブライブラリ用シンボルテーブルビルダー</li><li>rm — ファイルとディレクトリを削除する</li><li>sed — 出力を変換するストリームエディター</li><li>sh — make ビルドスクリプト用ボーンシェル</li><li>tar — 配信用テープアーカイブ</li><li>test — ファイルシステムでテストする</li><li>unzip — 配布チェックのためのunzipコマンド</li><li>zip — ディストリビューション生成用zipコマンド</li></ul><h3 id="ホストc-ツールチェーン-コンパイラと標準ライブラリの両方" tabindex="-1">ホストC++ツールチェーン（コンパイラと標準ライブラリの両方） <a class="header-anchor" href="#ホストc-ツールチェーン-コンパイラと標準ライブラリの両方" aria-label="Permalink to &quot;ホストC++ツールチェーン（コンパイラと標準ライブラリの両方）&quot;">​</a></h3><p>LLVMはホストとなるC++コンパイラに対して非常に厳しい要求をしており、そのためコンパイラのバグが露呈しがちである。また、C++言語とライブラリの改良と開発にも、それなりに忠実に従おうとしています。そのため、LLVMをビルドするには、コンパイラと標準ライブラリの両方を含む最新のホストC++ツールチェーンが必要です。</p><p>LLVMは、コーディング標準に文書化されているC++のサブセットを使用して記述されています。この言語バージョンを強制するため、ビルド・システムでは、最もよく使われるホスト・ツールチェインの特定の最小バージョンをチェックしている：</p><ul><li>Clang 5.0</li><li>Apple Clang 10.0</li><li>GCC 7.1</li><li>Visual Studio 2019 16.7</li></ul><p>これらのツールチェーンより古いものは動作するかもしれないが、特別なオプションでビルド・システムを強制する必要があり、実際にサポートされているホスト・プラットフォームではない。また、これらのコンパイラーの古いバージョンは、しばしばLLVMをクラッシュさせたり、ミスコンパイルさせたりすることに注意してください。</p><p>ICCやxlCのようなあまり広く使われていないホスト・ツールチェインの場合、LLVMで使われているC++の機能をすべてサポートするには、非常に新しいバージョンが必要になることがあるので注意してください。</p><p>私たちは、ホストツールチェインの一部として使用されたときに失敗することが知られているソフトウェアの特定のバージョンを追跡しています。これにはリンカーも含まれることがあります。</p><p>GNU ld 2.16.X. いくつかの2.16.Xバージョンのldリンカーは、&quot;.gnu.linkonce.t.*&quot;シンボルが破棄されたセクションに定義されているという、非常に長い警告メッセージを出力します。これらのメッセージは誤りで、リンケージは正しいので、無視しても大丈夫です。これらのメッセージは、ld 2.17を使うと消える。</p><p>GNU binutils 2.17: Binutils 2.17には、LLVMをビルドするときにリンクに膨大な時間(秒ではなく分)がかかるバグがあります。新しいバージョン(2.17.50.0.4以降)にアップグレードすることを推奨します。</p><p>GNU Binutils 2.19.1 Gold：このバージョンのGoldには、位置に依存しないコードでLLVMをビルドする際に断続的に失敗するバグが含まれています。症状は周期的依存性に関するエラーです。新しいバージョンのGoldにアップグレードすることをお勧めします。</p><h4 id="最新のホストc-ツールチェーンの入手" tabindex="-1">最新のホストC++ツールチェーンの入手 <a class="header-anchor" href="#最新のホストc-ツールチェーンの入手" aria-label="Permalink to &quot;最新のホストC++ツールチェーンの入手&quot;">​</a></h4><p>このセクションは、主にLinuxと古いBSDに適用されます。macOSでは、十分に最新のXcodeがあるはずで、そうなるまでアップグレードが必要になる可能性が高い。Windowsには「システム・コンパイラ」がないので、Visual Studio 2019（またはそれ以降）か、mingw64の最新バージョンのいずれかをインストールする必要があります。FreeBSD 10.0以降には、システム・コンパイラとして最新のClangがあります。</p><p>しかし、一部のLinuxディストリビューションや他の、あるいは古いBSDでは、GCCのバージョンが非常に古いことがあります。これらの手順は、そのようなシステムであってもコンパイラをアップグレードする手助けをしようとするものです。しかし、可能な限り、これらの要件を満たす最新のシステム・コンパイラを搭載した最近のバージョンのディストリビューションを使うことをお勧めします。ホスト・コンパイラとしてClangとlibc++の以前のバージョンをインストールするのは魅力的ですが、libc++は比較的最近までLinux上でビルドするための十分なテストやセットアップが行われていなかったことに注意してください。そのため、このガイドでは、ブートストラップの最初のホストとしてlibstdc++と最新のGCCを使い、その後Clang（と潜在的にはlibc++）を使うことを提案します。</p><p>最初のステップは、最近のGCCツールチェーンをインストールすることです。バージョン要件でユーザーが苦労している最も一般的なディストリビューションは、Ubuntu Precise, 12.04 LTSです。このディストリビューションの場合、1つの簡単なオプションは、ツールチェーンテストPPAをインストールし、それを使って最新のGCCをインストールすることです。この方法については、ask ubuntu stack exchangeや、更新されたコマンドを含むgithub gistに、とても良い議論があります。しかし、すべてのユーザがPPAを使えるわけではなく、他にも多くのディストリビューションがあるので、ソースからGCCをビルドしてインストールすることが必要かもしれません（あるいは、あなたがここにいるのであれば、結局のところコンパイラ開発をしているのですから、単に便利なだけかもしれません）。また、最近はとても簡単です。</p><p>GCC 7.1.0をインストールする簡単な手順:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc_version=</span><span style="color:#F78C6C;">7.1</span><span style="color:#C3E88D;">.0</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://ftp.gnu.org/gnu/gcc/gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.tar.bz2</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://ftp.gnu.org/gnu/gcc/gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.tar.bz2.sig</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://ftp.gnu.org/gnu/gnu-keyring.gpg</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">signature_invalid=</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">gpg</span><span style="color:#C3E88D;"> --verify --no-default-keyring --keyring ./gnu-keyring.gpg gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.tar.bz2.sig</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">if</span><span style="color:#A6ACCD;"> [ $signature_invalid </span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Invalid signature</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-xvjf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.tar.bz2</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./contrib/download_prerequisites</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">-build</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">-build</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> $PWD</span><span style="color:#C3E88D;">/../gcc-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">gcc_version</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/configure</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--prefix=</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--enable-languages=c,c++</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-j</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">nproc</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>詳細については、私がこの情報のほとんどをここから得た、優れたGCC wikiのエントリーをチェックしてほしい。</p><p>GCCツールチェーンを入手したら、ホスト・コンパイラとC++標準ライブラリに新しいツールチェーンを使用するように、LLVMのビルドを設定する。新バージョンのlibstdc++はシステム・ライブラリの検索パス上にないため、リンク時（<code>-L</code>）と実行時（<code>-rpath</code>）に見つけられるように、追加のリンカ・フラグを渡す必要がある。CMakeを使用している場合、この呼び出しによって動作するバイナリが生成されるはずです：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CC=</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/bin/gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CXX=</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/bin/g++</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_CXX_LINK_FLAGS=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Wl,-rpath,</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/lib64 -L</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/toolchains/lib64</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p><code>-rpath</code>の設定に失敗すると、ほとんどのLLVMバイナリーは起動時にローダーから<code> libstdc++.so.6</code>: <code>version &#39;GLIBCXX_3.4.20&#39; not found</code>のようなメッセージが表示されて失敗する。これは、<code>-rpath</code>リンカー・フラグを調整する必要があることを意味する。</p><p>この方法では、すべての実行ファイルのrpathに絶対パスが追加される。ローカルで開発する分には問題ない。ビルドしたバイナリを古いシステムでも動作するように配布したい場合は、<code>libstdc++.so.6</code> を <code>lib/</code> ディレクトリにコピーする。LLVMの出荷バイナリはすべてrpathが <code>$ORIGIN/../lib</code> を指しているので、そこで <code>libstdc++.so.6</code> を見つけることができる。非配布バイナリはrpathが設定されていないので、<code>libstdc++.so.6</code>は見つからない。cmake に <code>-DLLVM_LOCAL_RPATH=&quot;$HOME/toolchains/lib64&quot;</code> を渡すと、上記のように <code>libstdc++.so.6</code> への絶対パスが追加される。これらのバイナリは配布されないので、ローカルに絶対パスがあっても問題ない。</p><p>Clangをビルドするときに、ブートストラップの一部として新しいホストとして使うために、モダンなC++標準ライブラリにアクセスできるようにする必要があります。Clangと一緒にlibc++をビルドして（インストールして）、コンパイルとリンクのフラグを<code>-stdlib=libc++</code>にして使うか、GCCと同じプレフィックス（上の<code>$HOME/toolchains</code>）にClangをインストールするかです。Clangは自分のプレフィックス内でlibstdc++を探し、見つかったらそれを使います。また、<code>--gcc-toolchain=/opt/my/gcc/prefix</code> フラグで、Clang が GCC ツールチェーンを探すための接頭辞を明示的に追加できます。</p><h2 id="llvm入門" tabindex="-1">LLVM入門 <a class="header-anchor" href="#llvm入門" aria-label="Permalink to &quot;LLVM入門&quot;">​</a></h2><p>このガイドの残りの部分は、LLVMを使い始め、LLVM環境についての基本的な情報を提供するためのものです。</p><p>このガイドの後のセクションでは、LLVMソース・ツリーの一般的なレイアウト、LLVMツール・チェーンを使用した簡単な例、LLVMに関する詳細情報を検索したり、電子メールでヘルプを入手したりするためのリンクについて説明します。</p><h3 id="用語と表記" tabindex="-1">用語と表記 <a class="header-anchor" href="#用語と表記" aria-label="Permalink to &quot;用語と表記&quot;">​</a></h3><p>このマニュアルでは、ローカルシステムと作業環境に固有のパスを示すために、以下の名前を使用します。これらは、あなたが設定する必要のある環境変数ではなく、以下の本書の残りの部分で使用される単なる文字列です。以下のどの例でも、これらの名前をローカルシステム上の適切なパス名に置き換えるだけでよい。これらのパスはすべて絶対パスです：</p><p><code>SRC_ROOT</code></p><p>これはLLVMソース・ツリーのトップ・レベルのディレクトリです。</p><p><code>OBJ_ROOT</code></p><p>LLVMオブジェクトツリーのトップレベルのディレクトリ（オブジェクトファイルとコンパイルされたプログラムが置かれるツリー）。SRC_ROOTと同じにすることもできる）。</p><h3 id="llvmアーカイブの解凍" tabindex="-1">LLVMアーカイブの解凍 <a class="header-anchor" href="#llvmアーカイブの解凍" aria-label="Permalink to &quot;LLVMアーカイブの解凍&quot;">​</a></h3><p>LLVMディストリビューションをお持ちの場合、コンパイルを始める前に解凍する必要があります。LLVMはいくつかの異なるサブプロジェクトとして配布されています。それぞれ、gzipプログラムで圧縮されたTARアーカイブがダウンロードされます。</p><p>ファイルは以下の通りで、x.yはバージョン番号を示している：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">llvm-x.y.tar.gz</span></span></code></pre></div><p>LLVMライブラリとツールのソースリリース。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cfe-x.y.tar.gz</span></span></code></pre></div><p>Clangフロントエンドのソースリリース。</p><h3 id="gitからllvmをチェックアウトする" tabindex="-1">GitからLLVMをチェックアウトする <a class="header-anchor" href="#gitからllvmをチェックアウトする" aria-label="Permalink to &quot;GitからLLVMをチェックアウトする&quot;">​</a></h3><p>GitからLLVMのソースコードをチェックアウトすることもできます。</p><div class="info custom-block"><p class="custom-block-title">備考</p><p>\`\`.gitattribute<code>の設定を正しく調整すれば、将来的には</code>--config core.autocrlf=false\` を渡す必要はなくなりますが、この記事を書いている時点ではWindowsユーザーには必要です。</p></div><p>単に実行する:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/llvm/llvm-project.git</span></span></code></pre></div><p>またはWindowsの場合:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">core.autocrlf=</span><span style="color:#89DDFF;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/llvm/llvm-project.git</span></span></code></pre></div><p>これにより、カレント・ディレクトリに&#39;llvm-project&#39;ディレクトリが作成され、LLVMと関連するすべてのサブプロジェクトのソースコード、テスト・ディレクトリ、ドキュメント・ファイルのローカル・コピーがすべて含まれるようになります。各サブプロジェクトが別々のファイルに含まれている tarball とは異なり、git リポジトリにはすべてのプロジェクトが一緒に含まれていることに注意してください。</p><p>最新のリビジョンではなく）特定のリリースを取得したい場合は、リポジトリをクローンした後でタグをチェックアウトできます。例えば、上のコマンドで作成した llvm-project ディレクトリ内の <code>llvmorg-6.0.1</code> を <code>git checkout</code> します。<code>git tag -l</code> を使って、すべてのタグをリストアップします。</p><h4 id="パッチの送信" tabindex="-1">パッチの送信 <a class="header-anchor" href="#パッチの送信" aria-label="Permalink to &quot;パッチの送信&quot;">​</a></h4><p>コントリビューションを参照してください。</p><h4 id="コミットを二分する" tabindex="-1">コミットを二分する <a class="header-anchor" href="#コミットを二分する" aria-label="Permalink to &quot;コミットを二分する&quot;">​</a></h4><p>LLVM で <code>git bisect</code> を使う方法については LLVM コードのバイセクト を参照してください。</p><h4 id="変更の取り消し" tabindex="-1">変更の取り消し <a class="header-anchor" href="#変更の取り消し" aria-label="Permalink to &quot;変更の取り消し&quot;">​</a></h4><p>git を使って変更を取り消す場合、デフォルトのメッセージは「This reverts commit XYZ」となります。このメッセージはコミットメッセージの最後に書きますが、その前になぜそのコミットを取り消すのかについての詳細を書きます。簡単な説明や問題を示すボットへのリンクで十分です。</p><h3 id="ローカルllvm設定" tabindex="-1">ローカルLLVM設定 <a class="header-anchor" href="#ローカルllvm設定" aria-label="Permalink to &quot;ローカルLLVM設定&quot;">​</a></h3><p>リポジトリをチェックアウトしたら、ビルドする前にLLVMスイートのソースコードを設定する必要がある。このプロセスにはCMakeを使用します。通常の<code>configure</code>スクリプトを使わないで、CMakeはあなたが要求したフォーマットでビルドファイルと、様々な<code>*.inc</code>ファイル、<code>llvm/include/llvm/Config/config.h.cmake</code>を生成します。</p><p>変数はコマンドラインで <code>-D&lt;variable name&gt;=&lt;value&gt;</code> という形式で cmake に渡します。以下の変数はLLVMを開発している人がよく使うオプションです。</p><table><thead><tr><th>Variable</th><th>Purpose</th></tr></thead><tbody><tr><td><code>CMAKE_C_COMPILER</code></td><td>使用するCコンパイラーをcmakeに指示する。デフォルトでは <code>/usr/bin/cc</code> となる。</td></tr><tr><td><code>CMAKE_CXX_COMPILER</code></td><td>使用するC++コンパイラーをcmakeに指示する。デフォルトでは <code>/usr/bin/c++</code> となる。</td></tr><tr><td><code>CMAKE_BUILD_TYPE</code></td><td>cmake に、ファイルを生成するビルドのタイプを指定します。有効なオプションは、<code>Debug</code>、<code>Release</code>、<code>RelWithDebInfo</code>、および <code>MinSizeRel</code> です。デフォルトは<code>Debug</code>です。</td></tr><tr><td><code>CMAKE_INSTALL_PREFIX</code></td><td>ビルドファイルのインストールアクションを実行する際にターゲットとするインストールディレクトリを指定します。</td></tr><tr><td><code>Python3_EXECUTABLE</code></td><td>Python インタプリタへのパスを渡すことで、CMake に特定の Python バージョンを使わせます。デフォルトでは、PATH にあるインタプリタの Python バージョンが使われます。</td></tr><tr><td><code>LLVM_TARGETS_TO_BUILD</code></td><td>セミコロンで区切られたリストで、どのターゲットをビルドしてllvmにリンクするかを制御します。デフォルトのリストは<code>LLVM_ALL_TARGETS</code>として定義され、ツリー外のターゲットを含むように設定できます。デフォルト値には<code>AArch64</code>、<code>AMDGPU</code>、<code>ARM</code>、<code>AVR</code>、<code>BPF</code>、<code>Hexagon</code>、<code>Lanai</code>、<code>Mips</code>、<code>MSP430</code>、<code>NVPTX</code>、<code>PowerPC</code>、<code>RISCV</code>、<code>Sparc</code>、<code>SystemZ</code>、<code>WebAssembly</code>、<code>X86</code>、<code>XCore</code>。これを <code>&quot;host&quot;</code>に設定すると、ホスト・アーキテクチャのみがコンパイルされます（例えば、x86ホスト・マシンで<code>X86</code>を指定するのと同じです）。これにより、コンパイルとテストの時間が大幅に短縮されます。</td></tr><tr><td>LLVM_ENABLE_DOXYGEN</td><td>ソースコードからdoxygenベースのドキュメントをビルドする 時間がかかり、多くの出力を生成するため、デフォルトでは無効になっています。</td></tr><tr><td><code>LLVM_ENABLE_PROJECTS</code></td><td>セミコロンで区切られたリストで、どのLLVMサブプロジェクトを追加ビルドするかを選択します。(git経由などでサイドバイサイドのプロジェクトレイアウトを使用する場合にのみ有効です)。デフォルトのリストは空です。指定できるのは、<code>clang</code>、<code>clang-tools-extra</code>、<code>cross-project-tests</code>、<code>flang</code>、<code>libc</code>、<code>libclc</code>、<code>lld</code>、<code>lldb</code>、<code>mlir</code>、<code>openmp</code>、<code>polly</code>、<code>pstl</code>です。</td></tr><tr><td><code>LLVM_ENABLE_RUNTIMES</code></td><td>どのランタイムをビルドするかを選択するセミコロン区切りのリスト。(完全なモノレポ・レイアウトを使用する場合のみ有効)。デフォルトのリストは空です。<code>compiler-rt</code>、<code>libc</code>、<code>libcxx</code>、<code>libcxxabi</code>、<code>libunwind</code>、または<code>openmp</code>を含めることができる。</td></tr><tr><td><code>LLVM_ENABLE_SPHINX</code></td><td>ソースコードからsphinxベースのドキュメントをビルドする。これは遅く、多くの出力を生成するため、デフォルトでは無効になっています。Sphinxバージョン1.5以降を推奨します。</td></tr><tr><td><code>LLVM_BUILD_LLVM_DYLIB</code></td><td><code>libLLVM.so</code>を生成する。このライブラリにはLLVMコンポーネントのデフォルト・セットが含まれており、<code>LLVM_DYLIB_COMPONENTS</code>でオーバーライドできる。デフォルトはLLVMのほとんどを含み、<code>tools/llvm-shlib/CMakelists.txt</code>で定義されている。このオプションはWindowsでは使用できません。</td></tr><tr><td><code>LLVM_OPTIMIZED_TABLEGEN</code></td><td>LLVMビルド中に使用されるリリース・テーブルジェンをビルドする。これにより、デバッグ・ビルドが劇的に速くなる。</td></tr></tbody></table><p>LLVMを設定するには、以下の手順に従ってください：</p><ol><li>ディレクトリをオブジェクト・ルート・ディレクトリに変更する：</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OBJ_ROOT</span></span></code></pre></div><ol start="2"><li>cmakeを実行する：</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unix Makefiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_INSTALL_PREFIX=/install/path</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">other options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SRC_ROOT</span></span></code></pre></div><h3 id="llvmスイート・ソース・コードのコンパイル" tabindex="-1">LLVMスイート・ソース・コードのコンパイル <a class="header-anchor" href="#llvmスイート・ソース・コードのコンパイル" aria-label="Permalink to &quot;LLVMスイート・ソース・コードのコンパイル&quot;">​</a></h3><p>オートツールとは異なり、CMakeではビルドタイプは設定時に定義されます。ビルドタイプを変更したい場合は、以下のコマンドでcmakeを再実行します：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unix Makefiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">type</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SRC_ROOT</span></span></code></pre></div><p>実行の間、CMake はすべてのオプションに設定された値を保持します。CMakeには以下のビルドタイプが定義されています：</p><p><code>Debug</code></p><p>これらのビルドがデフォルトである。ビルド・システムは、デバッグ情報とアサートが有効な状態で、最適化されていないツールとライブラリをコンパイルする。</p><p><code>Release</code></p><p>これらのビルドでは、ビルド・システムは最適化を有効にしてツールとライブラリをコンパイルし、デバッグ情報を生成しない。CMakesのデフォルトの最適化レベルは<code>-O3</code>です。これは、CMakeコマンドラインで<code>CMAKE_CXX_FLAGS_RELEASE</code>変数を設定することで設定できます。</p><p><code>RelWithDebInfo</code></p><p>これらのビルドはデバッグ時に便利である。デバッグ情報とともに最適化されたバイナリが生成されます。CMakesのデフォルトの最適化レベルは-O2です。これは CMake コマンドラインで <code>CMAKE_CXX_FLAGS_RELWITHDEBINFO</code> 変数を設定することで設定できます。</p><p>LLVMを設定したら、OBJ_ROOTディレクトリに入り、以下のコマンドを実行することでビルドできます：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span></span></code></pre></div><p>ビルドに失敗した場合、LLVMをコンパイルしないことが知られているGCCのバージョンを使っていないか、ここで確認してください。</p><p>あなたのマシンに複数のプロセッサがある場合、GNU Makeが提供する並列ビルドオプションのいくつかを使いたいかもしれません。たとえば、次のコマンドを使うことができます：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-j2</span></span></code></pre></div><p>LLVMソースコードで作業するときに便利な特別なターゲットがいくつかある：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clean</span></span></code></pre></div><p>ビルドによって生成されたすべてのファイルを削除します。これには、オブジェクト・ファイル、生成された C/C++ ファイル、ライブラリ、実行可能ファイルが含まれます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>LLVM のヘッダーファイル、ライブラリ、ツール、ドキュメントを <code>CMAKE_INSTALL_PREFIX</code> で指定した <code>$PREFIX</code> 以下の階層にインストールする。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docs-llvm-html</span></span></code></pre></div><p><code>-DLLVM_ENABLE_SPHINX=On</code>で設定すると、<code>OBJ_ROOT/docs/html</code>にHTML形式のドキュメントを含むディレクトリが生成される。</p><h3 id="llvmのクロスコンパイル" tabindex="-1">LLVMのクロスコンパイル <a class="header-anchor" href="#llvmのクロスコンパイル" aria-label="Permalink to &quot;LLVMのクロスコンパイル&quot;">​</a></h3><p>LLVM自体をクロスコンパイルすることも可能です。つまり、LLVMの実行ファイルやライブラリを、ビルドするプラットフォームとは異なるプラットフォームでホストするように作成することができます（カナディアンクロスビルド）。クロスコンパイル用のビルドファイルを生成するために、CMakeは<code>CMAKE_TOOLCHAIN_FILE</code>という変数を提供しており、CMakeのテスト操作中に使用されるコンパイラーフラグや変数を定義することができます。</p><p>このようなビルドの結果は、ビルドホストでは実行できませんが、ターゲットでは実行できる実行ファイルです。例として、以下のCMakeの呼び出しは、iOSをターゲットとしたビルドファイルを生成することができます。これは最新のXcodeを搭載したmacOSでも動作します：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ninja</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_OSX_ARCHITECTURES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">armv7;armv7s;arm64</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  -DCMAKE_TOOLCHAIN_FILE</span><span style="color:#89DDFF;">=&lt;</span><span style="color:#C3E88D;">PATH_TO_LLV</span><span style="color:#A6ACCD;">M</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/cmake/platforms/iOS.cmake</span></span>
<span class="line"><span style="color:#A6ACCD;">  -DCMAKE_BUILD_TYPE</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Release</span><span style="color:#A6ACCD;"> -DLLVM_BUILD_RUNTIME</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Off</span><span style="color:#A6ACCD;"> -DLLVM_INCLUDE_TESTS</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Off</span></span>
<span class="line"><span style="color:#A6ACCD;">  -DLLVM_INCLUDE_EXAMPLES</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Off</span><span style="color:#A6ACCD;"> -DLLVM_ENABLE_BACKTRACES</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">Off</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">PATH_TO_LLVM&gt;</span></span></code></pre></div><p>注：iOS SDKの制限により、iOS用にビルドする際に渡さなければならない追加のフラグがいくつかある。</p><p>クロスコンパイルについての詳しい情報は、Clang/LLVMを使ってClang/LLVMをクロスコンパイルする方法と、一般的なクロスコンパイル方法についてのClangのドキュメントをチェックしてください。</p><h3 id="llvmオブジェクトファイルの場所" tabindex="-1">LLVMオブジェクトファイルの場所 <a class="header-anchor" href="#llvmオブジェクトファイルの場所" aria-label="Permalink to &quot;LLVMオブジェクトファイルの場所&quot;">​</a></h3><p>LLVMビルド・システムは、1つのLLVMソース・ツリーを複数のLLVMビルドで共有することができます。したがって、同じソース・ツリーを使用して、複数の異なるプラットフォームまたは構成向けにLLVMをビルドすることができます。</p><p>LLVMオブジェクト・ファイルを置くディレクトリを変更します：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OBJ_ROOT</span></span></code></pre></div><p>cmakeを実行する:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-G</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unix Makefiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_BUILD_TYPE=Release</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SRC_ROOT</span></span></code></pre></div><p>LLVMビルドは、OBJ_ROOTの下にLLVMソースツリーと一致する構造を作成します。ソースツリーにソースファイルが存在する各レベルには、OBJ_ROOTに対応するCMakeFilesディレクトリが存在します。そのディレクトリの下には、.dirで終わる名前の別のディレクトリがあり、その下に各ソースのオブジェクトファイルがあります。</p><p>例えば:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm_build_dir</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">find</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lib/Support/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">APFloat</span><span style="color:#A6ACCD;">*</span></span>
<span class="line"><span style="color:#FFCB6B;">lib/Support/CMakeFiles/LLVMSupport.dir/APFloat.cpp.o</span></span></code></pre></div><h3 id="オプション設定項目" tabindex="-1">オプション設定項目 <a class="header-anchor" href="#オプション設定項目" aria-label="Permalink to &quot;オプション設定項目&quot;">​</a></h3><p><code>binfmt_misc</code>モジュールをサポートするLinuxシステムで実行しており、そのシステムのrootアクセス権を持っている場合、LLVMビットコード・ファイルを直接実行するようにシステムを設定することができます。これを行うには、次のようなコマンドを使用します（すでにモジュールを使用している場合は、最初のコマンドは必要ないかもしれません）:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">binfmt_misc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">none</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/proc/sys/fs/binfmt_misc</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:llvm:M::BC::/path/to/lli:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/proc/sys/fs/binfmt_misc/register</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">u+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.bc</span><span style="color:#A6ACCD;">   (if </span><span style="color:#C3E88D;">needed</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./hello.bc</span></span></code></pre></div><p>これにより、LLVMビットコード・ファイルを直接実行できる。Debianでは、上記の&#39;echo&#39;コマンドの代わりに次のコマンドを使うこともできる。:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update-binfmts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/lli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--magic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">BC</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h2 id="ディレクトリのレイアウト" tabindex="-1">ディレクトリのレイアウト <a class="header-anchor" href="#ディレクトリのレイアウト" aria-label="Permalink to &quot;ディレクトリのレイアウト&quot;">​</a></h2><p>LLVMソース・ベースに関する有用な情報源の1つは、<code>llvm.org/doxygen/</code> にあるLLVM doxygenドキュメントです。以下は、コード・レイアウトの簡単な紹介です。:</p><h3 id="llvm-cmake" tabindex="-1">llvm/cmake <a class="header-anchor" href="#llvm-cmake" aria-label="Permalink to &quot;llvm/cmake&quot;">​</a></h3><p>システムビルドファイルを生成する。</p><p><code>llvm/cmake/modules</code></p><p>llvm ユーザ定義オプションのビルド設定。コンパイラのバージョンとリンカのフラグをチェックする。</p><p><code>llvm/cmake/platforms</code></p><p>Android NDK、iOSシステム、MSVCをターゲットとする非Windowsホスト用のツールチェーン設定。</p><h3 id="llvm-examples" tabindex="-1">llvm/examples <a class="header-anchor" href="#llvm-examples" aria-label="Permalink to &quot;llvm/examples&quot;">​</a></h3><ul><li>カスタム言語用のコンパイラとしてLLVMを使用する方法を示すいくつかの簡単な例 - 低域化、最適化、コード生成を含む。</li><li>Kaleidoscopeチュートリアル：Kaleidoscope言語チュートリアルでは、手書きのレキサー、パーサー、AST、LLVMを使用したコード生成サポート（静的（先読み）コンパイルとJIT（Just In Time）コンパイルへの様々なアプローチの両方）を含む、自明でない言語のための素晴らしい小さなコンパイラの実装を実行します。完全な初心者向けのKaleidoscopeチュートリアル。</li><li>BuildingAJIT: BuildingAJITチュートリアルの例は、LLVMのORC JIT APIがLLVMの他の部分とどのように相互作用するかを示しています。LLVMのORC JIT APIがLLVMの他の部分とどのように相互作用するかを示しています。また、それらをどのように組み替えて、あなたのユースケースに適したカスタムJITを構築するかを教えています。</li></ul><h3 id="llvm-include" tabindex="-1">llvm/include <a class="header-anchor" href="#llvm-include" aria-label="Permalink to &quot;llvm/include&quot;">​</a></h3><p>LLVMライブラリからエクスポートされた公開ヘッダーファイル。3つの主なサブディレクトリ:</p><p><code>llvm/include/llvm</code></p><p>LLVM固有のすべてのヘッダーファイルと、LLVMのさまざまな部分（<code>Analysis</code>、<code>CodeGen</code>、<code>Target</code>、<code>Transforms</code>など）のサブディレクトリ。</p><p><code>llvm/include/llvm/Support</code></p><p>LLVMと共に提供されるが、必ずしもLLVMに特化したものではない汎用サポート・ライブラリ。例えば、いくつかのC++ STLユーティリティやコマンドラインオプション処理ライブラリは、ここにヘッダファイルを格納する。</p><p><code>llvm/include/llvm/Config</code></p><p>cmakeによって設定されるヘッダーファイル。これらは、&quot;標準的な &quot;UNIXやCのヘッダーファイルをラップします。ソースコードはこれらのヘッダーファイルをインクルードすることができ、 cmake が生成する条件付き <code>#includes</code> を自動的に処理します。</p><h3 id="llvm-lib" tabindex="-1">llvm/lib <a class="header-anchor" href="#llvm-lib" aria-label="Permalink to &quot;llvm/lib&quot;">​</a></h3><p>ほとんどのソースファイルはここにある。コードをライブラリに置くことで、LLVMはツール間でのコードの共有を容易にする。</p><p><code>llvm/lib/IR/</code></p><p>InstructionやBasicBlockなどのコア・クラスを実装するLLVMのコア・ソース・ファイル。</p><p><code>llvm/lib/AsmParser/</code></p><p>LLVMアセンブリ言語パーサー・ライブラリのソースコード。</p><p><code>llvm/lib/Bitcode/</code></p><p>ビットコードを読み書きするためのコード。</p><p><code>llvm/lib/Analysis/</code></p><p>コールグラフ、誘導変数、自然ループの識別など、さまざまなプログラム解析。</p><p><code>llvm/lib/Transforms/</code></p><p>積極的なデッドコード除去、スパース条件付き定数伝搬、インライン化、ループ不変コードモーション、デッドグローバル除去など、IRからIRへのプログラム変換。</p><p><code>llvm/lib/Target/</code></p><p>コード生成のターゲットとなるアーキテクチャを記述したファイル。例えば、<code>llvm/lib/Target/X86</code> には <code>X86</code> マシンの記述があります。</p><p><code>llvm/lib/CodeGen/</code></p><p>コード・ジェネレーターの主要部分：命令セレクタ、命令スケジューリング、レジスタ割り当て。</p><p><code>llvm/lib/MC/</code></p><p>ライブラリはマシンコードレベルでコードを表現し、処理する。アセンブリとオブジェクトファイルのエミッションを処理します。</p><p><code>llvm/lib/ExecutionEngine/</code></p><p>インタープリタ型およびJITコンパイル型のシナリオで、実行時にビットコードを直接実行するためのライブラリ。</p><p><code>llvm/lib/Support/</code></p><p><code>llvm/include/ADT/</code> と <code>llvm/include/Support/</code> にあるヘッダファイルに対応するソースコード。</p><h3 id="llvm-bindings" tabindex="-1">llvm/bindings <a class="header-anchor" href="#llvm-bindings" aria-label="Permalink to &quot;llvm/bindings&quot;">​</a></h3><p>LLVMコンパイラー・インフラストラクチャーのバインディングが含まれており、CやC++以外の言語で書かれたプログラムでもLLVMインフラストラクチャーを利用することができます。LLVMプロジェクトはOCamlとPythonの言語バインディングを提供しています。</p><h3 id="llvm-projects" tabindex="-1">llvm/projects <a class="header-anchor" href="#llvm-projects" aria-label="Permalink to &quot;llvm/projects&quot;">​</a></h3><p>厳密にはLLVMの一部ではないが、LLVMとともに出荷されるプロジェクト。また、LLVMビルド・システムを活用する、あなた自身のLLVMベースのプロジェクトを作成するためのディレクトリでもあります。</p><h3 id="llvm-test" tabindex="-1">llvm/test <a class="header-anchor" href="#llvm-test" aria-label="Permalink to &quot;llvm/test&quot;">​</a></h3><p>LLVMインフラストラクチャの機能テストとリグレッション・テスト、その他のサニティ・チェック。これらは迅速に実行され、網羅的でなくとも多くの領域をカバーすることを意図している。</p><h3 id="test-suite" tabindex="-1">test-suite <a class="header-anchor" href="#test-suite" aria-label="Permalink to &quot;test-suite&quot;">​</a></h3><p>LLVM用の包括的な正しさ、パフォーマンス、ベンチマーク・テスト・スイート。これは別のgitリポジトリ <code>github.com/llvm/llvm-test-suite</code> で提供されています。なぜなら、様々なライセンスのサードパーティ・コードが大量に含まれているからです。詳細はTesting Guideドキュメントを参照してください。</p><h3 id="llvm-tools" tabindex="-1">llvm/tools <a class="header-anchor" href="#llvm-tools" aria-label="Permalink to &quot;llvm/tools&quot;">​</a></h3><p>上記のライブラリからビルドされた実行ファイルで、ユーザー・インターフェースの主要部分を形成する。<code>tool_name -help</code>と入力すれば、いつでもツールのヘルプを得ることができる。以下は最も重要なツールの簡単な紹介である。より詳細な情報はコマンドガイドにあります。</p><p><code>bugpoint</code></p><p><code>bugpoint</code> は、最適化パスやコード生成バックエンドのデバッグに使用され、与えられたテストケースを、クラッシュやコンパイルミスなどの問題を引き起こすパスや命令の最小数に絞り込みます。<code>bugpoint</code> の使い方については <code>HowToSubmitABug.html</code> を参照してください。</p><p><code>llvm-ar</code></p><p>アーカイバは、指定されたLLVMビットコードファイルを含むアーカイブを生成します。</p><p><code>llvm-as</code></p><p>アセンブラは、人間が読めるLLVMアセンブリをLLVMビットコードに変換する。</p><p><code>llvm-dis</code></p><p>ディスアセンブラは、LLVMビットコードを人間が読めるLLVMアセンブリに変換する。</p><p><code>llvm-link</code></p><p><code>llvm-link</code>は、驚くことではないが、複数のLLVMモジュールを1つのプログラムにリンクする。</p><p><code>lli</code></p><p><code>lli</code>はLLVMインタプリタであり、LLVMビットコードを直接実行することができます（非常に遅いですが...）。サポートしているアーキテクチャ（現在のところx86、Sparc、PowerPC）では、デフォルトでlliはジャストインタイム・コンパイラとして機能し（機能がコンパイルされている場合）、インタプリタよりもはるかに高速にコードを実行します。</p><p><code>llc</code></p><p><code>llc</code>はLLVMバックエンドコンパイラで、LLVMビットコードをネイティブコードのアセンブリファイルに変換する。</p><p><code>opt</code></p><p><code>opt</code>はLLVMビットコードを読み込み、一連のLLVMからLLVMへの変換（コマンドラインで指定される）を適用し、結果のビットコードを出力する。<code>opt -help</code>は、LLVMで利用可能なプログラム変換のリストを得るための良い方法である。</p><p><code>opt</code>では、入力されたLLVMビットコード・ファイルに対して特定の解析を実行し、その結果を表示することもできます。主に、解析のデバッグや、解析が何をするのかを理解するのに便利です。</p><h3 id="llvm-utils" tabindex="-1">llvm/utils <a class="header-anchor" href="#llvm-utils" aria-label="Permalink to &quot;llvm/utils&quot;">​</a></h3><p>LLVMソースコードで作業するためのユーティリティ。インフラストラクチャの一部のコード・ジェネレータであるため、ビルド・プロセスの一部となっているものもある。</p><p><code>codegen-diff</code></p><p><code>codegen-diff</code>は、LLCが生成するコードとLLIが生成するコードの違いを見つける。LLCが生成するコードとLLIが生成するコードの違いを見つけることができる。完全なユーザーマニュアルは <code>perldoc codegen-diff</code> を実行してほしい。</p><p><code>emacs/</code></p><p>LLVMアセンブリ・ファイルおよびTableGen記述ファイル用のEmacsおよびXEmacsシンタックス・ハイライト。これらの使用方法についてはREADMEを参照してください。</p><p><code>getsrcs.sh</code></p><p>ディレクトリをまたいで多くの開発を行い、各ファイルを探したくない場合に便利です。使い方の1つは、例えば、LLVMソースツリーの先頭から<code>xemacs &#39;utils/getsources.sh&#39;</code> を実行することである。</p><p><code>llvmgrep</code></p><p>LLVMの各ソースファイルに対して<code>egrep -H -n</code>を実行し、<code>llvmgrep</code>のコマンドラインで提供された正規表現を渡します。これは、特定の正規表現に対してソースベースを検索する効率的な方法です。</p><p><code>TableGen/</code></p><p>一般的な TableGen 記述ファイルからレジスタ記述、命令セット記述、さらにはアセンブラを生成するためのツールが含まれています。</p><p><code>vim/</code></p><p>LLVMアセンブリ・ファイルとTableGen記述ファイルのvimシンタックス・ハイライト。使い方はREADMEを参照してください。</p><h2 id="llvmツールチェーンを使った例" tabindex="-1">LLVMツールチェーンを使った例 <a class="header-anchor" href="#llvmツールチェーンを使った例" aria-label="Permalink to &quot;LLVMツールチェーンを使った例&quot;">​</a></h2><p>このセクションでは、ClangフロントエンドでLLVMを使う例を示す。</p><h3 id="clangを使った例" tabindex="-1">clangを使った例 <a class="header-anchor" href="#clangを使った例" aria-label="Permalink to &quot;clangを使った例&quot;">​</a></h3><p>まず、簡単なCファイルを作成し、名前を&#39;hello.c&#39;とする。:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>次に、Cファイルをネイティブの実行ファイルにコンパイルする：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clang</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>ClangはデフォルトではGCCと同じように動作する。標準の<code>-S</code>と<code>-c</code>引数は通常通り働きます（それぞれネイティブの<code>.s</code>ファイルか<code>.o</code>ファイルを生成します）。</p></div><p>次に、CファイルをLLVMビットコード・ファイルにコンパイルする：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clang</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-emit-llvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.bc</span></span></code></pre></div><p><code>-emit-llvm</code>オプションを<code>-S</code>または<code>-c</code>オプションと一緒に使用すると、コードのLLVM <code>.ll</code>または<code>.bc</code>ファイル（それぞれ）を生成できます。これにより、ビットコード・ファイルで標準的なLLVMツールを使うことができる。</p><p>両方の形式でプログラムを実行する。プログラムを実行するには</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./hello</span></span></code></pre></div><p>そして</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.bc</span></span></code></pre></div><p>2つ目の例は、LLVM JITである<code>lli</code>を呼び出す方法を示している。</p><p><code>llvm-dis</code>ユーティリティを使って、LLVMのアセンブリコードを見てください：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llvm-dis</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.bc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">less</span></span></code></pre></div><p>LLCコードジェネレータを使用して、プログラムをネイティブアセンブリにコンパイルする：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">llc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.bc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.s</span></span></code></pre></div><p>ネイティブ・アセンブリ言語ファイルをプログラムにアセンブルする：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/opt/SUNWspro/bin/cc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-xarch=v9</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.native</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># On Solaris</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.native</span><span style="color:#A6ACCD;">                              </span><span style="color:#676E95;font-style:italic;"># On others</span></span></code></pre></div><p>ネイティブ・コードのプログラムを実行する：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./hello.native</span></span></code></pre></div><p>ネイティブコードに直接コンパイルするためにclangを使う場合（つまり<code>-emit-llvm</code>オプションがない場合）は、6/7/8のステップを代わりにやってくれることに注意してほしい。</p><h2 id="よくある問題" tabindex="-1">よくある問題 <a class="header-anchor" href="#よくある問題" aria-label="Permalink to &quot;よくある問題&quot;">​</a></h2><p>LLVMのビルドや使用に問題がある場合、またはLLVMに関するその他の一般的な質問がある場合は、「よくある質問」のページを参照してください。</p><p>限られたメモリとビルド時間に問題がある場合は、makeの代わりにninjaでビルドしてみてください。cmakeで以下のオプションを設定することを検討してください：</p><ul><li><code>-G</code> Ninja このオプションを設定すると、makeの代わりにninjaでビルドできるようになる。ninjaでビルドすると、特にインクリメンタルビルドのビルド時間が大幅に短縮され、メモリ使用量も改善されます。</li><li><code>-DLLVM_USE_LINKER</code> このオプションをlldに設定すると、LinuxのようなELFベースのプラットフォーム上で、LLVM実行ファイルのリンク時間が大幅に短縮される。LLVMを初めてビルドする場合で、lldがバイナリ・パッケージとして利用できない場合は、GNU ldに代わる高速なリンカーとして、goldリンカーを使用するとよいでしょう。</li><li><code>-DCMAKE_BUILD_TYPE</code> ビルドの最適化レベルとデバッグ情報を制御します。この設定は RAM とディスクの使用量に影響します。詳細は CMAKE_BUILD_TYPE を参照してください。</li><li><code>-DLLVM_ENABLE_ASSERTIONS</code> このオプションのデフォルトは、DebugビルドではON、ReleaseビルドではOFFである。前のオプションで述べたように、Release ビルド・タイプを使用してアサーションを有効にすることは、Debug ビルド・タイプを使用する良い選択肢となるでしょう。</li><li><code>-DLLVM_PARALLEL_LINK_JOBS</code> これは、同時に実行したいジョブの数と同じに設定する。これはmakeで使われる-jオプションに似ているが、リンクジョブにのみ使われる。このオプションは忍者でのみ使用できる。ジョブの数を非常に少なくすると、ビルド処理中に使用するメモリの量を大幅に減らすことができるからである。メモリが限られている場合は、これを 1 に設定するとよい。</li><li><code>-DLLVM_TARGETS_TO_BUILD</code> ビルドしたいターゲットと同じに設定してください。X86に設定したいかもしれませんが、ターゲットの完全なリストはllvm-project/llvm/lib/Targetディレクトリにあります。</li><li><code>-DLLVM_OPTIMIZED_TABLEGEN</code> これをONに設定すると、ビルド中に完全に最適化されたtablegenが生成されます。これにより、ビルド時間が大幅に短縮される。これは Debug ビルド・タイプを使用している場合にのみ有効です。</li><li><code>-DLLVM_ENABLE_PROJECTS</code> この値を、コンパイルしたいプロジェクト（clang、lldなど）と同じにする。 複数のプロジェクトをコンパイルする場合は、項目をセミコロンで区切ってください。セミコロンで問題が発生した場合は、シングルクォートで囲んでみてください。</li><li><code>-DLLVM_ENABLE_RUNTIMES</code> コンパイルしたいランタイム（libcxx、libcxxabiなど）と等しくなるように設定する。 複数のランタイムをコンパイルする場合は、セミコロンで区切ってください。セミコロンに問題がある場合は、シングルクォートで囲んでください。</li><li><code>-DCLANG_ENABLE_STATIC_ANALYZER</code> clangスタティック・アナライザーが不要な場合は、このオプションをオフに設定してください。これでビルド時間が少し改善されるはずです。</li><li><code>-DLLVM_USE_SPLIT_DWARF</code> デバッグビルドが必要な場合は、この設定を ON にすると、リンカにかかる メモリ負荷が軽減されます。バイナリにデバッグ情報が含まれなくなるため、リンクが非常に高速になります。これは、LinuxなどのELFを使用するホスト・プラットフォームにのみ適用されます。</li></ul><h2 id="リンク" tabindex="-1">リンク <a class="header-anchor" href="#リンク" aria-label="Permalink to &quot;リンク&quot;">​</a></h2><p>このドキュメントは、LLVMを使って簡単なことをする方法の紹介に過ぎません...ここに書かれていない、もっと面白くて複雑なことはたくさんあります（でも、もしあなたが何か書きたいなら、喜んでパッチを受け付けます！）。LLVMの詳細については、以下をチェックしてください：</p><ul><li>LLVM Homepage</li><li>LLVM Doxygen Tree</li><li>Starting a Project that Uses LLVM</li></ul>`,272),e=[p];function t(c,r,C,i,d,y){return l(),a("div",null,e)}const L=s(n,[["render",t]]);export{A as __pageData,L as default};
