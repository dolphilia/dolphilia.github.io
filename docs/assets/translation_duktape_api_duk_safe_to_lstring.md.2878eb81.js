import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.43c433ff.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_safe_to_lstring.md","filePath":"translation/duktape/api/duk_safe_to_lstring.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/api/duk_safe_to_lstring.md"},p=o(`<h2 id="duk-safe-to-lstring" tabindex="-1">duk_safe_to_lstring() <a class="header-anchor" href="#duk-safe-to-lstring" aria-label="Permalink to &quot;duk_safe_to_lstring()&quot;">​</a></h2><p>1.0.0 string stack</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">duk_safe_to_lstring</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">idx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">out_len</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">duk_safe_to_lstring</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">idx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">out_len</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | val | ... | -&gt; | ... | ToString(val) | ... |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_to_lstring() と同様であるが、最初の文字列強制に失敗した場合、エラー値を文字列に強制します。それも失敗した場合、固定されたエラー文字列が返されます。</p><p>呼び出し側は、この関数を使って安全に値を文字列に強制することができ、 Cコードでは、printf()で安全に戻り値をプリントアウトするのに便利です。捕捉されないエラーは、メモリ不足とその他の内部エラーだけです。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ptr;</span></span>
<span class="line"><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> sz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Coercion causes error. */</span></span>
<span class="line"><span style="color:#B392F0;">duk_eval_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;({ toString: function () { throw new Error(&#39;toString error&#39;); } })&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_safe_to_lstring</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">sz</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;coerced string: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> (length </span><span style="color:#79B8FF;">%lu</span><span style="color:#9ECBFF;">)</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, ptr, (</span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">sz</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* -&gt; &quot;Error: toString error&quot; */</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Coercion causes error, and the error itself cannot be string coerced. */</span></span>
<span class="line"><span style="color:#B392F0;">duk_eval_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;({ toString: function () { var e = new Error(&#39;cannot string coerce me&#39;);&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;                           e.toString = function () { throw new Error(&#39;coercion error&#39;); };&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">&quot;                           throw e; } })&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_safe_to_lstring</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">sz</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;coerced string: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;"> (length </span><span style="color:#79B8FF;">%lu</span><span style="color:#9ECBFF;">)</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, ptr, (</span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">sz</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* -&gt; &quot;Error&quot; */</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ptr;</span></span>
<span class="line"><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> sz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Coercion causes error. */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_eval_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;({ toString: function () { throw new Error(&#39;toString error&#39;); } })&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_safe_to_lstring</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">sz</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;coerced string: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> (length </span><span style="color:#005CC5;">%lu</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ptr, (</span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) </span><span style="color:#E36209;">sz</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* -&gt; &quot;Error: toString error&quot; */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Coercion causes error, and the error itself cannot be string coerced. */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_eval_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;({ toString: function () { var e = new Error(&#39;cannot string coerce me&#39;);&quot;</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;                           e.toString = function () { throw new Error(&#39;coercion error&#39;); };&quot;</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#032F62;">&quot;                           throw e; } })&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_safe_to_lstring</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">sz</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;coerced string: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;"> (length </span><span style="color:#005CC5;">%lu</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ptr, (</span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;">) </span><span style="color:#E36209;">sz</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* -&gt; &quot;Error&quot; */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_to_lstring</p>`,13),t=[p];function e(r,c,y,E,i,u){return n(),a("div",null,t)}const _=s(l,[["render",e]]);export{F as __pageData,_ as default};
