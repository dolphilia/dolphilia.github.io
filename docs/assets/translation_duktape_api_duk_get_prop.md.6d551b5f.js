import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.92ce8a2a.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_get_prop.md","filePath":"translation/duktape/api/duk_get_prop.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_get_prop.md"},l=p(`<h2 id="duk-get-prop" tabindex="-1">duk_get_prop() <a class="header-anchor" href="#duk-get-prop" aria-label="Permalink to &quot;duk_get_prop()&quot;">​</a></h2><p>1.0.0 property</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_bool_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_prop</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">obj_idx</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_bool_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_prop</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">obj_idx</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | obj | ... | key -&gt; | ... | obj | ... | val | (if key exists) | ... | obj | ... | key -&gt; | ... | obj | ... | undefined | (if key doesn&#39;t exist)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>obj_idx に指定された値のプロパティキーを取得します。リターンコードとエラースローの動作。</p><p>プロパティが存在する場合、1 が返され、key はバリュースタック上のプロパティ値で置き換えられます。プロパティがアクセサである場合、getter 関数はエラーを投げます。かもしれない。 プロパティが存在しない場合、0 が返され、key はバリュースタック上の undefined に置き換えられます。 obj_idx の値がオブジェクト互換でない場合、エラーを投げます。。 obj_idx が無効な場合、エラーがスローされます。 プロパティの読み取りは ECMAScript 式 res = obj[key] と同等であるが、プロパティの有無は呼び出しの戻り値で示されるという例外があります。正確なセマンティクスについては、プロパティアクセサ、GetValue（V）、および [[Get]] (P) を参照してください。ターゲット値及びキーは両方とも強制されます。</p><p>ターゲット値は自動的にオブジェクトにコーセーされます。例えば、文字列はStringに変換され、その &quot;length &quot;プロパティにアクセスすることができます。 key 引数は内部的に ToPropertyKey() 強制変換で文字列か Symbol に変換されます。配列や数値インデックスに対しては、明示的な文字列強制を回避する内部的な高速パスが存在するため、該当する場合は数値キーを使用します。 ターゲットが get トラップを実装する Proxy オブジェクトである場合、トラップが呼び出され、API コールは常に 1 (すなわち、プロパティが存在する) を返します: プロパティの不在/存在は、get Proxy トラップで示されません。このように、ターゲットオブジェクトが潜在的にProxyである場合、APIコールの戻り値は限定的にしか利用できない場合があります。</p><p>もしキーが固定文字列であれば、1回のAPIコールを回避して、 duk_get_prop_string() variant を使用することができます。同様に、キーが配列のインデックスである場合、 duk_get_prop_index() を使用することができます。</p><p>プロパティアクセスの基本値は通常オブジェクトですが、技術的には任意の値にすることができます。普通の文字列やバッファの値には仮想的なインデックスプロパティがあり、例えば &quot;foo&quot;[2] にアクセスすることができます。また、ほとんどのプリミティブな値は何らかのプロトタイプオブジェクトを継承しているので、例えば (12345).toString(16) のようにメソッドを呼び出すことができます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* reading [global object].Math.PI */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_global_object</span><span style="color:#E1E4E8;">(ctx);</span><span style="color:#6A737D;">    /* -&gt; [ global ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;Math&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">   /* -&gt; [ global &quot;Math&quot; ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_get_prop</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">          /* -&gt; [ global Math ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;PI&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">     /* -&gt; [ global Math &quot;PI&quot; ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_get_prop</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">          /* -&gt; [ global Math PI ] */</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Math.PI is </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">duk_get_number</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop_n</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* reading a configuration value, cfg_idx is normalized</span></span>
<span class="line"><span style="color:#6A737D;"> * index of a configuration object.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;mySetting&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">duk_get_prop</span><span style="color:#E1E4E8;">(ctx, cfg_idx)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">str_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;configuration setting present, value: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, str_value);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;configuration setting missing</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span><span style="color:#6A737D;">  /* remember to pop, regardless of whether or not present */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* reading [global object].Math.PI */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_global_object</span><span style="color:#24292E;">(ctx);</span><span style="color:#6A737D;">    /* -&gt; [ global ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;Math&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">   /* -&gt; [ global &quot;Math&quot; ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_get_prop</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">          /* -&gt; [ global Math ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;PI&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">     /* -&gt; [ global Math &quot;PI&quot; ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_get_prop</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">          /* -&gt; [ global Math PI ] */</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Math.PI is </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">duk_get_number</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop_n</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* reading a configuration value, cfg_idx is normalized</span></span>
<span class="line"><span style="color:#6A737D;"> * index of a configuration object.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;mySetting&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">duk_get_prop</span><span style="color:#24292E;">(ctx, cfg_idx)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;configuration setting present, value: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, str_value);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;configuration setting missing</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span><span style="color:#6A737D;">  /* remember to pop, regardless of whether or not present */</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_get_prop_index duk_get_prop_string duk_get_prop_lstring duk_get_prop_literal duk_get_prop_heapptr</p>`,16),t=[l];function e(r,c,y,i,E,u){return a(),n("div",null,t)}const g=s(o,[["render",e]]);export{_ as __pageData,g as default};
