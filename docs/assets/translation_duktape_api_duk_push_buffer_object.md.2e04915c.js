import{_ as a,o as s,c as e,R as n}from"./chunks/framework.320df067.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_push_buffer_object.md","filePath":"translation/duktape/api/duk_push_buffer_object.md","lastUpdated":1676126774000}'),t={name:"translation/duktape/api/duk_push_buffer_object.md"},l=n(`<h2 id="duk-push-buffer-object" tabindex="-1">duk_push_buffer_object() <a class="header-anchor" href="#duk-push-buffer-object" aria-label="Permalink to &quot;duk_push_buffer_object()&quot;">​</a></h2><p>1.3.0 stack buffer object</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_push_buffer_object</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">duk_idx_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">idx_buffer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">duk_size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">byte_offset</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">duk_size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">byte_length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">duk_uint_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | buffer | ... | -&gt; | ... | buffer | ... | bufobj | (when creating an ArrayBuffer or a view) | ... | ArrayBuffer | ... | -&gt; | ... | ArrayBuffer | ... | bufobj | (when creating a view)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>新しいバッファオブジェクトまたはバッファビューオブジェクトをプッシュします。基本となるプレーンなバッファまたは ArrayBuffer (ビューを作成するときに受け取ります) が、インデックス idx_buffer で提供されます。バッファまたはビューのタイプは flags で与えられます (例: DUK_BUFOBJ_UINT16ARRAY)。バッファから使用されるアクティブな範囲または「スライス」は byte_offset と byte_length によって示されます。</p><p>利用可能なバッファの種類は以下の通りです。</p><p>定義 バッファ/ビュータイプ</p><p>DUK_BUFOBJ_NODEJS_BUFFER Buffer (Node.js), a Uint8Array inheriting from Buffer.prototype DUK_BUFOBJ_ARRAYBUFFER ArrayBuffer DUK_BUFOBJ_DATAVIEW DataView DUK_BUFOBJ_INT8ARRAY Int8Array DUK_BUFOBJ_UINT8ARRAY Uint8Array DUK_BUFOBJ_UINT8CLAMPEDARRAY Uint8ClampedArray DUK_BUFOBJ_INT16ARRAY Int16Array DUK_BUFOBJ_UINT16ARRAY Uint16Array DUK_BUFOBJ_INT32ARRAY Int32Array DUK_BUFOBJ_UINT32ARRAY Uint32Array DUK_BUFOBJ_FLOAT32ARRAY Float32Array DUK_BUFOBJ_FLOAT64ARRAY Float64Array</p><p>ArrayBuffer 以外のものを作成し、引数として与えられたバッキングバッファがプレーンバッファである場合、ビューをバッキングする ArrayBuffer が自動的に作成されます。これは、ビューオブジェクトのbufferプロパティからアクセス可能です。ArrayBufferの内部byteOffsetは0になり、ArrayBufferのインデックスbyteOffsetはビューのインデックス0に一致します。ArrayBufferのbyteLengthは、ビューの範囲がArrayBufferに対して有効であるように、byte_offset + byte_lengthになるでしょう。</p><p>ArrayBufferを作成するとき、byte_offset引数は0にすることを強くお勧めします。さもなければ、ArrayBuffer上で構築されたビューの外部.byteOffsetプロパティは、誤解を招くでしょう：その値は、ArrayBufferに対する相対値ではなく、ArrayBufferの下にあるプレーンバッファに対する相対値となります。ゼロのbyte_offsetでは、2つのオフセットの間に違いはありません。</p><p>基礎となるプレーンバッファーは通常 byte_offset と byte_length 引数で示される範囲をカバーすべきですが、そうでない場合でもメモリ安全性は保証されます。例えば、基礎となるバッファの外側の値を読み込もうとすると、0が返されます。バッファオブジェクトの作成時に、意図的に基礎となるバッファのサイズをチェックしません: 作成時にバッファがバイト範囲を完全にカバーしていたとしても、後でサイズが変更されるかもしれません。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* Map byte range [100,150[ of plain buffer at idx_plain_buf into a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Uint16Array object which will have the following properties:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - length: 25             (length in Uint16 elements)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - byteLength: 50         (length in bytes)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - byteOffset: 100        (byte offset to start of slice)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - BYTES_PER_ELEMENT: 2   (Uint16)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * The Uint16Array&#39;s .buffer property will be an ArrayBuffer with the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * following properties:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - byteLength: 200</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - internal byteOffset: 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">duk_push_buffer_object</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> idx_plain_buf</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> DUK_BUFOBJ_UINT16ARRAY</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_push_buffer duk_push_fixed_buffer duk_push_dynamic_buffer duk_push_external_buffer</p>`,18),o=[l];function r(p,c,i,f,y,_){return s(),e("div",null,o)}const b=a(t,[["render",r]]);export{u as __pageData,b as default};
