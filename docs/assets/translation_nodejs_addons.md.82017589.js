import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"C++アドオン","description":"","frontmatter":{},"headers":[],"relativePath":"translation/nodejs/addons.md","filePath":"translation/nodejs/addons.md","lastUpdated":1693382780000}'),p={name:"translation/nodejs/addons.md"},o=l(`<h1 id="c-アドオン" tabindex="-1">C++アドオン <a class="header-anchor" href="#c-アドオン" aria-label="Permalink to &quot;C++アドオン&quot;">​</a></h1><p>Addons は C++ で書かれた動的にリンクされる共有オブジェクトです。<code>require()</code>関数はアドオンを通常のNode.jsモジュールとしてロードすることができます。アドオンは JavaScript と C/C++ ライブラリ間のインタフェースを提供します。</p><p>アドオンの実装には3つのオプションがある：Node-API、nan、または内部 V8、libuv、Node.js ライブラリの直接使用です。Node-APIで公開されていない機能に直接アクセスする必要がない限り、Node-APIを使用してください。Node-API の詳細については、C/C++ addons with Node-API を参照してください。</p><p>Node-API を使用しない場合、アドオンの実装は複雑で、複数のコンポーネントや API の知識が必要になります：</p><ul><li>V8: Node.js が JavaScript 実装を提供するために使用する C++ ライブラリ。V8は、オブジェクトの作成や関数の呼び出しなどのメカニズムを提供します。V8 の API は <code>v8.h</code> ヘッダーファイル（Node.js のソースツリーでは <code>deps/v8/include/v8.h</code>）に記述されています。</li><li>libuv：libuv: Node.js のイベントループ、ワーカースレッド、プラットフォームの非同期ビヘイビアを実装する C ライブラリです。また、クロスプラットフォームの抽象化ライブラリとしても機能し、ファイルシステム、ソケット、タイマー、システムイベントとのやり取りなど、多くの一般的なシステムタスクに対して、すべての主要なオペレーティングシステム上でPOSIXライクなアクセスを簡単に提供します。libuvはまた、標準のイベントループを超える高度な非同期アドオンのために、POSIXスレッドに似たスレッド抽象化を提供します。アドオンの作者は、libuv を介した作業をノンブロッキングのシステム操作、ワーカースレッド、または libuv スレッドのカスタム使用にオフロードすることで、I/O やその他の時間のかかるタスクでイベントループをブロックすることを避ける必要があります。</li><li>内部 Node.js ライブラリ: Node.js 自身が、アドオンが使用できる C++ API をエクスポートしており、その中で最も重要なものは <code>node::ObjectWrap</code> クラスです。</li><li>Node.js は OpenSSL を含む他の静的にリンクされたライブラリを含んでいます。これらのライブラリは Node.js ソースツリーの <code>deps/</code> ディレクトリにあります。libuv, OpenSSL, V8, zlib シンボルだけが Node.js によって意図的に再エクスポートされ、アドオンによって様々な範囲で使用されます。追加情報については、Node.js に含まれるライブラリへのリンクを参照してください。</li></ul><p>以下のサンプルはすべてダウンロード可能で、アドオンの開始点として使用することができます。</p><h2 id="hello-world" tabindex="-1">Hello world <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello world&quot;">​</a></h2><p>この「Hello world」の例は、C++で書かれたシンプルなアドオンで、次のJavaScriptコードに相当する：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>まず、<code>hello.cc</code>ファイルを作成する：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// hello.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      isolate, </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Initialize</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, Method);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Initialize)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// hello.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Method</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      isolate, </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Initialize</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(exports, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, Method);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Initialize)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>すべてのNode.jsアドオンは、パターンに従った初期化関数をエクスポートする必要があります：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Initialize</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Initialize)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Initialize</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Initialize)</span></span></code></pre></div><p>関数ではないので、<code>NODE_MODULE</code>の後にセミコロンはありません（<code>node.h</code>を参照）。</p><p>モジュール名 <code>module_name</code> は最終的なバイナリのファイル名と一致しなければならない（接尾辞 <code>.node</code> は除く）。</p><p><code>hello.cc</code> の例では、初期化関数は <code>Initialize</code> で、アドオンモジュール名は <code>addon</code> となる。</p><p><code>node-gyp</code> でアドオンをビルドする場合、<code>NODE_GYP_MODULE_NAME</code> マクロを <code>NODE_MODULE()</code> の最初のパラメータとして使用することで、最終的なバイナリの名前を <code>NODE_MODULE()</code> に渡すことができます。</p><p>NODE_MODULE()\` で定義したアドオンは、複数のコンテキストや複数のスレッドで同時にロードすることはできません。</p><h3 id="コンテキスト対応アドオン" tabindex="-1">コンテキスト対応アドオン <a class="header-anchor" href="#コンテキスト対応アドオン" aria-label="Permalink to &quot;コンテキスト対応アドオン&quot;">​</a></h3><p>Node.js アドオンを複数のコンテキストで複数回ロードする必要がある環境があります。例えば、Electron ランタイムは Node.js の複数のインスタンスを単一のプロセスで実行します。各インスタンスは独自の <code>require()</code> キャッシュを持つため、各インスタンスは <code>require()</code> 経由でロードされたときに正しく動作するネイティブアドオンが必要になります。つまり、アドオンは複数の初期化をサポートする必要があります。</p><p>マクロ <code>NODE_MODULE_INITIALIZER</code> は、Node.js がアドオンをロードする際に見つけることを期待する関数の名前に展開されます。以下の例のように、アドオンを初期化することができます：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;"> NODE_MODULE_EXPORT </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE_INITIALIZER</span><span style="color:#E1E4E8;">(Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> exports,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> module,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ここでアドオンの初期化を行います。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;"> NODE_MODULE_EXPORT </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE_INITIALIZER</span><span style="color:#24292E;">(Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> exports,</span></span>
<span class="line"><span style="color:#24292E;">                        Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> module,</span></span>
<span class="line"><span style="color:#24292E;">                        Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ここでアドオンの初期化を行います。 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>マクロ <code>NODE_MODULE_INIT()</code> を使用する方法もあります。<code>NODE_MODULE_INIT()</code>は、指定されたアドオンのイニシャライザ関数を中心にアドオンを構築するために使用される <code>NODE_MODULE()</code> とは異なり、関数本体に続くイニシャライザの宣言として機能します。</p><p>NODE_MODULE_INIT()\`の呼び出しに続く関数本体の内部では、以下の3つの変数を使用することができる：</p><ul><li><code>Local&lt;Object&gt; exports</code>,</li><li><code>Local&lt;Value&gt; module</code>, and</li><li><code>Local&lt;Context&gt; context</code></li></ul><p>コンテキストを意識したアドオンを構築するという選択には、グローバルな静的データを注意深く管理するという責任が伴います。アドオンは複数回ロードされる可能性があり、異なるスレッドからロードされる可能性もあるため、アドオンに保存されるグローバル静的データは適切に保護されなければならず、JavaScript オブジェクトへの永続的な参照を含んではなりません。なぜなら、JavaScript オブジェクトは 1 つのコンテキストでのみ有効であり、間違ったコンテキストからアクセスしたり、作成時と異なるスレッドからアクセスしたりすると、クラッシュを引き起こす可能性が高いからです。</p><p>コンテキスト対応アドオンは、以下の手順を実行することで、グローバルな静的データを回避する構造にすることができます：</p><ul><li>アドオンインスタンスごとのデータを保持し、以下の形式の静的メンバを持つクラスを定義します。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeleteInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // Cast \`data\` to an instance of the class and delete it.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeleteInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // Cast \`data\` to an instance of the class and delete it.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>アドオンのイニシャライザでこのクラスのインスタンスをヒープ確保する。これは <code>new</code> キーワードを使用して実現できます。</li><li><code>node::AddEnvironmentCleanupHook()</code>を呼び出し、上記で作成したインスタンスと <code>DeleteInstance()</code> へのポインタを渡します。これにより、環境が取り壊されるときにインスタンスが確実に削除されます。</li><li>クラスのインスタンスを <code>v8::External</code> に格納する。</li><li><code>v8::External</code>を <code>v8::FunctionTemplate::New()</code> または <code>v8::Function::New()</code> に渡して、JavaScript に公開するすべてのメソッドに渡す。<code>v8::FunctionTemplate::New()</code>または <code>v8::Function::New()</code> の3番目のパラメータは <code>v8::External</code> を受け取り、<code>v8::FunctionCallbackInfo::Data()</code> メソッドを用いてネイティブコールバックで利用できるようにする。</li></ul><p>これにより、アドオンインスタンスごとのデータが、JavaScript から呼び出せる各バインディングに確実に届くようになります。アドオンインスタンスごとのデータは、アドオンが作成する非同期コールバックにも渡される必要があります。</p><p>次の例は、コンテキスト対応アドオンの実装を示しています：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddonData</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddonData</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">call_count</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 環境のクリーンアップ時に、このアドオンインスタンスごとのデータが削除されるようにします。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, DeleteInstance, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // アドオンごとのデータ。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> call_count;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeleteInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">AddonData</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // アドンインスタンスごとのデータを取得する。</span></span>
<span class="line"><span style="color:#E1E4E8;">  AddonData</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">reinterpret_cast&lt;</span><span style="color:#E1E4E8;">AddonData</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(info.</span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">().As</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">External</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  data-&gt;call_count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  info.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">)data-&gt;call_count);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE_INIT</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* exports, module, context */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context-&gt;</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // このアドオンのインスタンス用に \`AddonData\` の新しいインスタンスを作成し、そのライフサイクルを Node.js 環境のライフサイクルと関連付ける。</span></span>
<span class="line"><span style="color:#E1E4E8;">  AddonData</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddonData</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // データを \`v8::External\` でラップして、公開するメソッドに渡せるようにする。</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">External</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> external </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">External</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // メソッド \`Method\` を JavaScript に公開し、\`FunctionTemplate\` コンストラクタの 3 番目のパラメータとして \`external\` を渡して、上で作成したアドオンインスタンスごとのデータを受け取るようにする。</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports-&gt;</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(context,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">FunctionTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, Method, external)</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">GetFunction</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">FromJust</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddonData</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddonData</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">call_count</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 環境のクリーンアップ時に、このアドオンインスタンスごとのデータが削除されるようにします。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, DeleteInstance, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // アドオンごとのデータ。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> call_count;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeleteInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">AddonData</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Method</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // アドンインスタンスごとのデータを取得する。</span></span>
<span class="line"><span style="color:#24292E;">  AddonData</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">reinterpret_cast&lt;</span><span style="color:#24292E;">AddonData</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(info.</span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">().As</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">External</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  data-&gt;call_count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  info.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">)data-&gt;call_count);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE_INIT</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* exports, module, context */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context-&gt;</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // このアドオンのインスタンス用に \`AddonData\` の新しいインスタンスを作成し、そのライフサイクルを Node.js 環境のライフサイクルと関連付ける。</span></span>
<span class="line"><span style="color:#24292E;">  AddonData</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddonData</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // データを \`v8::External\` でラップして、公開するメソッドに渡せるようにする。</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">External</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> external </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">External</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // メソッド \`Method\` を JavaScript に公開し、\`FunctionTemplate\` コンストラクタの 3 番目のパラメータとして \`external\` を渡して、上で作成したアドオンインスタンスごとのデータを受け取るようにする。</span></span>
<span class="line"><span style="color:#24292E;">  exports-&gt;</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(context,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate, </span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">FunctionTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, Method, external)</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">GetFunction</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">FromJust</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="workerサポート" tabindex="-1">Workerサポート <a class="header-anchor" href="#workerサポート" aria-label="Permalink to &quot;Workerサポート&quot;">​</a></h4><p>メインスレッドやWorkerスレッドなど、複数のNode.js環境からロードするためには、アドオンは以下のいずれかを行う必要がある：</p><ul><li>Node-API アドオンである。</li><li>上記のように <code>NODE_MODULE_INIT()</code> を使用してコンテキスト対応として宣言されている。</li></ul><p><code>Worker</code> スレッドをサポートするために、アドオンはそのようなスレッドが存在するときに割り当てたリソースをクリーンアップする必要があります。これは <code>AddEnvironmentCleanupHook()</code> 関数を使うことで実現できる：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> (*</span><span style="color:#FFAB70;">fun</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> (*</span><span style="color:#E36209;">fun</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">);</span></span></code></pre></div><p>この関数は、与えられた Node.js インスタンスがシャットダウンする前に実行されるフックを追加する。必要であれば、同じシグネチャを持つ <code>RemoveEnvironmentCleanupHook()</code> を使って、実行前にフックを削除することができます。コールバックは最後から順に実行されます。</p><p>必要であれば、追加の <code>AddEnvironmentCleanupHook()</code> と <code>RemoveEnvironmentCleanupHook()</code> オーバーロードのペアがあり、クリーンアップフックはコールバック関数を受け取る。これは、アドオンによって登録された libuv ハンドルのような非同期リソースをシャットダウンするために使用できます。</p><p>次の <code>addon.cc</code> は <code>AddEnvironmentCleanupHook</code> を使用している：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;assert.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::HandleScope;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注：実際のアプリケーションでは、静的／グローバルなデータに依存しないこと。</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> cookie[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;yum yum&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> cleanup_cb1_called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> cleanup_cb2_called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cleanup_cb1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Isolate</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(arg);</span></span>
<span class="line"><span style="color:#E1E4E8;">  HandleScope </span><span style="color:#B392F0;">scope</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">IsEmpty</span><span style="color:#E1E4E8;">());</span><span style="color:#6A737D;">  // アサートVMはまだ生きている</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(obj-&gt;</span><span style="color:#B392F0;">IsObject</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  cleanup_cb1_called</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cleanup_cb2</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(arg </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;void*&gt;</span><span style="color:#E1E4E8;">(cookie));</span></span>
<span class="line"><span style="color:#E1E4E8;">  cleanup_cb2_called</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sanity_check</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(cleanup_cb1_called </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(cleanup_cb2_called </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE_INIT</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* exports, module, context */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context-&gt;</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, sanity_check, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, cleanup_cb2, cookie);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, cleanup_cb1, isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;assert.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::HandleScope;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注：実際のアプリケーションでは、静的／グローバルなデータに依存しないこと。</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> cookie[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;yum yum&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cleanup_cb1_called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cleanup_cb2_called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cleanup_cb1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Isolate</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(arg);</span></span>
<span class="line"><span style="color:#24292E;">  HandleScope </span><span style="color:#6F42C1;">scope</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">IsEmpty</span><span style="color:#24292E;">());</span><span style="color:#6A737D;">  // アサートVMはまだ生きている</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(obj-&gt;</span><span style="color:#6F42C1;">IsObject</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  cleanup_cb1_called</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cleanup_cb2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(arg </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;void*&gt;</span><span style="color:#24292E;">(cookie));</span></span>
<span class="line"><span style="color:#24292E;">  cleanup_cb2_called</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sanity_check</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(cleanup_cb1_called </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(cleanup_cb2_called </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE_INIT</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* exports, module, context */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context-&gt;</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, sanity_check, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, cleanup_cb2, cookie);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, cleanup_cb1, isolate);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Test in JavaScript by running:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="建物" tabindex="-1">建物 <a class="header-anchor" href="#建物" aria-label="Permalink to &quot;建物&quot;">​</a></h3><p>ソースコードを書き終えたら、バイナリの <code>addon.node</code> ファイルにコンパイルしなければならない。そのためには、プロジェクトのトップレベルに <code>binding.gyp</code> というファイルを作成し、JSON ライクなフォーマットでモジュールのビルド設定を記述する。このファイルは、Node.jsアドオンをコンパイルするために特別に書かれたツールであるnode-gypによって使用されます。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;targets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;target_name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;addon&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [ </span><span style="color:#9ECBFF;">&quot;hello.cc&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;targets&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;target_name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;addon&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;sources&quot;</span><span style="color:#24292E;">: [ </span><span style="color:#032F62;">&quot;hello.cc&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>node-gyp</code> ユーティリティのバージョンは Node.js にバンドルされ、 <code>npm</code> の一部として配布される。このバージョンは開発者が直接使用できるようにはなっておらず、アドオンをコンパイルしてインストールするために <code>npm install</code> コマンドを使用する機能をサポートすることのみを目的としています。node-gyp<code>を直接使いたい開発者は</code>npm install -g node-gyp<code>コマンドを使ってインストールすることができる。プラットフォーム固有の要件など、詳細については</code>node-gyp\` のインストール手順を参照してほしい。</p><p>binding.gyp<code>ファイルを作成したら、</code>node-gyp configure<code>を使用して、現在のプラットフォームに適したプロジェクトのビルドファイルを生成する。これは</code>Makefile<code>(Unix プラットフォームの場合) または</code>vcxproj<code>ファイル (Windows の場合) を</code>build/\` ディレクトリに生成します。</p><p>次に、コンパイルした <code>addon.node</code> ファイルを生成するために <code>node-gyp build</code> コマンドを実行する。このファイルは <code>build/Release/</code> ディレクトリに置かれる。</p><p>npm install<code>を使用して Node.js アドオンをインストールする場合、npm はバンドルされているバージョンの</code>node-gyp\` を使用して、これと同じ一連のアクションを実行し、ユーザのプラットフォーム用にコンパイルされたバージョンのアドオンを必要に応じて生成します。</p><p>一度ビルドされたバイナリアドオンは、ビルドされた <code>addon.node</code> モジュールに <code>require()</code> を指定することで Node.js 内から使用することができます：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// hello.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(addon.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;world&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// hello.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(addon.</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;world&#39;</span></span></code></pre></div><p>コンパイルされたアドオンバイナリの正確なパスはコンパイル方法によって異なるため (<code>./build/Debug/</code> にあることもあります)、アドオンは bindings パッケージを使ってコンパイルされたモジュールをロードすることができます。</p><p><code>bindings</code> パッケージの実装は、アドオンモジュールを見つける方法がより洗練されていますが、基本的には <code>try...catch</code> に似たパターンを使用しています：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon.node&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Debug/addon.node&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon.node&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Debug/addon.node&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="node-jsに含まれるライブラリへのリンク" tabindex="-1">Node.jsに含まれるライブラリへのリンク <a class="header-anchor" href="#node-jsに含まれるライブラリへのリンク" aria-label="Permalink to &quot;Node.jsに含まれるライブラリへのリンク&quot;">​</a></h3><p>Node.jsは、V8、libuv、OpenSSLなどの静的にリンクされたライブラリを使用します。すべてのアドオンは V8 にリンクする必要があり、他の依存ライブラリにもリンクできます。一般的には、適切な <code>#include &lt;...&gt;</code> ステートメント（例えば <code>#include &lt;v8.h&gt;</code>）を含めるだけで、 <code>node-gyp</code> が適切なヘッダを自動的に探してくれます。ただし、いくつか注意すべき点があります：</p><ul><li><p><code>node-gyp</code> が実行されると、Node.js の特定のリリースバージョンを検出し、完全なソースの tarball またはヘッダーのみをダウンロードします。node-gyp\` が実行されると、Node.js の特定のリリースバージョンを検出し、完全なソースの tarball か、ヘッダーのみをダウンロードします。しかし、Node.js ヘッダのみがダウンロードされた場合、Node.js によってエクスポートされたシンボルのみが利用可能になります。</p></li><li><p><code>node-gyp</code> は、ローカルの Node.js ソースイメージを指す <code>--nodedir</code> フラグを使用して実行できます。このオプションを使用すると、アドオンは依存関係のフルセットにアクセスできるようになります。</p></li></ul><h3 id="require-を使ったアドオンの読み込み" tabindex="-1"><code>require()</code>を使ったアドオンの読み込み <a class="header-anchor" href="#require-を使ったアドオンの読み込み" aria-label="Permalink to &quot;\`require()\`を使ったアドオンの読み込み&quot;">​</a></h3><p>コンパイルされたアドオンバイナリの拡張子は <code>.node</code> です (<code>.dll</code> や <code>.so</code> とは異なります)。require()<code>関数は </code>.node\` という拡張子のファイルを探し、ダイナミックリンクライブラリとして初期化するように書かれています。</p><p><code>require()</code>を呼び出すとき、通常は拡張子 <code>.node</code> を省略することができ、Node.js はアドオンを見つけて初期化します。ただし、注意点として、Node.js は最初に同じベース名を持つモジュールや JavaScript ファイルを探してロードしようとします。例えば、バイナリの <code>addon.node</code> と同じディレクトリに <code>addon.js</code> ファイルがある場合、 <code>require(&#39;addon&#39;)</code> は <code>addon.js</code> ファイルを優先してロードします。</p><h2 id="node-jsのネイティブ抽象化機能" tabindex="-1">Node.jsのネイティブ抽象化機能 <a class="header-anchor" href="#node-jsのネイティブ抽象化機能" aria-label="Permalink to &quot;Node.jsのネイティブ抽象化機能&quot;">​</a></h2><p>このドキュメントで説明する各例では、アドオンを実装するために Node.js と V8 API を直接使用しています。V8 API は、V8 のリリースごとに（そして Node.js のメジャーリリースごとに）劇的に変更される可能性があります。変更のたびに、アドオンは機能し続けるために更新と再コンパイルが必要になるかもしれません。Node.jsのリリーススケジュールは、このような変更の頻度と影響を最小限に抑えるように設計されていますが、V8 APIの安定性を確保するためにNode.jsができることはほとんどありません。</p><p>Native Abstractions for Node.js (または <code>nan</code>) は、アドオン開発者が V8 と Node.js の過去と将来のリリース間の互換性を保つために使用することを推奨するツールのセットを提供します。どのように使用できるかは <code>nan</code> のサンプルを参照してください。</p><h2 id="node-api" tabindex="-1">Node-API <a class="header-anchor" href="#node-api" aria-label="Permalink to &quot;Node-API&quot;">​</a></h2><blockquote><p>Stability: 2 - Stable</p></blockquote><p>Node-APIは、ネイティブアドオンを構築するためのAPIです。基礎となるJavaScriptランタイム（例えばV8）から独立しており、Node.js自体の一部として維持されています。このAPIは、Node.jsのバージョン間でアプリケーション・バイナリ・インタフェース（ABI）が安定しています。これは、基礎となるJavaScriptエンジンの変更からアドオンを隔離し、あるバージョン用にコンパイルされたモジュールが再コンパイルすることなくNode.jsの後のバージョンで実行できるようにすることを目的としています。アドオンは、このドキュメント（node-gyp など）で概説されているのと同じアプローチ/ツールでビルド/パッケージ化されます。唯一の違いは、ネイティブコードで使用されるAPIのセットです。V8 または Native Abstractions for Node.jsAPI を使用する代わりに、Node-API で利用可能な関数が使用されます。</p><p>Node-API によって提供される ABI の安定性の恩恵を受けるアドオンの作成と保守には、 特定の実装上の考慮事項が伴います。</p><p>上記の「Hello world」の例で Node-API を使用するには、<code>hello.cc</code> の内容を以下に置き換えます。その他の命令はすべて同じです。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// hello.cc using Node-API</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_api.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Method</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_callback_info</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value greeting;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_create_string_utf8</span><span style="color:#E1E4E8;">(env, </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">, NAPI_AUTO_LENGTH, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">greeting);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> greeting;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">napi_env</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">napi_value</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_status status;</span></span>
<span class="line"><span style="color:#E1E4E8;">  napi_value fn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_create_function</span><span style="color:#E1E4E8;">(env, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, Method, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">fn);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi_set_named_property</span><span style="color:#E1E4E8;">(env, exports, </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, fn);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (status </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> napi_ok) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NAPI_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// hello.cc using Node-API</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_api.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Method</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_callback_info</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_value greeting;</span></span>
<span class="line"><span style="color:#24292E;">  napi_status status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_create_string_utf8</span><span style="color:#24292E;">(env, </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">, NAPI_AUTO_LENGTH, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">greeting);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> greeting;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">napi_env</span><span style="color:#24292E;"> </span><span style="color:#E36209;">env</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">napi_value</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  napi_status status;</span></span>
<span class="line"><span style="color:#24292E;">  napi_value fn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_create_function</span><span style="color:#24292E;">(env, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Method, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">fn);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi_set_named_property</span><span style="color:#24292E;">(env, exports, </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, fn);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (status </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> napi_ok) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exports;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NAPI_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>利用可能な関数とその使用方法は、Node-APIを使用したC/C++アドオンに記載されています。</p><h2 id="アドオンの例" tabindex="-1">アドオンの例 <a class="header-anchor" href="#アドオンの例" aria-label="Permalink to &quot;アドオンの例&quot;">​</a></h2><p>以下は、開発者がアドオンを始めるためのサンプルです。例では V8 API を使用しています。また、ハンドル、スコープ、関数テンプレートなどの概念については、V8 Embedder&#39;s Guideを参照してください。</p><p>これらの例では次の <code>binding.gyp</code> ファイルを使用しています：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;targets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;target_name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;addon&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [ </span><span style="color:#9ECBFF;">&quot;addon.cc&quot;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;targets&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;target_name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;addon&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;sources&quot;</span><span style="color:#24292E;">: [ </span><span style="color:#032F62;">&quot;addon.cc&quot;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>\`\`.cc<code>ファイルが複数ある場合は、追加したファイル名を </code>sources\` 配列に追加するだけでよい：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;addon.cc&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;myexample.cc&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;sources&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;addon.cc&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;myexample.cc&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p><code>binding.gyp</code>ファイルの準備ができたら、<code>node-gyp</code>を使用してサンプルアドオンを設定し、ビルドすることができます：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">node-gyp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">configure</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">node-gyp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">configure</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span></code></pre></div><h3 id="関数引数" tabindex="-1">関数引数 <a class="header-anchor" href="#関数引数" aria-label="Permalink to &quot;関数引数&quot;">​</a></h3><p>アドオンは通常、Node.js 内で実行されている JavaScript からアクセスできるオブジェクトや関数を公開します。関数がJavaScriptから呼び出される場合、入力引数と戻り値はC/C++コードとマッピングされなければなりません。</p><p>次の例では、JavaScript から渡された関数引数を読み取り、結果を返す方法を説明します：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Exception;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Number;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 入力引数は、const FunctionCallbackInfo&lt;Value&gt;&amp; args structを使用して渡される。</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 渡された引数の数をチェックする。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // JavaScriptに返されるエラーを投げる</span></span>
<span class="line"><span style="color:#E1E4E8;">    isolate-&gt;</span><span style="color:#B392F0;">ThrowException</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;Wrong number of arguments&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 引数のタイプをチェックする</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">IsNumber</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    isolate-&gt;</span><span style="color:#B392F0;">ThrowException</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#9ECBFF;">&quot;Wrong arguments&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // オペレーションの実施</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].As</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Number</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 戻り値を設定する（渡されたFunctionCallbackInfo&lt;Value&gt;&amp;を使用）。</span></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(num);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#9ECBFF;">&quot;add&quot;</span><span style="color:#E1E4E8;">, Add);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Exception;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Number;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 入力引数は、const FunctionCallbackInfo&lt;Value&gt;&amp; args structを使用して渡される。</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 渡された引数の数をチェックする。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // JavaScriptに返されるエラーを投げる</span></span>
<span class="line"><span style="color:#24292E;">    isolate-&gt;</span><span style="color:#6F42C1;">ThrowException</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;Wrong number of arguments&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 引数のタイプをチェックする</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">IsNumber</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    isolate-&gt;</span><span style="color:#6F42C1;">ThrowException</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#032F62;">&quot;Wrong arguments&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // オペレーションの実施</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].As</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Number</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 戻り値を設定する（渡されたFunctionCallbackInfo&lt;Value&gt;&amp;を使用）。</span></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(exports, </span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;">, Add);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>コンパイルが完了したら、Node.js 内から例のアドオンを要求し、使用することができます：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This should be eight:&#39;</span><span style="color:#E1E4E8;">, addon.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;This should be eight:&#39;</span><span style="color:#24292E;">, addon.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span></code></pre></div><h3 id="コールバック" tabindex="-1">コールバック <a class="header-anchor" href="#コールバック" aria-label="Permalink to &quot;コールバック&quot;">​</a></h3><p>アドオンでは、JavaScript 関数を C++ 関数に渡し、そこから実行するのが一般的です。次の例は、このようなコールバックを呼び出す方法を示しています：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Null;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate,</span></span>
<span class="line"><span style="color:#E1E4E8;">                          </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">() };</span></span>
<span class="line"><span style="color:#E1E4E8;">  cb-&gt;</span><span style="color:#B392F0;">Call</span><span style="color:#E1E4E8;">(context, </span><span style="color:#B392F0;">Null</span><span style="color:#E1E4E8;">(isolate), argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(module, </span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, RunCallback);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Null;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunCallback</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">() };</span></span>
<span class="line"><span style="color:#24292E;">  cb-&gt;</span><span style="color:#6F42C1;">Call</span><span style="color:#24292E;">(context, </span><span style="color:#6F42C1;">Null</span><span style="color:#24292E;">(isolate), argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(module, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, RunCallback);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>この例では、2 つの引数を持つ <code>Init()</code> を使用し、2 番目の引数として完全な <code>module</code> オブジェクトを受け取ります。これにより、アドオンは <code>exports</code> のプロパティとして関数を追加するのではなく、単一の関数で <code>exports</code> を完全に上書きすることができる。</p><p>テストするには、以下のJavaScriptを実行する：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">addon</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">addon</span><span style="color:#24292E;">((</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>この例では、コールバック関数は同期的に呼び出される。</p><h3 id="オブジェクト・ファクトリ" tabindex="-1">オブジェクト・ファクトリ <a class="header-anchor" href="#オブジェクト・ファクトリ" aria-label="Permalink to &quot;オブジェクト・ファクトリ&quot;">​</a></h3><p>アドオンは、次の例に示すように、C++ 関数内から新しいオブジェクトを作成して返すことができます。オブジェクトが作成され、<code>createObject()</code> に渡された文字列を echo する <code>msg</code> プロパティとともに返される：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj-&gt;</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(context,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate,</span></span>
<span class="line"><span style="color:#E1E4E8;">                               </span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                               args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">ToString</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">FromJust</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(module, </span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, CreateObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  obj-&gt;</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(context,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate,</span></span>
<span class="line"><span style="color:#24292E;">                               </span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                               args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">ToString</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">FromJust</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(module, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, CreateObject);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>JavaScriptでテストする：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addon</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addon</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj1.msg, obj2.msg);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addon</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addon</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj1.msg, obj2.msg);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span></code></pre></div><h3 id="関数ファクトリ" tabindex="-1">関数ファクトリ <a class="header-anchor" href="#関数ファクトリ" aria-label="Permalink to &quot;関数ファクトリ&quot;">​</a></h3><p>もうひとつのよくあるシナリオは、C++関数をラップしたJavaScript関数を作り、それをJavaScriptに返すというものだ：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyFunction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      isolate, </span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateFunction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">FunctionTemplate</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, MyFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tpl-&gt;</span><span style="color:#B392F0;">GetFunction</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 匿名にする場合は省略</span></span>
<span class="line"><span style="color:#E1E4E8;">  fn-&gt;</span><span style="color:#B392F0;">SetName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      isolate, </span><span style="color:#9ECBFF;">&quot;theFunction&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(fn);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(module, </span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, CreateFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyFunction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      isolate, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateFunction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">FunctionTemplate</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, MyFunction);</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tpl-&gt;</span><span style="color:#6F42C1;">GetFunction</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 匿名にする場合は省略</span></span>
<span class="line"><span style="color:#24292E;">  fn-&gt;</span><span style="color:#6F42C1;">SetName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      isolate, </span><span style="color:#032F62;">&quot;theFunction&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(fn);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(module, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, CreateFunction);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, Init)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>To test:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addon</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addon</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: &#39;hello world&#39;</span></span></code></pre></div><h3 id="c-オブジェクトのラッピング" tabindex="-1">C++オブジェクトのラッピング <a class="header-anchor" href="#c-オブジェクトのラッピング" aria-label="Permalink to &quot;C++オブジェクトのラッピング&quot;">​</a></h3><p>JavaScriptの <code>new</code> 演算子を使用して新しいインスタンスを作成できるように、C++ オブジェクト/クラスをラップすることも可能です：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InitAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(exports);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InitAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(exports);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>次に、<code>myobject.h</code> でラッパークラスは <code>node::ObjectWrap</code> を継承する：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#F97583;">#ifndef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">~MyObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlusOne</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#D73A49;">#ifndef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">~MyObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlusOne</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>で、公開するメソッドを実装する。以下では、コンストラクタのプロトタイプにメソッド <code>plusOne()</code> を追加して公開している：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Number;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::ObjectTemplate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value) : </span><span style="color:#B392F0;">value_</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">~</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> exports-&gt;</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ObjectTemplate</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> addon_data_tpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  addon_data_tpl-&gt;</span><span style="color:#B392F0;">SetInternalFieldCount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  // 1 field for the MyObject::New()</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> addon_data </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      addon_data_tpl-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">FunctionTemplate</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, New, addon_data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">SetClassName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#9ECBFF;">&quot;MyObject&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">InstanceTemplate</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">SetInternalFieldCount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#E1E4E8;">(tpl, </span><span style="color:#9ECBFF;">&quot;plusOne&quot;</span><span style="color:#E1E4E8;">, PlusOne);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tpl-&gt;</span><span style="color:#B392F0;">GetFunction</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  addon_data-&gt;</span><span style="color:#B392F0;">SetInternalField</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">  exports-&gt;</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(context, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      isolate, </span><span style="color:#9ECBFF;">&quot;MyObject&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      constructor).</span><span style="color:#B392F0;">FromJust</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#B392F0;">IsConstructCall</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">IsUndefined</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">NumberValue</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">FromMaybe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    obj-&gt;</span><span style="color:#B392F0;">Wrap</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cons </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        args.</span><span style="color:#B392F0;">Data</span><span style="color:#E1E4E8;">().As</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">GetInternalField</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).As</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        cons-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context, argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PlusOne</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Unwrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">&gt;(args.</span><span style="color:#B392F0;">Holder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj-&gt;value_ </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, obj-&gt;value_));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Number;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::ObjectTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value) : </span><span style="color:#6F42C1;">value_</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> exports-&gt;</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ObjectTemplate</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> addon_data_tpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  addon_data_tpl-&gt;</span><span style="color:#6F42C1;">SetInternalFieldCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  // 1 field for the MyObject::New()</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> addon_data </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      addon_data_tpl-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">FunctionTemplate</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, New, addon_data);</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">SetClassName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate, </span><span style="color:#032F62;">&quot;MyObject&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">InstanceTemplate</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">SetInternalFieldCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prototype</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#24292E;">(tpl, </span><span style="color:#032F62;">&quot;plusOne&quot;</span><span style="color:#24292E;">, PlusOne);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tpl-&gt;</span><span style="color:#6F42C1;">GetFunction</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  addon_data-&gt;</span><span style="color:#6F42C1;">SetInternalField</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, constructor);</span></span>
<span class="line"><span style="color:#24292E;">  exports-&gt;</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(context, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      isolate, </span><span style="color:#032F62;">&quot;MyObject&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      constructor).</span><span style="color:#6F42C1;">FromJust</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#6F42C1;">IsConstructCall</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">IsUndefined</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">NumberValue</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">FromMaybe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    obj-&gt;</span><span style="color:#6F42C1;">Wrap</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cons </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        args.</span><span style="color:#6F42C1;">Data</span><span style="color:#24292E;">().As</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">GetInternalField</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).As</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        cons-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context, argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PlusOne</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Unwrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">&gt;(args.</span><span style="color:#6F42C1;">Holder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  obj-&gt;value_ </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, obj-&gt;value_));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>このサンプルをビルドするには、<code>myobject.cc</code>ファイルを<code>binding.gyp</code>に追加しなければならない：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;targets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;target_name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;addon&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;addon.cc&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;myobject.cc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;targets&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;target_name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;addon&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;sources&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;addon.cc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;myobject.cc&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Test it with:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> addon.</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 11</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 12</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 13</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> addon.</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 11</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 12</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 13</span></span></code></pre></div><p>ラッパー・オブジェクトのデストラクタは、そのオブジェクトがガベージ・コレクションされたときに実行されます。デストラクタのテストのために、強制的にガベージ・コレクションを実行できるコマンドライン・フラグがあります。これらのフラグはV8 JavaScriptエンジンによって提供されています。これらはいつでも変更または削除される可能性があります。これらは Node.js や V8 によって文書化されておらず、テスト以外では決して使用しないでください。</p><p>プロセスやワーカースレッドのシャットダウン時に、JSエンジンはデストラクタを呼び出しません。したがって、これらのオブジェクトを追跡し、リソースリークを避けるために適切に破棄するのはユーザーの責任です。</p><h3 id="ラップされたオブジェクトのファクトリー" tabindex="-1">ラップされたオブジェクトのファクトリー <a class="header-anchor" href="#ラップされたオブジェクトのファクトリー" aria-label="Permalink to &quot;ラップされたオブジェクトのファクトリー&quot;">​</a></h3><p>あるいは、ファクトリーパターンを使って、JavaScript の <code>new</code> 演算子を使った明示的なオブジェクトインスタンスの生成を避けることもできます：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addon.</span><span style="color:#B392F0;">createObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// instead of:</span></span>
<span class="line"><span style="color:#6A737D;">// const obj = new addon.Object();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addon.</span><span style="color:#6F42C1;">createObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// instead of:</span></span>
<span class="line"><span style="color:#6A737D;">// const obj = new addon.Object();</span></span></code></pre></div><p>まず、<code>createObject()</code> メソッドは <code>addon.cc</code> に実装されている：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InitAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(exports-&gt;</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(module, </span><span style="color:#9ECBFF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">, CreateObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InitAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(exports-&gt;</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(module, </span><span style="color:#032F62;">&quot;exports&quot;</span><span style="color:#24292E;">, CreateObject);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p><code>myobject.h</code>では、オブジェクトのインスタンスを生成するための静的メソッド <code>NewInstance()</code> が追加されている。このメソッドはJavaScriptで <code>new</code> を使う代わりとなる：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#F97583;">#ifndef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">~MyObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PlusOne</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Global</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> constructor;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#D73A49;">#ifndef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">~MyObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PlusOne</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Global</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> constructor;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>の実装は前の例と似ている：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Global;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Number;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#E1E4E8;">Global</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::constructor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value) : </span><span style="color:#B392F0;">value_</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">~</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">FunctionTemplate</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, New);</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">SetClassName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#9ECBFF;">&quot;MyObject&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">InstanceTemplate</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">SetInternalFieldCount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prototype</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#E1E4E8;">(tpl, </span><span style="color:#9ECBFF;">&quot;plusOne&quot;</span><span style="color:#E1E4E8;">, PlusOne);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  constructor.</span><span style="color:#B392F0;">Reset</span><span style="color:#E1E4E8;">(isolate, tpl-&gt;</span><span style="color:#B392F0;">GetFunction</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, [](</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    constructor.</span><span style="color:#B392F0;">Reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#B392F0;">IsConstructCall</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">IsUndefined</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">NumberValue</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">FromMaybe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    obj-&gt;</span><span style="color:#B392F0;">Wrap</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cons </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        cons-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context, argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cons </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      cons-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context, argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">PlusOne</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Unwrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">&gt;(args.</span><span style="color:#B392F0;">Holder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj-&gt;value_ </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, obj-&gt;value_));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Global;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Number;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#24292E;">Global</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::constructor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value) : </span><span style="color:#6F42C1;">value_</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">FunctionTemplate</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, New);</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">SetClassName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate, </span><span style="color:#032F62;">&quot;MyObject&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">InstanceTemplate</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">SetInternalFieldCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Prototype</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#24292E;">(tpl, </span><span style="color:#032F62;">&quot;plusOne&quot;</span><span style="color:#24292E;">, PlusOne);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  constructor.</span><span style="color:#6F42C1;">Reset</span><span style="color:#24292E;">(isolate, tpl-&gt;</span><span style="color:#6F42C1;">GetFunction</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, [](</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    constructor.</span><span style="color:#6F42C1;">Reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#6F42C1;">IsConstructCall</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">IsUndefined</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">NumberValue</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">FromMaybe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    obj-&gt;</span><span style="color:#6F42C1;">Wrap</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cons </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        cons-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context, argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cons </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      cons-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context, argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">PlusOne</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Unwrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">&gt;(args.</span><span style="color:#6F42C1;">Holder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  obj-&gt;value_ </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, obj-&gt;value_));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>もう一度言うが、このサンプルをビルドするには、<code>myobject.cc</code>ファイルを<code>binding.gyp</code>に追加しなければならない：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;targets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;target_name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;addon&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;addon.cc&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;myobject.cc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;targets&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;target_name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;addon&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;sources&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;addon.cc&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;myobject.cc&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>テストする:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createObject</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 11</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 12</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 13</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj2.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 21</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj2.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 22</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj2.</span><span style="color:#B392F0;">plusOne</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 23</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createObject</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 11</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 12</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 13</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj2.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 21</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj2.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 22</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj2.</span><span style="color:#6F42C1;">plusOne</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 23</span></span></code></pre></div><h3 id="ラップされたオブジェクトの受け渡し" tabindex="-1">ラップされたオブジェクトの受け渡し <a class="header-anchor" href="#ラップされたオブジェクトの受け渡し" aria-label="Permalink to &quot;ラップされたオブジェクトの受け渡し&quot;">​</a></h3><p>C++ オブジェクトをラップして返すだけでなく、Node.js のヘルパー関数 <code>node::ObjectWrap::Unwrap</code> を使ってラップを解いて、ラップされたオブジェクトを渡すこともできる。以下の例では、2 つの <code>MyObject</code> オブジェクトを入力引数として受け取ることができる関数 <code>add()</code> を示している：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Number;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Unwrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">      args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">ToObject</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Unwrap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">      args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">ToObject</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj1-&gt;</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> obj2-&gt;</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, sum));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InitAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(exports-&gt;</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#9ECBFF;">&quot;createObject&quot;</span><span style="color:#E1E4E8;">, CreateObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">NODE_SET_METHOD</span><span style="color:#E1E4E8;">(exports, </span><span style="color:#9ECBFF;">&quot;add&quot;</span><span style="color:#E1E4E8;">, Add);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">NODE_MODULE</span><span style="color:#E1E4E8;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// addon.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Number;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Unwrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">      args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">ToObject</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Unwrap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">      args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">ToObject</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj1-&gt;</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> obj2-&gt;</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, sum));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InitAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(exports-&gt;</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(exports, </span><span style="color:#032F62;">&quot;createObject&quot;</span><span style="color:#24292E;">, CreateObject);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">NODE_SET_METHOD</span><span style="color:#24292E;">(exports, </span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;">, Add);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">NODE_MODULE</span><span style="color:#24292E;">(NODE_GYP_MODULE_NAME, InitAll)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p><code>myobject.h</code>では、オブジェクトをアンラップした後にプライベートな値にアクセスできるように、新しいpublicメソッドが追加されている。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#F97583;">#ifndef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ObjectWrap</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">explicit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">~MyObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Global</span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> constructor;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value_;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.h</span></span>
<span class="line"><span style="color:#D73A49;">#ifndef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node_object_wrap.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ObjectWrap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">~MyObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Global</span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> constructor;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value_;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>の実装は以前と似ている：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Context;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Function;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Global;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Isolate;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Local;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Object;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::String;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#E1E4E8;">Global</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::constructor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value) : </span><span style="color:#B392F0;">value_</span><span style="color:#E1E4E8;">(value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">~</span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // コンストラクタ・テンプレートの準備</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">FunctionTemplate</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tpl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionTemplate</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, New);</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">SetClassName</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#9ECBFF;">&quot;MyObject&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  tpl-&gt;</span><span style="color:#B392F0;">InstanceTemplate</span><span style="color:#E1E4E8;">()-&gt;</span><span style="color:#B392F0;">SetInternalFieldCount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  constructor.</span><span style="color:#B392F0;">Reset</span><span style="color:#E1E4E8;">(isolate, tpl-&gt;</span><span style="color:#B392F0;">GetFunction</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">AddEnvironmentCleanupHook</span><span style="color:#E1E4E8;">(isolate, [](</span><span style="color:#F97583;">void*</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    constructor.</span><span style="color:#B392F0;">Reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#B392F0;">IsConstructCall</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // コンストラクタとして呼び出される: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">IsUndefined</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]-&gt;</span><span style="color:#B392F0;">NumberValue</span><span style="color:#E1E4E8;">(context).</span><span style="color:#B392F0;">FromMaybe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    MyObject</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    obj-&gt;</span><span style="color:#B392F0;">Wrap</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(args.</span><span style="color:#B392F0;">This</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // プレーンな関数 \`MyObject(...)\` として呼び出されると、コンストラクトコールに変わる。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cons </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        cons-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context, argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyObject</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FunctionCallbackInfo</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">GetIsolate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> argc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Value</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> argv[argc] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Function</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> cons </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Context</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isolate-&gt;</span><span style="color:#B392F0;">GetCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      cons-&gt;</span><span style="color:#B392F0;">NewInstance</span><span style="color:#E1E4E8;">(context, argc, argv).</span><span style="color:#B392F0;">ToLocalChecked</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args.</span><span style="color:#B392F0;">GetReturnValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// myobject.cc</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;node.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myobject.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">::AddEnvironmentCleanupHook;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Context;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Function;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionCallbackInfo;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::FunctionTemplate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Global;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Isolate;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Local;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Object;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::String;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#24292E;">Global</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::constructor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value) : </span><span style="color:#6F42C1;">value_</span><span style="color:#24292E;">(value) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // コンストラクタ・テンプレートの準備</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">FunctionTemplate</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionTemplate</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, New);</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">SetClassName</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(isolate, </span><span style="color:#032F62;">&quot;MyObject&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  tpl-&gt;</span><span style="color:#6F42C1;">InstanceTemplate</span><span style="color:#24292E;">()-&gt;</span><span style="color:#6F42C1;">SetInternalFieldCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  constructor.</span><span style="color:#6F42C1;">Reset</span><span style="color:#24292E;">(isolate, tpl-&gt;</span><span style="color:#6F42C1;">GetFunction</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">AddEnvironmentCleanupHook</span><span style="color:#24292E;">(isolate, [](</span><span style="color:#D73A49;">void*</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    constructor.</span><span style="color:#6F42C1;">Reset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#6F42C1;">IsConstructCall</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">    // コンストラクタとして呼び出される: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">IsUndefined</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]-&gt;</span><span style="color:#6F42C1;">NumberValue</span><span style="color:#24292E;">(context).</span><span style="color:#6F42C1;">FromMaybe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    MyObject</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    obj-&gt;</span><span style="color:#6F42C1;">Wrap</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(args.</span><span style="color:#6F42C1;">This</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // プレーンな関数 \`MyObject(...)\` として呼び出されると、コンストラクトコールに変わる。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cons </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#24292E;">    Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        cons-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context, argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyObject</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FunctionCallbackInfo</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">GetIsolate</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> argc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Value</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> argv[argc] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Function</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> cons </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(isolate, constructor);</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Context</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isolate-&gt;</span><span style="color:#6F42C1;">GetCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      cons-&gt;</span><span style="color:#6F42C1;">NewInstance</span><span style="color:#24292E;">(context, argc, argv).</span><span style="color:#6F42C1;">ToLocalChecked</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args.</span><span style="color:#6F42C1;">GetReturnValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace demo</span></span></code></pre></div><p>テストする：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addon</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./build/Release/addon&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addon.</span><span style="color:#B392F0;">createObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addon.</span><span style="color:#B392F0;">createObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addon.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(obj1, obj2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addon</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./build/Release/addon&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addon.</span><span style="color:#6F42C1;">createObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addon.</span><span style="color:#6F42C1;">createObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addon.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(obj1, obj2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#6A737D;">// Prints: 30</span></span></code></pre></div><ul><li>Electron</li><li>Embedder&#39;s Guide</li><li>Linking to libraries included with Node.js</li><li>Native Abstractions for Node.js</li><li>V8</li><li><code>Worker</code></li><li>bindings</li><li>download</li><li>examples</li><li>implementation considerations</li><li>installation instructions</li><li>libuv</li><li>node-gyp</li><li>require</li><li>v8-docs</li></ul>`,139),e=[o];function c(t,r,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{u as __pageData,C as default};
