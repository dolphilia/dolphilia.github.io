import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.92ce8a2a.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_safe_call.md","filePath":"translation/duktape/api/duk_safe_call.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/api/duk_safe_call.md"},o=l(`<h2 id="duk-safe-call" tabindex="-1">duk_safe_call() <a class="header-anchor" href="#duk-safe-call" aria-label="Permalink to &quot;duk_safe_call()&quot;">​</a></h2><p>1.0.0 protected call</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_int_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_safe_call</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, duk_safe_call_function </span><span style="color:#FFAB70;">func</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">udata</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nargs</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nrets</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_int_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_safe_call</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, duk_safe_call_function </span><span style="color:#E36209;">func</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">udata</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nargs</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nrets</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | arg1 | ... | argN | -&gt; | ... | ret1 | ... | retN |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>現在のバリュースタックフレーム内で保護された純粋な C 関数呼び出しを実行します (呼び出しはコールスタック上で見えません)。現在のバリュースタックフレーム内の nargs 最上位値は呼び出し引数として識別され、nrets 戻り値は呼び出しが戻った後に提供されます。呼び出し元のコードは、例えば duk_check_stack() を使用して、バリュースタックが nrets のために予約されていること、および予約エラーを処理することを確認する必要があります。</p><p>udata (userdata) ポインタは、そのまま func に渡され、バリュースタックを使用せずに、1つまたは複数の C 値をターゲット関数に簡単に渡すことができます。複数の値を渡すには、スタックに確保されたC構造体に値を詰め、その構造体へのポインタをuserdataとして渡します。userdata引数はDuktapeでは解釈されません。もしそれが必要でなければ、単にNULLを渡して、セーフコールターゲットのudata引数を無視してください。</p><p>戻り値は</p><p>DUK_EXEC_SUCCESS (0) です。call が成功した場合、nargs 引数は nrets の戻り値に置き換えられます。(この戻り値コード定数はゼロであることが保証されているので、「ゼロかゼロ以外か」のチェックで成功を確認することができる) DUK_EXEC_ERROR: 呼び出しに失敗、nargs 引数は nrets 値に置き換えられ、そのうちの最初の値はエラー値で、残りは未定義です。(例外的なケースとして、例えばバリュースタック上の引数が少なすぎる場合、呼び出しは投げます。かもしれない)。 ほとんどのDuktape APIコールとは異なり、このコールは成功時にゼロを返します。これにより、複数のエラーコードを後で定義することができます。 このコールは現在のバリュースタック・フレーム上で動作するため、スタックの動作とリターン・コードの処理は、他のコール・タイプと少し異なっています。</p><p>スタックtopのnargs要素は、funcへの引数として識別され、戻りスタックのための「ベース・インデックス」を確立するように。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">duk_get_top</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> nargs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">duk_get_top</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> nargs)</span></span></code></pre></div><p>func が戻るとき、その戻り値で、スタックの一番上にプッシュした戻り値の数を示す；複数またはゼロの戻り値も可能です。スタックは、呼び出し前に設定された「基本インデックス」から始まるちょうどnrets個の値が存在するように操作されます。</p><p>func はバリュースタックへのフルアクセスを持っているので、意図した引数の下のスタックを変更し、スタックから「ベースインデックス」の下の要素をポップすることさえできることに注意してください。このような要素は、リターン時にスタックが常に一貫した状態になるように、リターン前に未定義の値でリストアされます。</p><p>エラーが発生した場合、スタックは「ベースインデックス」にnretsの値を持つことになります。nrets が 0 の場合、スタック上にエラーは存在しない (戻り値のスタックトップは &quot;base index&quot; に等しい) ので、 nrets を 0 としてこの関数を呼び出すと、起こりうるエラーの原因がわからなくなり、あまり役に立たないかもしれない。</p><p>nargs = 3, nrets = 2, func returns 4 でのバリュースタックの動作例。パイプ文字は論理的なバリュースタックの境界を示す。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">--- </span><span style="color:#9ECBFF;">frame</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bottom</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">--- </span><span style="color:#9ECBFF;">&quot;base index&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">v</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">v</span></span>
<span class="line"><span style="color:#E1E4E8;">[ ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> a b c ]            stack before calling </span><span style="color:#9ECBFF;">&#39;func&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[ ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> a b </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> x y z w ]    stack after calling </span><span style="color:#9ECBFF;">&#39;func&#39;</span><span style="color:#E1E4E8;">, which has</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#B392F0;">popped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">one</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argument</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">written</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">four</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">values</span><span style="color:#E1E4E8;"> (and </span><span style="color:#9ECBFF;">returned</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[ ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ... </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> x y ]              stack after </span><span style="color:#B392F0;">duk_safe_call</span><span style="color:#E1E4E8;">() returns,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 2 (= </span><span style="color:#9ECBFF;">nrets</span><span style="color:#E1E4E8;">) first </span><span style="color:#9ECBFF;">&#39;func&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> values</span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#B392F0;">are</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">left</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;base index&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">.</span><span style="color:#24292E;">--- </span><span style="color:#032F62;">frame</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bottom</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">.</span><span style="color:#24292E;">--- </span><span style="color:#032F62;">&quot;base index&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">v</span><span style="color:#24292E;">     </span><span style="color:#032F62;">v</span></span>
<span class="line"><span style="color:#24292E;">[ ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> a b c ]            stack before calling </span><span style="color:#032F62;">&#39;func&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[ ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> a b </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> x y z w ]    stack after calling </span><span style="color:#032F62;">&#39;func&#39;</span><span style="color:#24292E;">, which has</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#6F42C1;">popped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argument</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">written</span><span style="color:#24292E;"> </span><span style="color:#032F62;">four</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">values</span><span style="color:#24292E;"> (and </span><span style="color:#032F62;">returned</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[ ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ... </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> x y ]              stack after </span><span style="color:#6F42C1;">duk_safe_call</span><span style="color:#24292E;">() returns,</span></span>
<span class="line"><span style="color:#24292E;">                                 2 (= </span><span style="color:#032F62;">nrets</span><span style="color:#24292E;">) first </span><span style="color:#032F62;">&#39;func&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> values</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#6F42C1;">are</span><span style="color:#24292E;"> </span><span style="color:#032F62;">left</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;base index&quot;</span></span></code></pre></div><p>func は呼び出し元のスタックフレームを使用するので、呼び出し元のコンテキストがわからない限り、 &#39;func&#39; 内でのボトムベースの参照は危険であることに注意してください。 userdata引数はDuktape 2.xで追加されました。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> floor;</span></span>
<span class="line"><span style="color:#E1E4E8;">} my_safe_args;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">duk_ret_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_safe_func</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">udata</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    my_safe_args </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (my_safe_args </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) udata;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> a, b, c, t;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_number</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_number</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_number</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* ignored on purpose */</span></span>
<span class="line"><span style="color:#E1E4E8;">    t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args-&gt;floor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_push_number</span><span style="color:#E1E4E8;">(ctx, t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Indicates that there is only one return value.  Because the caller</span></span>
<span class="line"><span style="color:#6A737D;">     * requested two (nrets == 2), Duktape will automatically add an</span></span>
<span class="line"><span style="color:#6A737D;">     * additional &quot;undefined&quot; result value.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">my_safe_args args;</span><span style="color:#6A737D;">  /* C struct whose pointer is passed as userdata */</span></span>
<span class="line"><span style="color:#79B8FF;">duk_int_t</span><span style="color:#E1E4E8;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">args.floor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">rc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_safe_call</span><span style="color:#E1E4E8;">(ctx, my_func, (</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#6A737D;"> /*nargs*/</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#6A737D;"> /*nrets*/</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rc </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> DUK_EXEC_SUCCESS) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1st return value: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">  /* 21 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2nd return value: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span><span style="color:#6A737D;">  /* undefined */</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error value: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop_2</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> floor;</span></span>
<span class="line"><span style="color:#24292E;">} my_safe_args;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">duk_ret_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_safe_func</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">udata</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    my_safe_args </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (my_safe_args </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) udata;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> a, b, c, t;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_number</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_number</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_number</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* ignored on purpose */</span></span>
<span class="line"><span style="color:#24292E;">    t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args-&gt;floor) {</span></span>
<span class="line"><span style="color:#24292E;">        t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_push_number</span><span style="color:#24292E;">(ctx, t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Indicates that there is only one return value.  Because the caller</span></span>
<span class="line"><span style="color:#6A737D;">     * requested two (nrets == 2), Duktape will automatically add an</span></span>
<span class="line"><span style="color:#6A737D;">     * additional &quot;undefined&quot; result value.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">my_safe_args args;</span><span style="color:#6A737D;">  /* C struct whose pointer is passed as userdata */</span></span>
<span class="line"><span style="color:#005CC5;">duk_int_t</span><span style="color:#24292E;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">args.floor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">rc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_safe_call</span><span style="color:#24292E;">(ctx, my_func, (</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">args</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#6A737D;"> /*nargs*/</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#6A737D;"> /*nrets*/</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DUK_EXEC_SUCCESS) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1st return value: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">  /* 21 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2nd return value: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">  /* undefined */</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error value: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop_2</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div>`,21),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{d as __pageData,_ as default};
