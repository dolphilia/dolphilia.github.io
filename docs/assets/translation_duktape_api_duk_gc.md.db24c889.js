import{_ as a,c as s,o as e,a as n}from"./app.e18c80f2.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"duk_gc()","slug":"duk-gc","link":"#duk-gc","children":[{"level":3,"title":"プロトタイプ","slug":"プロトタイプ","link":"#プロトタイプ","children":[]},{"level":3,"title":"スタック","slug":"スタック","link":"#スタック","children":[]},{"level":3,"title":"要約","slug":"要約","link":"#要約","children":[]},{"level":3,"title":"例","slug":"例","link":"#例","children":[]}]}],"relativePath":"translation/duktape/api/duk_gc.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/api/duk_gc.md"},t=n(`<h2 id="duk-gc" tabindex="-1">duk_gc() <a class="header-anchor" href="#duk-gc" aria-hidden="true">#</a></h2><p>1.0.0 memory heap</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-hidden="true">#</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">duk_gc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">duk_context </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">duk_uint_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">flags</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-hidden="true">#</a></h3><p>(バリュースタックに影響なし)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-hidden="true">#</a></h3><p>マークアンドスイープガベージコレクションラウンドを強制的に実行します。</p><p>以下のフラグが定義されています。</p><p>定義 説明 DUK_GC_COMPACT オブジェクトプロパティテーブルの圧縮を強制します。</p><p>ファイナライザーを持つオブジェクトも確実に収集するために、この関数を2回呼び出したい場合があります。現在、そのようなオブジェクトを収集するためには、2回のマーク＆スイープラウンドが必要です。最初のラウンドでは、オブジェクトをファイナライズ可能なものとしてマークし、ファイナライザを実行します。2回目のラウンドでは、ファイナライズの後でもオブジェクトが到達できないことを確認し、オブジェクトを解放します。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-hidden="true">#</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">duk_gc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div>`,13),c=[t];function p(o,r,i,d,h,_){return e(),s("div",null,c)}const y=a(l,[["render",p]]);export{C as __pageData,y as default};
