import{_ as o,c as e,o as a,Q as s}from"./chunks/framework.44f152d8.js";const P=JSON.parse('{"title":"HASPROP: Exposed Property 存在チェック (\\"in\\" 演算子)","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/doc/hobject-alg-hasprop.md","lastUpdated":1682143322000}'),c={name:"translation/duktape/doc/hobject-alg-hasprop.md"},t=s(`<h1 id="hasprop-exposed-property-存在チェック-in-演算子" tabindex="-1">HASPROP: Exposed Property 存在チェック (&quot;in&quot; 演算子) <a class="header-anchor" href="#hasprop-exposed-property-存在チェック-in-演算子" aria-label="Permalink to &quot;HASPROP: Exposed Property 存在チェック (&quot;in&quot; 演算子)&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>プロパティの存在チェックは、ECMAScript のコード内で <code>in</code> 演算子を用いて行われます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> bar)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// foo.barが存在するかどうかを確認する</span></span>
<span class="line"></span></code></pre></div><p>これには</p><ul><li>左辺の式</li><li>右辺の式</li><li><code>in</code> セマンティクス (E5 Section 11.8.7)</li><li><code>[[HasProperty]]</code> への呼び出し。</li></ul><h2 id="初稿" tabindex="-1">初稿 <a class="header-anchor" href="#初稿" aria-label="Permalink to &quot;初稿&quot;">​</a></h2><p>プロパティアクセサから始めて、 <code>in</code> を適用する (そして、未使用のステップをスキップする)。 を適用する(未使用のステップはスキップする)。</p><p>1.1. <code>CheckObjectCoercible</code> をベース値に対して呼び出します。 実際には、ベース値が <code>null</code> や <code>undefined</code> の場合は、 <code>TypeError</code> をスローします。 2.2. 基底値がオブジェクトでない場合、 <code>TypeError</code> を投げる。 3.3. <code>ToString()</code> を使用して、プロパティ名を文字列に変換します。 4.4. <code>[[HasProperty]]</code> を、ベースオブジェクトと強制されたプロパティ名で呼び出します。</p><p>なお、このエラーは無条件に発生するので、厳密でないコードでも発生します: 。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// throws TypeError</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>より正式には、<code>O</code> が基本値、<code>P</code> がプロパティ名の値であるとする。</p><ol><li>If <code>O</code> is <code>null</code> or <code>undefined</code>, throw a <code>TypeError</code></li><li>If <code>O</code> is not an object, throw a <code>TypeError</code></li><li><code>P</code> = <code>ToString(P)</code></li><li>Call <code>O.[[HasProperty]](P)</code>, and return its result</li></ol><p>ステップ1は不要です（ステップ2で十分です）。</p><ol><li>If <code>O</code> is not an object, throw a <code>TypeError</code></li><li><code>P</code> = <code>ToString(P)</code></li><li>Call <code>O.[[HasProperty]](P)</code>, and return its result</li></ol><h2 id="インライン化-hasproperty" tabindex="-1">インライン化 HasProperty <a class="header-anchor" href="#インライン化-hasproperty" aria-label="Permalink to &quot;インライン化 HasProperty&quot;">​</a></h2><p>E5 8.12.6 項の <code>[[HasProperty]]</code> をインライン化しました。</p><ol><li>If <code>O</code> is not an object, throw a <code>TypeError</code></li><li><code>P</code> = <code>ToString(P)</code></li><li>Let <code>desc</code> be the result of calling the <code>[[GetProperty]]</code> internal method of <code>O</code> with property name <code>P</code>.</li><li>If <code>desc</code> is <code>undefined</code>, then return <code>false</code>.</li><li>Else return <code>true</code>.</li></ol>`,18),l=[t];function r(n,p,d,i,h,y){return a(),e("div",null,l)}const D=o(c,[["render",r]]);export{P as __pageData,D as default};
