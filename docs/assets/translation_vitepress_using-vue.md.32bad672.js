import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.43c433ff.js";const h=JSON.parse('{"title":"MarkdownでVueを使用する","description":"","frontmatter":{},"headers":[],"relativePath":"translation/vitepress/using-vue.md","filePath":"translation/vitepress/using-vue.md","lastUpdated":1676126774000}'),p={name:"translation/vitepress/using-vue.md"},o=l(`<h1 id="markdownでvueを使用する" tabindex="-1">MarkdownでVueを使用する <a class="header-anchor" href="#markdownでvueを使用する" aria-label="Permalink to &quot;MarkdownでVueを使用する&quot;">​</a></h1><p>VitePressでは、各マークダウンファイルはHTMLにコンパイルされ、Vue Single-File Componentとして処理されます。つまり、マークダウン内で動的テンプレート、Vueコンポーネントの使用、または<code>&lt;script&gt;</code>タグを追加することによる任意のページ内Vueコンポーネントロジックなど、あらゆるVue機能を使用することができます。</p><p>また、VitePressはVue 3のコンパイラを利用して、マークダウンの純粋に静的な部分を自動的に検出し、最適化することも重要なポイントです。静的なコンテンツは単一のプレースホルダーノードに最適化され、ページのJavaScriptペイロードから排除されます。また、クライアントサイドのハイドレーションでもスキップされます。要するに、どのページでも、動的な部分に対してのみ支払いが発生するのです。</p><h2 id="templating" tabindex="-1">Templating <a class="header-anchor" href="#templating" aria-label="Permalink to &quot;Templating&quot;">​</a></h2><h2 id="補間" tabindex="-1">補間 <a class="header-anchor" href="#補間" aria-label="Permalink to &quot;補間&quot;">​</a></h2><p>各Markdownファイルは、まずHTMLにコンパイルされ、その後VueコンポーネントとしてViteのプロセスパイプラインに渡されます。つまり、テキストにVueスタイルの補間が使えるということです。</p><p>Input</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{{ 1 + 1 }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{{ 1 + 1 }}</span></span></code></pre></div><p>Output</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">2</span></span></code></pre></div><h3 id="ディレクティブ" tabindex="-1">ディレクティブ <a class="header-anchor" href="#ディレクティブ" aria-label="Permalink to &quot;ディレクティブ&quot;">​</a></h3><p>ディレクティブも有効です。</p><p>Input</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;i in 3&quot;</span><span style="color:#E1E4E8;">&gt;{{ i }}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;i in 3&quot;</span><span style="color:#24292E;">&gt;{{ i }}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Output</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1 2 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 2 3</span></span></code></pre></div><h3 id="サイト・ページデータへのアクセス" tabindex="-1">サイト・ページデータへのアクセス <a class="header-anchor" href="#サイト・ページデータへのアクセス" aria-label="Permalink to &quot;サイト・ページデータへのアクセス&quot;">​</a></h3><p>useDataヘルパーを<code>&lt;script&gt;</code>ブロック内で使用し、データをページに公開することができます。</p><p>Input</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useData } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">page</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;{{ page }}&lt;/</span><span style="color:#85E89D;">pre</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useData } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">page</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;{{ page }}&lt;/</span><span style="color:#22863A;">pre</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Output</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/using-vue.html&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;title&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Using Vue in Markdown&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;frontmatter&quot;</span><span style="color:#E1E4E8;">: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/using-vue.html&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;title&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Using Vue in Markdown&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;frontmatter&quot;</span><span style="color:#24292E;">: {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="エスケープ" tabindex="-1">エスケープ <a class="header-anchor" href="#エスケープ" aria-label="Permalink to &quot;エスケープ&quot;">​</a></h3><p>デフォルトでは、フェンスで囲まれたコードブロックは、自動的にv-preでラップされます。インラインのコード・スニペットやプレーン・テキストの中に生のヒゲやVue固有の構文を表示するには、v-preカスタム・コンテナで段落をラップする必要があります。</p><p>Input</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">::: v-pre</span></span>
<span class="line"><span style="color:#79B8FF;">\`{{ This will be displayed as-is }}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">:::</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">::: v-pre</span></span>
<span class="line"><span style="color:#005CC5;">\`{{ This will be displayed as-is }}\`</span></span>
<span class="line"><span style="color:#24292E;">:::</span></span></code></pre></div><p>Output</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">{{ This will be displayed as-is }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{{ This will be displayed as-is }}</span></span></code></pre></div><h2 id="コンポーネントの使用" tabindex="-1">コンポーネントの使用 <a class="header-anchor" href="#コンポーネントの使用" aria-label="Permalink to &quot;コンポーネントの使用&quot;">​</a></h2><p>より柔軟性が必要な場合、VitePressは独自のVue Componentsでオーサリングツールボックスを拡張することができます。</p><h3 id="マークダウンでコンポーネントをインポートする" tabindex="-1">マークダウンでコンポーネントをインポートする <a class="header-anchor" href="#マークダウンでコンポーネントをインポートする" aria-label="Permalink to &quot;マークダウンでコンポーネントをインポートする&quot;">​</a></h3><p>コンポーネントの使用箇所が少ない場合は、使用するファイル内でコンポーネントをインポートする方法が推奨されます。</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;script setup&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">import CustomComponent from &#39;../components/CustomComponent.vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;font-weight:bold;"># Docs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">This is a .md using a custom component</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;CustomComponent /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;font-weight:bold;">## More docs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;script setup&gt;</span></span>
<span class="line"><span style="color:#24292E;">import CustomComponent from &#39;../components/CustomComponent.vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;"># Docs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">This is a .md using a custom component</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;CustomComponent /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;">## More docs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><h3 id="テーマへのグローバルコンポーネントの登録" tabindex="-1">テーマへのグローバルコンポーネントの登録 <a class="header-anchor" href="#テーマへのグローバルコンポーネントの登録" aria-label="Permalink to &quot;テーマへのグローバルコンポーネントの登録&quot;">​</a></h3><p>もしコンポーネントがdocsの複数のページにわたって使用されるのであれば、テーマにグローバルに登録することができます（または、VitePressのデフォルトテーマを拡張する一環として登録できます）。詳細については、テーマガイドをご覧ください。</p><p>.vitepress/theme/index.jsでは、enhanceApp関数がVueアプリのインスタンスを受け取るので、通常のVueアプリで行うようにコンポーネントを登録することができます。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> DefaultTheme </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vitepress/theme&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">DefaultTheme,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">enhanceApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultTheme.</span><span style="color:#B392F0;">enhanceApp</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx.app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;VueClickAwayExample&#39;</span><span style="color:#E1E4E8;">, VueClickAwayExample)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> DefaultTheme </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vitepress/theme&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">DefaultTheme,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">enhanceApp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    DefaultTheme.</span><span style="color:#6F42C1;">enhanceApp</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">    ctx.app.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;VueClickAwayExample&#39;</span><span style="color:#24292E;">, VueClickAwayExample)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>マークダウンファイルの後半では、コンポーネントをコンテンツの間に挟み込むことができます。</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;font-weight:bold;"># Vue Click Away</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;VueClickAwayExample /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;font-weight:bold;"># Vue Click Away</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;VueClickAwayExample /&gt;</span></span></code></pre></div><blockquote><p>重要: カスタムコンポーネントの名前にハイフンが含まれているか、PascalCase であることを確認してください。さもなければ、インライン要素として扱われ、 <code>&lt;p&gt;</code> タグで囲まれます。これは、 <code>&lt;p&gt;</code> がその中にブロック要素を置くことを許さないため、水和の不一致につながります。</p></blockquote><h3 id="ヘッダーでコンポーネントを使用する-⚡" tabindex="-1">ヘッダーでコンポーネントを使用する ⚡ <a class="header-anchor" href="#ヘッダーでコンポーネントを使用する-⚡" aria-label="Permalink to &quot;ヘッダーでコンポーネントを使用する ⚡&quot;">​</a></h3><p>Vueのコンポーネントをヘッダで使用することができますが、以下の構文の違いに注意してください。</p><table><thead><tr><th>Markdown</th><th>Output HTML</th><th>Parsed Header</th></tr></thead><tbody><tr><td># text <code>&lt;Tag/&gt;</code></td><td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td><td>text</td></tr><tr><td># text \`<code>&lt;Tag/&gt;</code>\`</td><td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td><td><code>text &lt;Tag/&gt;</code></td></tr></tbody></table><p><code>&lt;code&gt;</code> でラップされたHTMLはそのまま表示され、ラップされていないHTMLのみがVueによってパースされます。</p><blockquote><p>ヒント: 出力されたHTMLはmarkdown-itによって実現され、解析されたヘッダーはVitePressによって処理されます（そしてサイドバーと文書タイトルの両方に使用されます）。</p></blockquote><h2 id="cssプリプロセッサーを利用する" tabindex="-1">CSSプリプロセッサーを利用する <a class="header-anchor" href="#cssプリプロセッサーを利用する" aria-label="Permalink to &quot;CSSプリプロセッサーを利用する&quot;">​</a></h2><p>VitePressは、CSSプリプロセッサー（.scss, .sass, .less, .styl, .stylusファイル）をビルトインでサポートしています。Vite特有のプラグインをインストールする必要はありませんが、対応するプリプロセッサー自体をインストールする必要があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># .scss and .sass</span></span>
<span class="line"><span style="color:#e1e4e8;">npm install -D sass</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># .less</span></span>
<span class="line"><span style="color:#e1e4e8;">npm install -D less</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># .styl and .stylus</span></span>
<span class="line"><span style="color:#e1e4e8;">npm install -D stylus</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># .scss and .sass</span></span>
<span class="line"><span style="color:#24292e;">npm install -D sass</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># .less</span></span>
<span class="line"><span style="color:#24292e;">npm install -D less</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># .styl and .stylus</span></span>
<span class="line"><span style="color:#24292e;">npm install -D stylus</span></span></code></pre></div><p>そして、Markdownやテーマのコンポーネントで以下のように使用することができます。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sass&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">.title</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">font-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">px</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;sass&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">.title</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">px</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="スクリプト-スタイル-ホイスティング" tabindex="-1">スクリプト＆スタイル ホイスティング <a class="header-anchor" href="#スクリプト-スタイル-ホイスティング" aria-label="Permalink to &quot;スクリプト＆スタイル ホイスティング&quot;">​</a></h2><p>時々、いくつかのJavaScriptまたはCSSを現在のページのみに適用する必要がある場合があります。そのような場合、Markdownファイルに直接ルートレベルの <code>&lt;script&gt;</code> または <code>&lt;style&gt;</code> ブロックを記述することができます。これらはコンパイルされたHTMLからホイストされ、結果として得られるVueの単一ファイルコンポーネントの <code>&lt;script&gt;</code> および <code>&lt;style&gt;</code> ブロックとして使用されます。</p><p>これは、インラインスクリプトでレンダリングされ、インラインCSSでスタイルされます。</p><h2 id="組み込みコンポーネント" tabindex="-1">組み込みコンポーネント <a class="header-anchor" href="#組み込みコンポーネント" aria-label="Permalink to &quot;組み込みコンポーネント&quot;">​</a></h2><p>VitePressは、ClientOnlyやOutboundLinkのようなVueの組み込みコンポーネントを提供しています。詳細については、グローバルコンポーネントガイドをご覧ください。</p><p>また、こちらもご覧ください。</p><ul><li>ヘッダーでコンポーネントを使用する</li></ul><h2 id="ブラウザapiアクセス制限" tabindex="-1">ブラウザAPIアクセス制限 <a class="header-anchor" href="#ブラウザapiアクセス制限" aria-label="Permalink to &quot;ブラウザAPIアクセス制限&quot;">​</a></h2><p>VitePressアプリケーションは、静的ビルドを生成する際にNode.jsでサーバーレンダリングされるため、Vueの使用はユニバーサルコード要件に準拠する必要があります。つまり、Browser / DOM APIへのアクセスは、beforeMountまたはmountされたフックに限定するようにしてください。</p><p>SSRフレンドリーでないコンポーネント（例えば、カスタムディレクティブを含む）を使用またはデモする場合は、組み込みの <code>&lt;ClientOnly&gt;</code> コンポーネントの中にそれらをラップすることができます。</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;ClientOnly&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;NonSSRFriendlyComponent /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/ClientOnly&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;ClientOnly&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;NonSSRFriendlyComponent /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/ClientOnly&gt;</span></span></code></pre></div><p>これは、インポート時にブラウザAPIにアクセスするコンポーネントやライブラリを修正するものではないことに注意してください。インポート時にブラウザ環境を仮定するコードを使用するには、適切なライフサイクルフックでそれらを動的にインポートする必要があります。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib-that-access-window-on-import&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// use code</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib-that-access-window-on-import&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// use code</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>モジュールエクスポートのデフォルトがVueコンポーネントであれば、動的に登録することができます。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">component</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dynamicComponent&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">:is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dynamicComponent&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#FDAEB7;font-style:italic;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      dynamicComponent: </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib-that-access-window-on-import&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dynamicComponent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.default</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">component</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dynamicComponent&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">:is</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dynamicComponent&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#B31D28;font-style:italic;">component</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      dynamicComponent: </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib-that-access-window-on-import&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.dynamicComponent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.default</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>こちらもご覧ください。</p><ul><li>Vue.js &gt; Dynamic Components</li></ul>`,67),e=[o];function t(c,r,i,E,y,d){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{h as __pageData,g as default};
