import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.92ce8a2a.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_push_lstring.md","filePath":"translation/duktape/api/duk_push_lstring.md","lastUpdated":1676126774000}'),l={name:"translation/duktape/api/duk_push_lstring.md"},o=p(`<h2 id="duk-push-lstring" tabindex="-1">duk_push_lstring() <a class="header-anchor" href="#duk-push-lstring" aria-label="Permalink to &quot;duk_push_lstring()&quot;">​</a></h2><p>1.0.0 string stack</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | -&gt; | ... | str |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>明示的な長さの文字列をスタックにプッシュします。文字列は、内部の NUL 文字を含む任意のデータを含むことができます。内部文字列データへのポインタが返されます。操作に失敗した場合は，エラーを投げます。。</p><p>str が NULL の場合、len に関係なく空の文字列がスタックに押され、空の文字列への非 NULL ポインタが返されます。返されたポインタは再参照可能であり、NUL終端文字が保証されます。この動作は、意図的に duk_push_string と異なっています。</p><p>Cコードは通常、有効なCESU-8文字列のみをスタックにプッシュすべきです。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">tmp1</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&#39;f&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">tmp2</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(ctx, tmp1, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">   /* push the string &quot;f\\x00\\x00xy&quot; */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(ctx, tmp2, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">   /* push the string &quot;\\x00&quot; */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(ctx, tmp2, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">   /* push empty string */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">   /* push empty string */</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_lstring</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* push empty string */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">tmp1</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&#39;f&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;y&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">tmp2</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(ctx, tmp1, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">   /* push the string &quot;f\\x00\\x00xy&quot; */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(ctx, tmp2, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">   /* push the string &quot;\\x00&quot; */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(ctx, tmp2, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">   /* push empty string */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">   /* push empty string */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_lstring</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* push empty string */</span></span></code></pre></div>`,12),t=[o];function e(c,r,y,E,i,u){return a(),n("div",null,t)}const d=s(l,[["render",e]]);export{F as __pageData,d as default};
