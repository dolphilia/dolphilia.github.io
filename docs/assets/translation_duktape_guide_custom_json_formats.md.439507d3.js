import{_ as n,o as s,c as a,R as t,z as l,a as o}from"./chunks/framework.320df067.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/guide/custom_json_formats.md","filePath":"translation/duktape/guide/custom_json_formats.md","lastUpdated":1676126774000}'),e={name:"translation/duktape/guide/custom_json_formats.md"},p=t(`<h2 id="custom_json_formats" tabindex="-1">カスタムJSONフォーマット <a class="header-anchor" href="#custom_json_formats" aria-label="Permalink to &quot;カスタムJSONフォーマット {#custom_json_formats}&quot;">​</a></h2><h3 id="ecmascript-の-json-の欠点" tabindex="-1">ECMAScript の JSON の欠点 <a class="header-anchor" href="#ecmascript-の-json-の欠点" aria-label="Permalink to &quot;ECMAScript の JSON の欠点&quot;">​</a></h3><p>標準の JSON フォーマットは、ECMAScript で使用する場合、いくつかの欠点があります。</p><p>-未定義値や関数値はサポートされていません。 -NaN と無限大の値はサポートされていません。 -Duktapeのカスタム・タイプは、もちろんサポートされていません。 -BMP以上のコードポイントは、サロゲート・ペアとしてしか表現できない -U+10FFFF以上のコードポイントは、サロゲート・ペアとしても表現できません。 -出力が印刷可能なASCIIでないため、不便なことが多い</p><p>これらの制限は、ECMAScript仕様の一部であり、より甘い動作を明示的に禁止しています。Duktapeは、よりプログラマフレンドリーな2種類のカスタムJSONフォーマットを提供しています。JXとJCで、以下に説明します。</p><h3 id="カスタムjxフォーマット" tabindex="-1">カスタムJXフォーマット <a class="header-anchor" href="#カスタムjxフォーマット" aria-label="Permalink to &quot;カスタムJXフォーマット&quot;">​</a></h3><p>JXは、すべての値を非常に読みやすい方法でエンコードし、ほとんどすべての値を忠実にパースして返します（関数値は最も重要な例外です）。出力は純粋に印刷可能なASCIIで、U+FFFF以上のコードポイントはカスタムエスケープ形式でエンコードされ、オブジェクトキーの周りの引用符はほとんどの場合省略されます。JXはJSON互換ではありませんが、非常に読みやすいフォーマットで、デバッグやロギングなどに最も適しています。</p><p>JXは以下のように使用します。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [ </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> ] </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enc</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prints out: {foo:NaN,bar:[1,undefined,3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> dec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{ foo: 123, bar: undefined, quux: NaN }</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">quux)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prints out: 123 undefined NaN</span></span></code></pre></div><h3 id="カスタム-jc-フォーマット§。" tabindex="-1">カスタム JC フォーマット§。 <a class="header-anchor" href="#カスタム-jc-フォーマット§。" aria-label="Permalink to &quot;カスタム JC フォーマット§。&quot;">​</a></h3><p>JCは、すべての値を標準的なJSONにエンコードします。標準的なJSONでサポートされていない値は、アンダースコアで始まるマーカーキーを持つオブジェクトとしてエンコードされます（例： {&quot;_ptr&quot;: &quot;0xdeadbeef&quot;}）。このような値は、通常のオブジェクトとしてパースバックされます。しかし、多かれ少なかれ、手動でそれらを復活させることができます。U+FFFF以上のコードポイントは、&quot;U+nnnnn &quot;のフォーマットでプレーンな文字列データとしてエンコードされます(例: U+0010fedc)。</p><p>JCは以下のように使用します。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [ </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> ] </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enc</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prints out: {&quot;foo&quot;:{&quot;_nan&quot;:true},&quot;bar&quot;:[1,{&quot;_undef&quot;:true},3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> dec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dec</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{ &quot;foo&quot;: 123, &quot;bar&quot;: {&quot;_undef&quot;:true}, &quot;quux&quot;: {&quot;_nan&quot;:true} }</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">quux)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// prints out: 123 [object Object] [object Object]</span></span></code></pre></div><p>JCデコーダは、現時点では、基本的に標準のJSONデコーダと同じです。すべてのJC出力は有効なJSONであり、カスタム構文は必要ありません。例で示したように、カスタム値（{&quot;_undef&quot;:true}など）は自動的には復活しません。それらは、代わりに普通のオブジェクトとしてパースバックされます。</p><h3 id="u-ffff以上のコードポイントと無効なutf-8データについて" tabindex="-1">U+FFFF以上のコードポイントと無効なUTF-8データについて <a class="header-anchor" href="#u-ffff以上のコードポイントと無効なutf-8データについて" aria-label="Permalink to &quot;U+FFFF以上のコードポイントと無効なUTF-8データについて&quot;">​</a></h3><p>すべての標準ECMAScript文字列は、内部的には有効なCESU-8データなので、U+FFFF以上のコードポイントに対する動作は、コンプライアンス上の問題を引き起こすことはありません。しかし、Duktapeの文字列は、拡張UTF-8コードポイントを含み、さらに無効なUTF-8データを含む可能性があります。</p><p>標準のECMAScript JSON APIを含むDuktape JSON実装は、無効なUTF-8データを処理するために置換文字を使用します。結果として得られる文字列は少し奇妙に見えるかもしれませんが、この動作はエラーを投げるよりも望ましいものです。</p><h3 id="jsonフォーマット例" tabindex="-1">JSONフォーマット例 <a class="header-anchor" href="#jsonフォーマット例" aria-label="Permalink to &quot;JSONフォーマット例&quot;">​</a></h3><p>以下の表は、各エンコーディングで異なる値がどのようにエンコードされるかをまとめたものです。</p>`,19),r=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"Value"),l("th",null,"Standard JSON"),l("th",null,"JX"),l("th",null,"JC"),l("th",null,"Notes")])]),l("tbody",null,[l("tr",null,[l("td",null,"undefined"),l("td",null,"n/a"),l("td",null,"undefined"),l("td",{"_undef:true":""}),l("td",null,"Standard JSON: encoded as null inside arrays, otherwise omitted")]),l("tr",null,[l("td",null,"null"),l("td",null,"null"),l("td",null,"null"),l("td",null,"null"),l("td",null,"standard JSON")]),l("tr",null,[l("td",null,"true"),l("td",null,"true"),l("td",null,"true"),l("td",null,"true"),l("td",null,"standard JSON")]),l("tr",null,[l("td",null,"false"),l("td",null,"false"),l("td",null,"false"),l("td",null,"false"),l("td",null,"standard JSON")]),l("tr",null,[l("td",null,"123.4"),l("td",null,"123.4"),l("td",null,"123.4"),l("td",null,"123.4"),l("td",null,"standard JSON")]),l("tr",null,[l("td",null,"+0"),l("td",null,"0"),l("td",null,"0"),l("td",null,"0"),l("td",null,"standard JSON")]),l("tr",null,[l("td",null,"-0"),l("td",null,"0"),l("td",null,"-0"),l("td",null,"-0"),l("td",null,"Standard JSON allows -0 but serializes negative zero as 0 (losing the sign unnecessarily)")]),l("tr",null,[l("td",null,"NaN"),l("td",null,"null"),l("td",null,"NaN"),l("td",{"_nan:true":""}),l("td",null,"Standard JSON: always encoded as null")]),l("tr",null,[l("td",null,"Infinity"),l("td",null,"null"),l("td",null,"Infinity"),l("td",{"_inf:true":""}),l("td",null,"Standard JSON: always encoded as null")]),l("tr",null,[l("td",null,"-Infinity"),l("td",null,"null"),l("td",null,"-Infinity"),l("td",{"_ninf:true":""}),l("td",null,"Standard JSON: always encoded as null")]),l("tr",null,[l("td",null,'"köhä"'),l("td",null,'"köhä"'),l("td",null,'"k\\xf6h\\xe4"'),l("td",null,'"k\\u00f6h\\u00e4"'),l("td")]),l("tr",null,[l("td",null,"U+00FC"),l("td",null,'"\\u00fc"'),l("td",null,'"\\xfc"'),l("td",null,'"\\u00fc"'),l("td")]),l("tr",null,[l("td",null,"U+ABCD"),l("td",null,'"\\uabcd"'),l("td",null,'"\\uabcd"'),l("td",null,'"\\uabcd"'),l("td")]),l("tr",null,[l("td",null,"U+1234ABCD"),l("td",null,'"U+1234abcd"'),l("td",null,'"\\U1234abcd"'),l("td",null,'"U+1234abcd"'),l("td",null,"Non-BMP characters are not standard ECMAScript, JX format borrowed from Python")]),l("tr",null,[l("td",null,"object"),l("td",{"my_key:123":""}),l("td",{"my_key:123":""}),l("td",{"my_key:123":""}),l("td",null,"ASCII keys matching identifer requirements encoded without quotes in JX")]),l("tr",null,[l("td",null,"array"),l("td",null,'["foo","bar"]'),l("td",null,'["foo","bar"]'),l("td",null,'["foo","bar"]'),l("td")]),l("tr",null,[l("td",null,"buffer"),l("td",null,"n/a"),l("td",null,"|deadbeef|"),l("td",{"_buf:deadbeef":""}),l("td")]),l("tr",null,[l("td",null,"pointer"),l("td",null,"n/a"),l("td",null,"(0xdeadbeef)"),l("td",{"_ptr:0xdeadbeef":""}),l("td")]),l("tr",null,[l("td"),l("td"),l("td",null,"(DEADBEEF)"),l("td",{"_ptr:DEADBEEF":""}),l("td",null,"Representation inside parentheses or quotes is platform specific")]),l("tr",null,[l("td",null,"NULL pointer"),l("td",null,"n/a"),l("td",null,"(null)"),l("td",{"_ptr:null":""}),l("td")]),l("tr",null,[l("td",null,"function"),l("td",null,"n/a"),l("td",{"_func:true":""}),l("td",{"_func:true":""}),l("td",null,"Standard JSON: encoded as null inside arrays, otherwise omitted")]),l("tr",null,[l("td",null,"lightfunc"),l("td",null,"n/a"),l("td",{"_func:true":""}),l("td",{"_func:true":""}),l("td",null,"Formats like ordinary functions")])])],-1),c=l("h3",{id:"制限事項",tabindex:"-1"},[o("制限事項 "),l("a",{class:"header-anchor",href:"#制限事項","aria-label":'Permalink to "制限事項"'},"​")],-1),u=l("p",null,"いくつかの制限事項があります。",-1),d=l("ul",null,[l("li",null,"列挙可能な自身のプロパティのみが、どのフォーマットでもシリアライズされます。"),l("li",null,'配列のプロパティ（エントリ以外）はシリアライズされません。これは、例えばロギングなどで [1,2,3, "type": "point"] のように有用でしょう。'),l("li",null,"配列のギャップは保存されず、未定義としてパースバックされます。"),l("li",null,"JCデータの解析時に、特殊な値を自動的に復活させることはありません。"),l("li",null,"正規のエンコーディングがない。これは、エンコード時にオブジェクトのキーをソートする簡単なオプションで簡単にアレンジできるだろう。")],-1),D=l("p",null,"(今後の課題については、内部ドキュメントを参照してください)。",-1),F=[p,r,c,u,d,D];function y(i,C,A,f,_,h){return s(),a("div",null,F)}const m=n(e,[["render",y]]);export{S as __pageData,m as default};
