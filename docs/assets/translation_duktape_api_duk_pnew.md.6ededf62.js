import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.92ce8a2a.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_pnew.md","filePath":"translation/duktape/api/duk_pnew.md","lastUpdated":1676126774000}'),o={name:"translation/duktape/api/duk_pnew.md"},l=p(`<h2 id="duk-pnew" tabindex="-1">duk_pnew() <a class="header-anchor" href="#duk-pnew" aria-label="Permalink to &quot;duk_pnew()&quot;">​</a></h2><p>1.3.0 protected object call</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_ret_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_pnew</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nargs</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_ret_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_pnew</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nargs</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | constructor | arg1 | ... | argN | -&gt; | ... | retval | (if success, return value == 0) | ... | constructor | arg1 | ... | argN | -&gt; | ... | err | (if failure, return value != 0)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>duk_new() と同様ですが、エラーを捕捉します。0 の返り値は成功を示し、コンストラクタの結果はスタックトップに残されます。0 ではない返り値はエラーを示し、そのエラーはスタックトップに残されます。</p><p>スタックトップが低すぎる (nargs + 1 より小さい) 場合、または nargs が負である場合、エラーがスローされます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_ret_t</span><span style="color:#E1E4E8;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Protected call to: new MyConstructor(&quot;foo&quot;, 123) */</span></span>
<span class="line"><span style="color:#B392F0;">duk_eval_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;MyConstructor&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_push_int</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">rc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_pnew</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">  /* [ ... func &quot;foo&quot; 123 ] -&gt; [ ... res ] */</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rc </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">duk_safe_to_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;success</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_ret_t</span><span style="color:#24292E;"> rc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* Protected call to: new MyConstructor(&quot;foo&quot;, 123) */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_eval_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;MyConstructor&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_push_int</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">rc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_pnew</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  /* [ ... func &quot;foo&quot; 123 ] -&gt; [ ... res ] */</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rc </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">duk_safe_to_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;success</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_new</p>`,13),t=[l];function e(c,r,y,E,i,u){return a(),n("div",null,t)}const F=s(o,[["render",e]]);export{_ as __pageData,F as default};
