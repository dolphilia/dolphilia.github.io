import{_ as t,o as a,c as s,U as l}from"./chunks/framework.a0f12ab5.js";const f=JSON.parse('{"title":"lightfuncsとの連携方法","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/wiki/how_to_work_with_lightfuncs.md","filePath":"translation/duktape/wiki/how_to_work_with_lightfuncs.md","lastUpdated":1676126774000}'),n={name:"translation/duktape/wiki/how_to_work_with_lightfuncs.md"},e=l(`<h1 id="lightfuncsとの連携方法" tabindex="-1">lightfuncsとの連携方法 <a class="header-anchor" href="#lightfuncsとの連携方法" aria-label="Permalink to &quot;lightfuncsとの連携方法&quot;">​</a></h1><h2 id="lightfunc-の概要" tabindex="-1">Lightfunc の概要 <a class="header-anchor" href="#lightfunc-の概要" aria-label="Permalink to &quot;Lightfunc の概要&quot;">​</a></h2><p>通常のネイティブ関数が duk_push_c_function() を使って作成される場合、2 つのヒープ割り当てが必要です。</p><ul><li>ECMAScript コードで関数を表現するために Function オブジェクトが作成されます。この関数は内部の duk_hnatfunc 構造体によって表現され、これは汎用 duk_hobject 構造体のサブタイプです。</li><li>構造体の一般的な duk_hobject の部分は、別々に割り当てられたプロパティテーブルを提供します。</li><li>構造体の duk_hnatfunc 部分は、ECMAScript コードが関数を呼び出すときに呼び出される Duktape/C 関数を指し、引数カウントや「マジック」値のような様々な関数パラメータを格納します。</li><li>プロパティ・テーブルは、例えば、.lengthプロパティを保持するために割り当てられています。組み込み関数は .name プロパティも持っている。</li></ul><p>非常に低メモリ環境では、この表現によるメモリコストは、例えば100個の関数に対して乗算されたときに加算されます。</p><p>lightfunc型は、関数オブジェクトを表現するための非常に軽量な代替手段を提供します。lightfunc は、タグ付き値 (duk_tval) を使ってネイティブ関数を表し、ヒープの割り当ては行いませんので、例えば、ブール値を表すよりも多くのスペースを必要としません。具体的には、以下のようになります。</p><ul><li>具体的には、32 ビットプラットフォームでパックされた duk_tval が使用される場合、lightfuncs は 8 バイトを取ります。このうち 2 バイトがタイプタグ、4 バイトがネイティブ関数ポインタ、そして 2 バイトがフラグになります。flags フィールド（16 ビット）には、関数の引数カウント（nargs）、.length フィールド、および 8 ビットのマジック値が格納されます。</li><li>パックされていない duk_tval が使用されている場合、lightfuncs は通常 16 バイトを必要とします。フィールドは論理的には同じですが、レイアウトが異なります。</li></ul><p>lightfuncs に関連するヒープの割り当てがないため、いくつかの制限がありますが、最も重要なものは以下のとおりです。</p><ul><li>Lightfuncs はプロパティ・テーブルを持たないので、プロパティを保持できません。</li><li>その結果、lightfuncs は手動で設定する .name プロパティを持つことができません。ただし、仮想的な .name プロパティはあり、トレースバックなどに表示されます。</li><li>Lightfuncs は、.prototype プロパティを保持することもできません。コンストラクタとして使用することはできますが、作成されるデフォルトのインスタンスは、常に Object.prototype を継承します。ネイティブ関数は、プロトタイプを明示的に上書きするか、「置換値」を返すことができます。ネイティブのコンストラクタ関数の書き方」を参照してください。</li></ul><p>lightfuncの名前の例。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">duk&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Math.cos.name</span></span>
<span class="line"><span style="color:#A6ACCD;">= </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">light_08067ce4_0511</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>名前は自動生成され、ネイティブ関数ポインタ（ここでは08067ce4）と16ビットフラグフィールド（ここでは0x0511）が含まれます。</p><p><a href="http://duktape.org/guide.html#type-lightfunc" target="_blank" rel="noreferrer">http://duktape.org/guide.html#type-lightfunc</a> も参照してください。</p><h2 id="lightfuncsの作成" tabindex="-1">lightfuncsの作成 <a class="header-anchor" href="#lightfuncsの作成" aria-label="Permalink to &quot;lightfuncsの作成&quot;">​</a></h2><p>Lightfuncsは、C言語コードからしか作成することができません。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* http://duktape.org/api.html#duk_push_c_lightfunc */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">duk_push_c_lightfunc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> my_adder</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#676E95;font-style:italic;"> /*nargs*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#676E95;font-style:italic;"> /*length*/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;"> /*magic*/</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>通常、nargs と length フィールドは同じ値を持つ。magicフィールドは、ネイティブ関数が必要としない場合は無視し、0に設定することができます。</p><h2 id="組み込みlightfuncs関数の作成" tabindex="-1">組み込みlightfuncs関数の作成 <a class="header-anchor" href="#組み込みlightfuncs関数の作成" aria-label="Permalink to &quot;組み込みlightfuncs関数の作成&quot;">​</a></h2><p>ECMAScript の組み込み関数 Math.cos, Array.prototype.join などはすべてデフォルトで普通の Function オブジェクトであり、かなりの量のメモリを消費します（32 ビットの低メモリターゲットで 20kB 以上）。</p><p>メモリを節約するために、次のオプションを有効にすることができます。</p><ul><li>duk_use_lightfunc_builtins</li></ul><p>有効にすると、ビルトイン関数は初期化中に lightfuncs に変換されます。いくつかのビルトイン関数は、安全に lightfuncs に変換できないので、通常の関数のままです。</p><p>このオプションの欠点は、変換されたビルトインは、たとえば、あまり有用でない .nameを持つことです。</p>`,23),o=[e];function i(p,c,h,r,u,_){return a(),s("div",null,o)}const d=t(n,[["render",i]]);export{f as __pageData,d as default};
