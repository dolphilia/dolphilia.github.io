import{_ as p,o as t,c as o,U as a}from"./chunks/framework.a0f12ab5.js";const q=JSON.parse('{"title":"ファイル","description":"","frontmatter":{},"headers":[],"relativePath":"translation/hsp/i_file.md","filePath":"translation/hsp/i_file.md","lastUpdated":1676126774000}'),s={name:"translation/hsp/i_file.md"},e=a(`<h1 id="ファイル" tabindex="-1">ファイル <a class="header-anchor" href="#ファイル" aria-label="Permalink to &quot;ファイル&quot;">​</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li><li>Cli</li></ul><h2 id="bcopy" tabindex="-1">bcopy <a class="header-anchor" href="#bcopy" aria-label="Permalink to &quot;bcopy {#bcopy}&quot;">​</a></h2><p>ファイルのコピー</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename1&quot;,&quot;filename2&quot; &quot;filename1&quot; : コピー元ファイル名 &quot;filename2&quot; : コピー先ファイル名</p><p><strong>説明</strong>:</p><p>&quot;filename1&quot;のファイルを&quot;filename2&quot;というファイル名にコピーします。</p><p><strong>参照</strong>:</p><p>bload bsave</p><h2 id="chdir" tabindex="-1">chdir <a class="header-anchor" href="#chdir" aria-label="Permalink to &quot;chdir {#chdir}&quot;">​</a></h2><p>ディレクトリ移動</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;dirname&quot; &quot;dirname&quot; : 移動先ディレクトリ名</p><p><strong>説明</strong>:</p><p>&quot;dirname&quot;で指定した名前のディレクトリに移動します。 指定したディレクトリが存在しないか、 書式が間違っている場合はエラー12(「ファイルが見つからないか無効な名前です」)となります。 カレントディレクトリは、システム変数dir_curで参照することができます。</p><p><strong>参照</strong>:</p><p>dir_cur</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="delete" tabindex="-1">delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete {#delete}&quot;">​</a></h2><p>ファイル削除</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot; &quot;filename&quot; : 削除するファイル名</p><p><strong>説明</strong>:</p><p>&quot;filename&quot;で指定したファイルを削除します。 指定したファイルが存在しないか、書式が間違っている場合はエラー12(「ファイルが見つからないか無効な名前です」)となります。 delete命令を実行する前に exist命令でファイルの有無を確認するようにしてください。</p><h2 id="dirlist" tabindex="-1">dirlist <a class="header-anchor" href="#dirlist" aria-label="Permalink to &quot;dirlist {#dirlist}&quot;">​</a></h2><p>ディレクトリ一覧を取得</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>p1,&quot;filemask&quot;,p2 p1=変数 : ディレクトリ一覧を格納する文字列型変数 &quot;filemask&quot; : 一覧のためのファイルマスク p2=0〜(0) : ディレクトリ取得モード</p><p><strong>説明</strong>:</p><p>カレントディレクトリのファイル一覧を作成して、変数に代入します。 &quot;filemask&quot;で、一覧を作成するためのファイルマスクを指定します。 ファイルマスクは、「<em>.</em>」 のようなワイルドカードの形で指定するパラメータです。 たとえば、「<em>.as」というファイルマスクではasという拡張子を持つファイルすべての一覧を作成します。カレントディレクトリにあるすべてのファイル一覧を作成する場合は、「</em>.*」になります。 ディレクトリ一覧は、p1で指定された文字列型の変数に、１ファイルごとに改行(\\n)で区切られた文字列として代入されます。このデータは、メモリノートパッド命令で扱うことができる形式です。</p><p>dirlist命令が実行されると、 システム変数statに一覧が作成されたファイルの数が代入されます。 ファイルが１つもない場合は、システム変数statに0が代入されます。 p2のモードを指定することによって、取得するファイルの種類を選ぶことができます。モード値の詳細は以下の通りです。 モードが省略されている場合は0になります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">モード :  取得される内容</span></span>
<span class="line"><span style="color:#A6ACCD;"> ---------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">     0   :  すべてのファイル</span></span>
<span class="line"><span style="color:#A6ACCD;">     1   :  ディレクトリを除くすべてのファイル</span></span>
<span class="line"><span style="color:#A6ACCD;">     2   :  隠し属性・システム属性を除くすべてのファイル</span></span>
<span class="line"><span style="color:#A6ACCD;">     3   :  ディレクトリ・隠し属性・システム属性以外のすべてのファイル</span></span>
<span class="line"><span style="color:#A6ACCD;">     5   :  ディレクトリのみ</span></span>
<span class="line"><span style="color:#A6ACCD;">     6   :  隠し属性・システム属性ファイルのみ</span></span>
<span class="line"><span style="color:#A6ACCD;">     7   :  ディレクトリと隠し属性・システム属性ファイルのみ</span></span></code></pre></div><p><strong>例</strong>:</p><p>sdim a,64 dirlist a,&quot;<em>.</em>&quot; ; カレントディレクトリの取得 mes a ; 内容の表示 stop</p><p><strong>参照</strong>:</p><p>dirlist2</p><h2 id="exist" tabindex="-1">exist <a class="header-anchor" href="#exist" aria-label="Permalink to &quot;exist {#exist}&quot;">​</a></h2><p>ファイルのサイズ取得</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot; &quot;filename&quot; : サイズを調べるファイルの名前</p><p><strong>説明</strong>:</p><p>&quot;filename&quot;で指定したファイルが存在するかをチェックして、そのファイルサイズを取得します。exist命令が実行されると、システム変数strsizeに結果が反映されます。</p><p>ファイルが存在する場合は、そのファイルサイズがstrsizeに代入されます。 もしファイルが存在しなかった場合は、-1がstrsizeに代入されます。</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="mkdir" tabindex="-1">mkdir <a class="header-anchor" href="#mkdir" aria-label="Permalink to &quot;mkdir {#mkdir}&quot;">​</a></h2><p>ディレクトリ作成</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;dirname&quot; &quot;dirname&quot; : 作成するディレクトリ名</p><p><strong>説明</strong>:</p><p>&quot;dirname&quot;で指定した名前でディレクトリを作成します。 ディレクトリは１階層先までしか作成することができません。 作成中にエラーが発生した場合はエラー12(「ファイルが見つからないか無効な名前です」)となります。 mkdir命令を実行する前に 必ずdirlist命令でフォルダの有無を確認するようにしてください。</p><h2 id="bload" tabindex="-1">bload <a class="header-anchor" href="#bload" aria-label="Permalink to &quot;bload {#bload}&quot;">​</a></h2><p>バッファにファイルをロード</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;,p1,p2,p3 &quot;filename&quot; : ロードするファイル名 p1=変数 : 変数名 p2=64〜(-1): ロードされるサイズ(Byte単位) p3=0〜(-1) : ファイルのオフセット</p><p><strong>説明</strong>:</p><p>ファイルの内容をメモリバッファに読み込みます。 通常は、sdim命令で確保したメモリバッファに対して使用しますが、それ以外の型を持つ変数や、配列変数に対して使うこともできます。 p2のバッファサイズを省略するかマイナス値を指定すると、自動的に変数バッファのサイズが設定されます。</p><p>また、bload命令実行後は、システム変数strsizeに読み込んだデータのサイズが反映されます。</p><p>ファイルのオフセット値を指定すると、その値だけファイルの先頭からずらした場所からが操作の対象になります。 たとえば、bload命令でオフセット値を100に指定すると、 通常はファイルの先頭からデータをメモリに読み込むところを、先頭から100バイト過ぎた場所 (100バイトスキップして) からメモリに読み込まれます。</p><p>これにより、大きなファイルの一部だけを読み込むことや、分割して処理することなどが可能になります。</p><p>テキストファイルを読み込む場合には、専用のnoteload命令を使用することを推奨します。</p><p>#epack命令により暗号化されたファイルをbload命令で読み込む場合は、ファイルのオフセット値を指定することができませんので注意してください。</p><p><strong>参照</strong>:</p><p>noteload bcopy bsave</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="bsave" tabindex="-1">bsave <a class="header-anchor" href="#bsave" aria-label="Permalink to &quot;bsave {#bsave}&quot;">​</a></h2><p>バッファをファイルにセーブ</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;filename&quot;,p1,p2,p3 &quot;filename&quot; : セーブするファイル名 p1=変数 : 変数名 p2=0〜(-1) : セーブするサイズ(Byte単位) p3=0〜(-1) : ファイルのオフセット</p><p><strong>説明</strong>:</p><p>メモリバッファの内容をファイルに書き出します。 通常は、sdim命令で確保したメモリバッファに対して使用しますが、それ以外の型を持つ変数や、配列変数に対して使うこともできます。 p2のバッファサイズを省略するかマイナス値を指定すると、自動的に変数バッファのサイズが設定されます。</p><p>ファイルのオフセット値を指定すると、その値だけファイルの先頭からずらした場所からが操作の対象になります。 bsave命令でオフセットを指定すると、 ファイルの先頭から任意のサイズを過ぎた場所からセーブを行なうことが可能です。 (この場合は、それオフセットより前のファイル内容は変化しません。 また、オフセット指定時はファイルが存在しない場合エラーとなります。)</p><p>これにより、大きなファイルの一部だけを更新することや、分割して処理することなどが可能になります。</p><p>テキストファイルを保存する場合には、専用のnotesave命令を使用することを推奨します。</p><p><strong>参照</strong>:</p><p>notesave bcopy bload</p><h2 id="memfile" tabindex="-1">memfile <a class="header-anchor" href="#memfile" aria-label="Permalink to &quot;memfile {#memfile}&quot;">​</a></h2><p>メモリストリーム設定</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3 p1=変数 : ストリーム対象となる変数名 p2=0〜(0) : バッファのオフセット p3=0〜(MAX) : バッファのサイズ</p><p><strong>説明</strong>:</p><p>ファイルの替わりとして扱うメモリ空間を持った変数を設定します。(メモリストリーム機能) p1で指定された変数は、これ以降に「MEM:ファイル名」で指定されたファイルの読み出し元となります。 p2で、オフセット(読み出す際の先頭位置)を指定します。 0が指定されるか省略された場合は、バッファの先頭から読み出されます。 p3で、読み出す対象となるサイズを指定します。 0が指定されるか、省略された場合は、変数のバッファ全体が対象となります。 メモリ上にロードされたファイルイメージを、「picload &quot;MEM:a.jpg&quot;」のように指定して画像ファイルを読み込むことが可能です。 mmload命令など拡張子をファイル種別として判断している場合には、ダミーのファイル名 (「MEM:a.wav」など)を指定する必要があるので注意してください。</p><p>メモリストリーム機能は、独自形式のアーカイブや暗号形式を用意してその内容を読み出して画像として展開する場合など、 特殊な場面でのみ使われることを想定したものです。 外部DLLや、拡張プラグインに渡すファイル名に関しては、メモリストリーム機能は原則として適用されませんので注意してください。 (HSP3のメモリストリーム機能に対応した拡張プラグインは除きます)</p><p><strong>参照</strong>:</p><p>bload picload</p><p><strong>追加対応</strong>:</p><ul><li>Let</li></ul><h2 id="chdpm" tabindex="-1">chdpm <a class="header-anchor" href="#chdpm" aria-label="Permalink to &quot;chdpm {#chdpm}&quot;">​</a></h2><p>DPMファイル設定</p><p><strong>グループ</strong>:</p><p>ファイル操作命令</p><p><strong>パラメーター</strong>:</p><p>&quot;dpmname&quot;,p1 &quot;dpmname&quot; : DPMファイル名 p1(-1) : 暗号化キー指定</p><p><strong>説明</strong>:</p><p>読み込み対象となるDPMファイルを設定します。 chdpm命令が実行されると、以降は&quot;dpmname&quot;で指定したファイルを、DPM形式でパックされたデータとして扱います。 DPMファイルの初期化中にエラーが発生した場合は、エラー12(「ファイルが見つからないか無効な名前です」)となります。</p><p>chdpm命令は、複数のDPM形式ファイルを切り替えて使用する場合に有効です。 また、DPMファイルごとに異なる暗号化を行なうことで、より強力なファイル保護を行なうことも可能です。 この命令以外でも、「picload &quot;DPM:data.dpm:test.jpg&quot;」のようにファイル名の一部として呼び出すことが可能です。(この場合、暗号化キーは指定できません。)</p><p>暗号化キーを指定したDPMファイルは、スクリプトから直接生成する必要があります。詳しくは、サンプルスクリプト「mkpack.hsp」を参照してください。</p>`,119),n=[e];function r(l,i,d,u,c,g){return t(),o("div",null,n)}const h=p(s,[["render",r]]);export{q as __pageData,h as default};
