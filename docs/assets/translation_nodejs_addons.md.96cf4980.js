import{_ as s,o as n,c as a,R as l}from"./chunks/framework.320df067.js";const A=JSON.parse('{"title":"C++アドオン","description":"","frontmatter":{},"headers":[],"relativePath":"translation/nodejs/addons.md","filePath":"translation/nodejs/addons.md","lastUpdated":null}'),p={name:"translation/nodejs/addons.md"},o=l(`<h1 id="c-アドオン" tabindex="-1">C++アドオン <a class="header-anchor" href="#c-アドオン" aria-label="Permalink to &quot;C++アドオン&quot;">​</a></h1><p>Addons は C++ で書かれた動的にリンクされる共有オブジェクトです。<code>require()</code>関数はアドオンを通常のNode.jsモジュールとしてロードすることができます。アドオンは JavaScript と C/C++ ライブラリ間のインタフェースを提供します。</p><p>アドオンの実装には3つのオプションがある：Node-API、nan、または内部 V8、libuv、Node.js ライブラリの直接使用です。Node-APIで公開されていない機能に直接アクセスする必要がない限り、Node-APIを使用してください。Node-API の詳細については、C/C++ addons with Node-API を参照してください。</p><p>Node-API を使用しない場合、アドオンの実装は複雑で、複数のコンポーネントや API の知識が必要になります：</p><ul><li>V8: Node.js が JavaScript 実装を提供するために使用する C++ ライブラリ。V8は、オブジェクトの作成や関数の呼び出しなどのメカニズムを提供します。V8 の API は <code>v8.h</code> ヘッダーファイル（Node.js のソースツリーでは <code>deps/v8/include/v8.h</code>）に記述されています。</li><li>libuv：libuv: Node.js のイベントループ、ワーカースレッド、プラットフォームの非同期ビヘイビアを実装する C ライブラリです。また、クロスプラットフォームの抽象化ライブラリとしても機能し、ファイルシステム、ソケット、タイマー、システムイベントとのやり取りなど、多くの一般的なシステムタスクに対して、すべての主要なオペレーティングシステム上でPOSIXライクなアクセスを簡単に提供します。libuvはまた、標準のイベントループを超える高度な非同期アドオンのために、POSIXスレッドに似たスレッド抽象化を提供します。アドオンの作者は、libuv を介した作業をノンブロッキングのシステム操作、ワーカースレッド、または libuv スレッドのカスタム使用にオフロードすることで、I/O やその他の時間のかかるタスクでイベントループをブロックすることを避ける必要があります。</li><li>内部 Node.js ライブラリ: Node.js 自身が、アドオンが使用できる C++ API をエクスポートしており、その中で最も重要なものは <code>node::ObjectWrap</code> クラスです。</li><li>Node.js は OpenSSL を含む他の静的にリンクされたライブラリを含んでいます。これらのライブラリは Node.js ソースツリーの <code>deps/</code> ディレクトリにあります。libuv, OpenSSL, V8, zlib シンボルだけが Node.js によって意図的に再エクスポートされ、アドオンによって様々な範囲で使用されます。追加情報については、Node.js に含まれるライブラリへのリンクを参照してください。</li></ul><p>以下のサンプルはすべてダウンロード可能で、アドオンの開始点として使用することができます。</p><h2 id="hello-world" tabindex="-1">Hello world <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello world&quot;">​</a></h2><p>この「Hello world」の例は、C++で書かれたシンプルなアドオンで、次のJavaScriptコードに相当する：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>まず、<code>hello.cc</code>ファイルを作成する：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// hello.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Method</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">      isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Initialize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Method</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Initialize</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>すべてのNode.jsアドオンは、パターンに従った初期化関数をエクスポートする必要があります：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Initialize</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Initialize</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>関数ではないので、<code>NODE_MODULE</code>の後にセミコロンはありません（<code>node.h</code>を参照）。</p><p>モジュール名 <code>module_name</code> は最終的なバイナリのファイル名と一致しなければならない（接尾辞 <code>.node</code> は除く）。</p><p><code>hello.cc</code> の例では、初期化関数は <code>Initialize</code> で、アドオンモジュール名は <code>addon</code> となる。</p><p><code>node-gyp</code> でアドオンをビルドする場合、<code>NODE_GYP_MODULE_NAME</code> マクロを <code>NODE_MODULE()</code> の最初のパラメータとして使用することで、最終的なバイナリの名前を <code>NODE_MODULE()</code> に渡すことができます。</p><p>NODE_MODULE()\` で定義したアドオンは、複数のコンテキストや複数のスレッドで同時にロードすることはできません。</p><h3 id="コンテキスト対応アドオン" tabindex="-1">コンテキスト対応アドオン <a class="header-anchor" href="#コンテキスト対応アドオン" aria-label="Permalink to &quot;コンテキスト対応アドオン&quot;">​</a></h3><p>Node.js アドオンを複数のコンテキストで複数回ロードする必要がある環境があります。例えば、Electron ランタイムは Node.js の複数のインスタンスを単一のプロセスで実行します。各インスタンスは独自の <code>require()</code> キャッシュを持つため、各インスタンスは <code>require()</code> 経由でロードされたときに正しく動作するネイティブアドオンが必要になります。つまり、アドオンは複数の初期化をサポートする必要があります。</p><p>マクロ <code>NODE_MODULE_INITIALIZER</code> は、Node.js がアドオンをロードする際に見つけることを期待する関数の名前に展開されます。以下の例のように、アドオンを初期化することができます：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">extern</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> NODE_MODULE_EXPORT </span><span style="color:#C792EA;">void</span></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE_INITIALIZER</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> exports</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                        Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> module</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                        Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* ここでアドオンの初期化を行います。 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>マクロ <code>NODE_MODULE_INIT()</code> を使用する方法もあります。<code>NODE_MODULE_INIT()</code>は、指定されたアドオンのイニシャライザ関数を中心にアドオンを構築するために使用される <code>NODE_MODULE()</code> とは異なり、関数本体に続くイニシャライザの宣言として機能します。</p><p>NODE_MODULE_INIT()\`の呼び出しに続く関数本体の内部では、以下の3つの変数を使用することができる：</p><ul><li><code>Local&lt;Object&gt; exports</code>,</li><li><code>Local&lt;Value&gt; module</code>, and</li><li><code>Local&lt;Context&gt; context</code></li></ul><p>コンテキストを意識したアドオンを構築するという選択には、グローバルな静的データを注意深く管理するという責任が伴います。アドオンは複数回ロードされる可能性があり、異なるスレッドからロードされる可能性もあるため、アドオンに保存されるグローバル静的データは適切に保護されなければならず、JavaScript オブジェクトへの永続的な参照を含んではなりません。なぜなら、JavaScript オブジェクトは 1 つのコンテキストでのみ有効であり、間違ったコンテキストからアクセスしたり、作成時と異なるスレッドからアクセスしたりすると、クラッシュを引き起こす可能性が高いからです。</p><p>コンテキスト対応アドオンは、以下の手順を実行することで、グローバルな静的データを回避する構造にすることができます：</p><ul><li>アドオンインスタンスごとのデータを保持し、以下の形式の静的メンバを持つクラスを定義します。</li></ul><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DeleteInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Cast \`data\` to an instance of the class and delete it.</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>アドオンのイニシャライザでこのクラスのインスタンスをヒープ確保する。これは <code>new</code> キーワードを使用して実現できます。</li><li><code>node::AddEnvironmentCleanupHook()</code>を呼び出し、上記で作成したインスタンスと <code>DeleteInstance()</code> へのポインタを渡します。これにより、環境が取り壊されるときにインスタンスが確実に削除されます。</li><li>クラスのインスタンスを <code>v8::External</code> に格納する。</li><li><code>v8::External</code>を <code>v8::FunctionTemplate::New()</code> または <code>v8::Function::New()</code> に渡して、JavaScript に公開するすべてのメソッドに渡す。<code>v8::FunctionTemplate::New()</code>または <code>v8::Function::New()</code> の3番目のパラメータは <code>v8::External</code> を受け取り、<code>v8::FunctionCallbackInfo::Data()</code> メソッドを用いてネイティブコールバックで利用できるようにする。</li></ul><p>これにより、アドオンインスタンスごとのデータが、JavaScript から呼び出せる各バインディングに確実に届くようになります。アドオンインスタンスごとのデータは、アドオンが作成する非同期コールバックにも渡される必要があります。</p><p>次の例は、コンテキスト対応アドオンの実装を示しています：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">AddonData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">AddonData</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">call_count</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 環境のクリーンアップ時に、このアドオンインスタンスごとのデータが削除されるようにします。</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> DeleteInstance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // アドオンごとのデータ。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> call_count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">DeleteInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#F07178;">AddonData</span><span style="color:#89DDFF;">*&gt;(</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Method</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">info</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // アドンインスタンスごとのデータを取得する。</span></span>
<span class="line"><span style="color:#A6ACCD;">  AddonData</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">reinterpret_cast&lt;</span><span style="color:#A6ACCD;">AddonData</span><span style="color:#89DDFF;">*&gt;(</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Data</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">External</span><span style="color:#89DDFF;">&gt;()-&gt;</span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  data</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">call_count</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">  info</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">double</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">call_count</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE_INIT</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;font-style:italic;">/* exports, module, context */</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // このアドオンのインスタンス用に \`AddonData\` の新しいインスタンスを作成し、そのライフサイクルを Node.js 環境のライフサイクルと関連付ける。</span></span>
<span class="line"><span style="color:#F07178;">  AddonData</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">AddonData</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // データを \`v8::External\` でラップして、公開するメソッドに渡せるようにする。</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">External</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> external </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">External</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // メソッド \`Method\` を JavaScript に公開し、\`FunctionTemplate\` コンストラクタの 3 番目のパラメータとして \`external\` を渡して、上で作成したアドオンインスタンスごとのデータを受け取るようにする。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">method</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#FFCB6B;">FunctionTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Method</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> external</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetFunction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">FromJust</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="workerサポート" tabindex="-1">Workerサポート <a class="header-anchor" href="#workerサポート" aria-label="Permalink to &quot;Workerサポート&quot;">​</a></h4><p>メインスレッドやWorkerスレッドなど、複数のNode.js環境からロードするためには、アドオンは以下のいずれかを行う必要がある：</p><ul><li>Node-API アドオンである。</li><li>上記のように <code>NODE_MODULE_INIT()</code> を使用してコンテキスト対応として宣言されている。</li></ul><p><code>Worker</code> スレッドをサポートするために、アドオンはそのようなスレッドが存在するときに割り当てたリソースをクリーンアップする必要があります。これは <code>AddEnvironmentCleanupHook()</code> 関数を使うことで実現できる：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;font-style:italic;">fun</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>この関数は、与えられた Node.js インスタンスがシャットダウンする前に実行されるフックを追加する。必要であれば、同じシグネチャを持つ <code>RemoveEnvironmentCleanupHook()</code> を使って、実行前にフックを削除することができます。コールバックは最後から順に実行されます。</p><p>必要であれば、追加の <code>AddEnvironmentCleanupHook()</code> と <code>RemoveEnvironmentCleanupHook()</code> オーバーロードのペアがあり、クリーンアップフックはコールバック関数を受け取る。これは、アドオンによって登録された libuv ハンドルのような非同期リソースをシャットダウンするために使用できます。</p><p>次の <code>addon.cc</code> は <code>AddEnvironmentCleanupHook</code> を使用している：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">assert.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">HandleScope</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注：実際のアプリケーションでは、静的／グローバルなデータに依存しないこと。</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> cookie[] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yum yum</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> cleanup_cb1_called </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> cleanup_cb2_called </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cleanup_cb1</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#A6ACCD;">Isolate</span><span style="color:#89DDFF;">*&gt;(</span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  HandleScope </span><span style="color:#82AAFF;">scope</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsEmpty</span><span style="color:#89DDFF;">());</span><span style="color:#676E95;font-style:italic;">  // アサートVMはまだ生きている</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">IsObject</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  cleanup_cb1_called</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cleanup_cb2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arg </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">static_cast&lt;</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*&gt;(</span><span style="color:#A6ACCD;">cookie</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">  cleanup_cb2_called</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sanity_check</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cleanup_cb1_called </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cleanup_cb2_called </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// このアドオンがコンテキストを認識するように初期化する。</span></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE_INIT</span><span style="color:#89DDFF;">(</span><span style="color:#676E95;font-style:italic;">/* exports, module, context */</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sanity_check</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cleanup_cb2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cookie</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cleanup_cb1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Test in JavaScript by running:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="建物" tabindex="-1">建物 <a class="header-anchor" href="#建物" aria-label="Permalink to &quot;建物&quot;">​</a></h3><p>ソースコードを書き終えたら、バイナリの <code>addon.node</code> ファイルにコンパイルしなければならない。そのためには、プロジェクトのトップレベルに <code>binding.gyp</code> というファイルを作成し、JSON ライクなフォーマットでモジュールのビルド設定を記述する。このファイルは、Node.jsアドオンをコンパイルするために特別に書かれたツールであるnode-gypによって使用されます。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">targets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target_name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sources</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>node-gyp</code> ユーティリティのバージョンは Node.js にバンドルされ、 <code>npm</code> の一部として配布される。このバージョンは開発者が直接使用できるようにはなっておらず、アドオンをコンパイルしてインストールするために <code>npm install</code> コマンドを使用する機能をサポートすることのみを目的としています。node-gyp<code>を直接使いたい開発者は</code>npm install -g node-gyp<code>コマンドを使ってインストールすることができる。プラットフォーム固有の要件など、詳細については</code>node-gyp\` のインストール手順を参照してほしい。</p><p>binding.gyp<code>ファイルを作成したら、</code>node-gyp configure<code>を使用して、現在のプラットフォームに適したプロジェクトのビルドファイルを生成する。これは</code>Makefile<code>(Unix プラットフォームの場合) または</code>vcxproj<code>ファイル (Windows の場合) を</code>build/\` ディレクトリに生成します。</p><p>次に、コンパイルした <code>addon.node</code> ファイルを生成するために <code>node-gyp build</code> コマンドを実行する。このファイルは <code>build/Release/</code> ディレクトリに置かれる。</p><p>npm install<code>を使用して Node.js アドオンをインストールする場合、npm はバンドルされているバージョンの</code>node-gyp\` を使用して、これと同じ一連のアクションを実行し、ユーザのプラットフォーム用にコンパイルされたバージョンのアドオンを必要に応じて生成します。</p><p>一度ビルドされたバイナリアドオンは、ビルドされた <code>addon.node</code> モジュールに <code>require()</code> を指定することで Node.js 内から使用することができます：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// hello.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;world&#39;</span></span></code></pre></div><p>コンパイルされたアドオンバイナリの正確なパスはコンパイル方法によって異なるため (<code>./build/Debug/</code> にあることもあります)、アドオンは bindings パッケージを使ってコンパイルされたモジュールをロードすることができます。</p><p><code>bindings</code> パッケージの実装は、アドオンモジュールを見つける方法がより洗練されていますが、基本的には <code>try...catch</code> に似たパターンを使用しています：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon.node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (err) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Debug/addon.node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="node-jsに含まれるライブラリへのリンク" tabindex="-1">Node.jsに含まれるライブラリへのリンク <a class="header-anchor" href="#node-jsに含まれるライブラリへのリンク" aria-label="Permalink to &quot;Node.jsに含まれるライブラリへのリンク&quot;">​</a></h3><p>Node.jsは、V8、libuv、OpenSSLなどの静的にリンクされたライブラリを使用します。すべてのアドオンは V8 にリンクする必要があり、他の依存ライブラリにもリンクできます。一般的には、適切な <code>#include &lt;...&gt;</code> ステートメント（例えば <code>#include &lt;v8.h&gt;</code>）を含めるだけで、 <code>node-gyp</code> が適切なヘッダを自動的に探してくれます。ただし、いくつか注意すべき点があります：</p><ul><li><p><code>node-gyp</code> が実行されると、Node.js の特定のリリースバージョンを検出し、完全なソースの tarball またはヘッダーのみをダウンロードします。node-gyp\` が実行されると、Node.js の特定のリリースバージョンを検出し、完全なソースの tarball か、ヘッダーのみをダウンロードします。しかし、Node.js ヘッダのみがダウンロードされた場合、Node.js によってエクスポートされたシンボルのみが利用可能になります。</p></li><li><p><code>node-gyp</code> は、ローカルの Node.js ソースイメージを指す <code>--nodedir</code> フラグを使用して実行できます。このオプションを使用すると、アドオンは依存関係のフルセットにアクセスできるようになります。</p></li></ul><h3 id="require-を使ったアドオンの読み込み" tabindex="-1"><code>require()</code>を使ったアドオンの読み込み <a class="header-anchor" href="#require-を使ったアドオンの読み込み" aria-label="Permalink to &quot;\`require()\`を使ったアドオンの読み込み&quot;">​</a></h3><p>コンパイルされたアドオンバイナリの拡張子は <code>.node</code> です (<code>.dll</code> や <code>.so</code> とは異なります)。require()<code>関数は </code>.node\` という拡張子のファイルを探し、ダイナミックリンクライブラリとして初期化するように書かれています。</p><p><code>require()</code>を呼び出すとき、通常は拡張子 <code>.node</code> を省略することができ、Node.js はアドオンを見つけて初期化します。ただし、注意点として、Node.js は最初に同じベース名を持つモジュールや JavaScript ファイルを探してロードしようとします。例えば、バイナリの <code>addon.node</code> と同じディレクトリに <code>addon.js</code> ファイルがある場合、 <code>require(&#39;addon&#39;)</code> は <code>addon.js</code> ファイルを優先してロードします。</p><h2 id="node-jsのネイティブ抽象化機能" tabindex="-1">Node.jsのネイティブ抽象化機能 <a class="header-anchor" href="#node-jsのネイティブ抽象化機能" aria-label="Permalink to &quot;Node.jsのネイティブ抽象化機能&quot;">​</a></h2><p>このドキュメントで説明する各例では、アドオンを実装するために Node.js と V8 API を直接使用しています。V8 API は、V8 のリリースごとに（そして Node.js のメジャーリリースごとに）劇的に変更される可能性があります。変更のたびに、アドオンは機能し続けるために更新と再コンパイルが必要になるかもしれません。Node.jsのリリーススケジュールは、このような変更の頻度と影響を最小限に抑えるように設計されていますが、V8 APIの安定性を確保するためにNode.jsができることはほとんどありません。</p><p>Native Abstractions for Node.js (または <code>nan</code>) は、アドオン開発者が V8 と Node.js の過去と将来のリリース間の互換性を保つために使用することを推奨するツールのセットを提供します。どのように使用できるかは <code>nan</code> のサンプルを参照してください。</p><h2 id="node-api" tabindex="-1">Node-API <a class="header-anchor" href="#node-api" aria-label="Permalink to &quot;Node-API&quot;">​</a></h2><blockquote><p>Stability: 2 - Stable</p></blockquote><p>Node-APIは、ネイティブアドオンを構築するためのAPIです。基礎となるJavaScriptランタイム（例えばV8）から独立しており、Node.js自体の一部として維持されています。このAPIは、Node.jsのバージョン間でアプリケーション・バイナリ・インタフェース（ABI）が安定しています。これは、基礎となるJavaScriptエンジンの変更からアドオンを隔離し、あるバージョン用にコンパイルされたモジュールが再コンパイルすることなくNode.jsの後のバージョンで実行できるようにすることを目的としています。アドオンは、このドキュメント（node-gyp など）で概説されているのと同じアプローチ/ツールでビルド/パッケージ化されます。唯一の違いは、ネイティブコードで使用されるAPIのセットです。V8 または Native Abstractions for Node.jsAPI を使用する代わりに、Node-API で利用可能な関数が使用されます。</p><p>Node-API によって提供される ABI の安定性の恩恵を受けるアドオンの作成と保守には、 特定の実装上の考慮事項が伴います。</p><p>上記の「Hello world」の例で Node-API を使用するには、<code>hello.cc</code> の内容を以下に置き換えます。その他の命令はすべて同じです。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// hello.cc using Node-API</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node_api.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">napi_value</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Method</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">napi_env</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">napi_callback_info</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  napi_value greeting</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  napi_status status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  status </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_create_string_utf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> NAPI_AUTO_LENGTH</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">greeting</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">status </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> napi_ok</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> greeting</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">napi_value</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">napi_env</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">napi_value</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  napi_status status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  napi_value fn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  status </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_create_function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Method</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">fn</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">status </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> napi_ok</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  status </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_set_named_property</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fn</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">status </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> napi_ok</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> exports</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NAPI_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>利用可能な関数とその使用方法は、Node-APIを使用したC/C++アドオンに記載されています。</p><h2 id="アドオンの例" tabindex="-1">アドオンの例 <a class="header-anchor" href="#アドオンの例" aria-label="Permalink to &quot;アドオンの例&quot;">​</a></h2><p>以下は、開発者がアドオンを始めるためのサンプルです。例では V8 API を使用しています。また、ハンドル、スコープ、関数テンプレートなどの概念については、V8 Embedder&#39;s Guideを参照してください。</p><p>これらの例では次の <code>binding.gyp</code> ファイルを使用しています：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">targets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target_name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sources</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>\`\`.cc<code>ファイルが複数ある場合は、追加したファイル名を </code>sources\` 配列に追加するだけでよい：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sources</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myexample.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p><code>binding.gyp</code>ファイルの準備ができたら、<code>node-gyp</code>を使用してサンプルアドオンを設定し、ビルドすることができます：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node-gyp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">configure</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><h3 id="関数引数" tabindex="-1">関数引数 <a class="header-anchor" href="#関数引数" aria-label="Permalink to &quot;関数引数&quot;">​</a></h3><p>アドオンは通常、Node.js 内で実行されている JavaScript からアクセスできるオブジェクトや関数を公開します。関数がJavaScriptから呼び出される場合、入力引数と戻り値はC/C++コードとマッピングされなければなりません。</p><p>次の例では、JavaScript から渡された関数引数を読み取り、結果を返す方法を説明します：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Exception</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 入力引数は、const FunctionCallbackInfo&lt;Value&gt;&amp; args structを使用して渡される。</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 渡された引数の数をチェックする。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Length</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // JavaScriptに返されるエラーを投げる</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">ThrowException</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Exception</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">TypeError</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Wrong number of arguments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 引数のタイプをチェックする</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">IsNumber</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">IsNumber</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">ThrowException</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Exception</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">TypeError</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Wrong arguments</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // オペレーションの実施</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">&gt;()-&gt;</span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">&gt;()-&gt;</span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Number</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 戻り値を設定する（渡されたFunctionCallbackInfo&lt;Value&gt;&amp;を使用）。</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">num</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Add</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>コンパイルが完了したら、Node.js 内から例のアドオンを要求し、使用することができます：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This should be eight:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="コールバック" tabindex="-1">コールバック <a class="header-anchor" href="#コールバック" aria-label="Permalink to &quot;コールバック&quot;">​</a></h3><p>アドオンでは、JavaScript 関数を C++ 関数に渡し、そこから実行するのが一般的です。次の例は、このようなコールバックを呼び出す方法を示しています：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">RunCallback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cb </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#82AAFF;">Cast</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Null</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> RunCallback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>この例では、2 つの引数を持つ <code>Init()</code> を使用し、2 番目の引数として完全な <code>module</code> オブジェクトを受け取ります。これにより、アドオンは <code>exports</code> のプロパティとして関数を追加するのではなく、単一の関数で <code>exports</code> を完全に上書きすることができる。</p><p>テストするには、以下のJavaScriptを実行する：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">addon</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>この例では、コールバック関数は同期的に呼び出される。</p><h3 id="オブジェクト・ファクトリ" tabindex="-1">オブジェクト・ファクトリ <a class="header-anchor" href="#オブジェクト・ファクトリ" aria-label="Permalink to &quot;オブジェクト・ファクトリ&quot;">​</a></h3><p>アドオンは、次の例に示すように、C++ 関数内から新しいオブジェクトを作成して返すことができます。オブジェクトが作成され、<code>createObject()</code> に渡された文字列を echo する <code>msg</code> プロパティとともに返される：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CreateObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">                               </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">ToString</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#F07178;">           .</span><span style="color:#82AAFF;">FromJust</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">obj</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CreateObject</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>JavaScriptでテストする：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addon</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addon</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">msg)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;hello world&#39;</span></span></code></pre></div><h3 id="関数ファクトリ" tabindex="-1">関数ファクトリ <a class="header-anchor" href="#関数ファクトリ" aria-label="Permalink to &quot;関数ファクトリ&quot;">​</a></h3><p>もうひとつのよくあるシナリオは、C++関数をラップしたJavaScript関数を作り、それをJavaScriptに返すというものだ：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyFunction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">      isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CreateFunction</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> tpl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> MyFunction</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetFunction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 匿名にする場合は省略</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetName</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">      isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">theFunction</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fn</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CreateFunction</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Init</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>To test:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addon</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: &#39;hello world&#39;</span></span></code></pre></div><h3 id="c-オブジェクトのラッピング" tabindex="-1">C++オブジェクトのラッピング <a class="header-anchor" href="#c-オブジェクトのラッピング" aria-label="Permalink to &quot;C++オブジェクトのラッピング&quot;">​</a></h3><p>JavaScriptの <code>new</code> 演算子を使用して新しいインスタンスを作成できるように、C++ オブジェクト/クラスをラップすることも可能です：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">InitAll</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> InitAll</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>次に、<code>myobject.h</code> でラッパークラスは <code>node::ObjectWrap</code> を継承する：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.h</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node_object_wrap.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">~MyObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PlusOne</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value_</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>で、公開するメソッドを実装する。以下では、コンストラクタのプロトタイプにメソッド <code>plusOne()</code> を追加して公開している：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">ObjectTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> : </span><span style="color:#82AAFF;">value_</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::~</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ObjectTemplate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> addon_data_tpl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ObjectTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">addon_data_tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetInternalFieldCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  // 1 field for the MyObject::New()</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> addon_data </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">addon_data_tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> tpl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> New</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> addon_data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetClassName</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">InstanceTemplate</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">SetInternalFieldCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Prototype</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tpl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plusOne</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> PlusOne</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> constructor </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetFunction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">addon_data</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetInternalField</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">      isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#F07178;">      constructor</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">FromJust</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsConstructCall</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">IsUndefined</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">NumberValue</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">FromMaybe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Wrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cons </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Data</span><span style="color:#89DDFF;">().</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;()-&gt;</span><span style="color:#82AAFF;">GetInternalField</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> result </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cons</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">PlusOne</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Unwrap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Holder</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">value_</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Number</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">value_</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>このサンプルをビルドするには、<code>myobject.cc</code>ファイルを<code>binding.gyp</code>に追加しなければならない：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">targets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target_name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sources</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.cc</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Test it with:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MyObject</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 12</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 13</span></span></code></pre></div><p>ラッパー・オブジェクトのデストラクタは、そのオブジェクトがガベージ・コレクションされたときに実行されます。デストラクタのテストのために、強制的にガベージ・コレクションを実行できるコマンドライン・フラグがあります。これらのフラグはV8 JavaScriptエンジンによって提供されています。これらはいつでも変更または削除される可能性があります。これらは Node.js や V8 によって文書化されておらず、テスト以外では決して使用しないでください。</p><p>プロセスやワーカースレッドのシャットダウン時に、JSエンジンはデストラクタを呼び出しません。したがって、これらのオブジェクトを追跡し、リソースリークを避けるために適切に破棄するのはユーザーの責任です。</p><h3 id="ラップされたオブジェクトのファクトリー" tabindex="-1">ラップされたオブジェクトのファクトリー <a class="header-anchor" href="#ラップされたオブジェクトのファクトリー" aria-label="Permalink to &quot;ラップされたオブジェクトのファクトリー&quot;">​</a></h3><p>あるいは、ファクトリーパターンを使って、JavaScript の <code>new</code> 演算子を使った明示的なオブジェクトインスタンスの生成を避けることもできます：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObject</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// instead of:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const obj = new addon.Object();</span></span></code></pre></div><p>まず、<code>createObject()</code> メソッドは <code>addon.cc</code> に実装されている：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CreateObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">InitAll</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CreateObject</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> InitAll</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p><code>myobject.h</code>では、オブジェクトのインスタンスを生成するための静的メソッド <code>NewInstance()</code> が追加されている。このメソッドはJavaScriptで <code>new</code> を使う代わりとなる：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.h</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node_object_wrap.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">~MyObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PlusOne</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value_</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>の実装は前の例と似ている：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> : </span><span style="color:#82AAFF;">value_</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::~</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Prepare constructor template</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> tpl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> New</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetClassName</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">InstanceTemplate</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">SetInternalFieldCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Prototype</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_PROTOTYPE_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tpl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">plusOne</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> PlusOne</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Reset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetFunction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[](</span><span style="color:#C792EA;">void*</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Reset</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsConstructCall</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Invoked as constructor: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">IsUndefined</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">NumberValue</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">FromMaybe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Wrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Invoked as plain function \`MyObject(...)\`, turn into construct call.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cons </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> instance </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cons</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cons </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> instance </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">cons</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">PlusOne</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Unwrap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Holder</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">value_</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Number</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">value_</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>もう一度言うが、このサンプルをビルドするには、<code>myobject.cc</code>ファイルを<code>binding.gyp</code>に追加しなければならない：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">targets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target_name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">sources</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addon.cc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.cc</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>テストする:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> createObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createObject</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 12</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 13</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createObject</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 21</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 22</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">plusOne</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 23</span></span></code></pre></div><h3 id="ラップされたオブジェクトの受け渡し" tabindex="-1">ラップされたオブジェクトの受け渡し <a class="header-anchor" href="#ラップされたオブジェクトの受け渡し" aria-label="Permalink to &quot;ラップされたオブジェクトの受け渡し&quot;">​</a></h3><p>C++ オブジェクトをラップして返すだけでなく、Node.js のヘルパー関数 <code>node::ObjectWrap::Unwrap</code> を使ってラップを解いて、ラップされたオブジェクトを渡すこともできる。以下の例では、2 つの <code>MyObject</code> オブジェクトを入力引数として受け取ることができる関数 <code>add()</code> を示している：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// addon.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node_object_wrap.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CreateObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Unwrap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">ToObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Unwrap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">ToObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj2</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Number</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> sum</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">InitAll</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">createObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CreateObject</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NODE_SET_METHOD</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Add</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NODE_MODULE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">NODE_GYP_MODULE_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> InitAll</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p><code>myobject.h</code>では、オブジェクトをアンラップした後にプライベートな値にアクセスできるように、新しいpublicメソッドが追加されている。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.h</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MYOBJECT_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node_object_wrap.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ObjectWrap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">inline</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> value_</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">explicit</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">~MyObject</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value_</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><p><code>myobject.cc</code>の実装は以前と似ている：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// myobject.cc</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">node.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myobject.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">namespace</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">demo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionCallbackInfo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Isolate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Local</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">using</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">v8</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 警告このアドオンはワーカースレッドには使用できません。</span></span>
<span class="line"><span style="color:#F07178;">Global</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">constructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> : </span><span style="color:#82AAFF;">value_</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::~</span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Isolate</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isolate</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // コンストラクタ・テンプレートの準備</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">FunctionTemplate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> tpl </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionTemplate</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> New</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">SetClassName</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewFromUtf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">InstanceTemplate</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">SetInternalFieldCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Reset</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tpl</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetFunction</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">AddEnvironmentCleanupHook</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[](</span><span style="color:#C792EA;">void*</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Reset</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsConstructCall</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // コンストラクタとして呼び出される: \`new MyObject(...)\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">double</span><span style="color:#F07178;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">IsUndefined</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">NumberValue</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">FromMaybe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    MyObject</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyObject</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">Wrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">This</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // プレーンな関数 \`MyObject(...)\` として呼び出されると、コンストラクトコールに変わる。</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cons </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> instance </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">cons</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">MyObject</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">FunctionCallbackInfo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetIsolate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> argc </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">argc</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> cons </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> constructor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Context</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isolate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">GetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">  Local</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> instance </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">cons</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">NewInstance</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argc</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> argv</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ToLocalChecked</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetReturnValue</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">  // namespace demo</span></span></code></pre></div><p>テストする：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./build/Release/addon</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObject</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObject</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> addon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(obj1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> obj2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Prints: 30</span></span></code></pre></div><ul><li>Electron</li><li>Embedder&#39;s Guide</li><li>Linking to libraries included with Node.js</li><li>Native Abstractions for Node.js</li><li>V8</li><li><code>Worker</code></li><li>bindings</li><li>download</li><li>examples</li><li>implementation considerations</li><li>installation instructions</li><li>libuv</li><li>node-gyp</li><li>require</li><li>v8-docs</li></ul>`,139),e=[o];function t(c,F,r,y,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
