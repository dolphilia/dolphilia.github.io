import{_ as l,o as s,c as a,Q as t,k as n,a as o}from"./chunks/framework.92ce8a2a.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/guide/custom_json_formats.md","filePath":"translation/duktape/guide/custom_json_formats.md","lastUpdated":1676126774000}'),e={name:"translation/duktape/guide/custom_json_formats.md"},p=t(`<h2 id="custom_json_formats" tabindex="-1">カスタムJSONフォーマット <a class="header-anchor" href="#custom_json_formats" aria-label="Permalink to &quot;カスタムJSONフォーマット {#custom_json_formats}&quot;">​</a></h2><h3 id="ecmascript-の-json-の欠点" tabindex="-1">ECMAScript の JSON の欠点 <a class="header-anchor" href="#ecmascript-の-json-の欠点" aria-label="Permalink to &quot;ECMAScript の JSON の欠点&quot;">​</a></h3><p>標準の JSON フォーマットは、ECMAScript で使用する場合、いくつかの欠点があります。</p><p>-未定義値や関数値はサポートされていません。 -NaN と無限大の値はサポートされていません。 -Duktapeのカスタム・タイプは、もちろんサポートされていません。 -BMP以上のコードポイントは、サロゲート・ペアとしてしか表現できない -U+10FFFF以上のコードポイントは、サロゲート・ペアとしても表現できません。 -出力が印刷可能なASCIIでないため、不便なことが多い</p><p>これらの制限は、ECMAScript仕様の一部であり、より甘い動作を明示的に禁止しています。Duktapeは、よりプログラマフレンドリーな2種類のカスタムJSONフォーマットを提供しています。JXとJCで、以下に説明します。</p><h3 id="カスタムjxフォーマット" tabindex="-1">カスタムJXフォーマット <a class="header-anchor" href="#カスタムjxフォーマット" aria-label="Permalink to &quot;カスタムJXフォーマット&quot;">​</a></h3><p>JXは、すべての値を非常に読みやすい方法でエンコードし、ほとんどすべての値を忠実にパースして返します（関数値は最も重要な例外です）。出力は純粋に印刷可能なASCIIで、U+FFFF以上のコードポイントはカスタムエスケープ形式でエンコードされ、オブジェクトキーの周りの引用符はほとんどの場合省略されます。JXはJSON互換ではありませんが、非常に読みやすいフォーマットで、デバッグやロギングなどに最も適しています。</p><p>JXは以下のように使用します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, bar: [ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> ] };</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(Duktape.</span><span style="color:#B392F0;">enc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jx&#39;</span><span style="color:#E1E4E8;">, obj));</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: {foo:NaN,bar:[1,undefined,3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Duktape.</span><span style="color:#B392F0;">dec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jx&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;{ foo: 123, bar: undefined, quux: NaN }&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(dec.foo, dec.bar, dec.quux);</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: 123 undefined NaN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bar: [ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> ] };</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(Duktape.</span><span style="color:#6F42C1;">enc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jx&#39;</span><span style="color:#24292E;">, obj));</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: {foo:NaN,bar:[1,undefined,3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Duktape.</span><span style="color:#6F42C1;">dec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jx&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;{ foo: 123, bar: undefined, quux: NaN }&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(dec.foo, dec.bar, dec.quux);</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: 123 undefined NaN</span></span></code></pre></div><h3 id="カスタム-jc-フォーマット§。" tabindex="-1">カスタム JC フォーマット§。 <a class="header-anchor" href="#カスタム-jc-フォーマット§。" aria-label="Permalink to &quot;カスタム JC フォーマット§。&quot;">​</a></h3><p>JCは、すべての値を標準的なJSONにエンコードします。標準的なJSONでサポートされていない値は、アンダースコアで始まるマーカーキーを持つオブジェクトとしてエンコードされます（例： {&quot;_ptr&quot;: &quot;0xdeadbeef&quot;}）。このような値は、通常のオブジェクトとしてパースバックされます。しかし、多かれ少なかれ、手動でそれらを復活させることができます。U+FFFF以上のコードポイントは、&quot;U+nnnnn &quot;のフォーマットでプレーンな文字列データとしてエンコードされます(例: U+0010fedc)。</p><p>JCは以下のように使用します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, bar: [ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> ] };</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(Duktape.</span><span style="color:#B392F0;">enc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jc&#39;</span><span style="color:#E1E4E8;">, obj));</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: {&quot;foo&quot;:{&quot;_nan&quot;:true},&quot;bar&quot;:[1,{&quot;_undef&quot;:true},3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dec </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Duktape.</span><span style="color:#B392F0;">dec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jc&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;{ &quot;foo&quot;: 123, &quot;bar&quot;: {&quot;_undef&quot;:true}, &quot;quux&quot;: {&quot;_nan&quot;:true} }&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(dec.foo, dec.bar, dec.quux);</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: 123 [object Object] [object Object]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bar: [ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> ] };</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(Duktape.</span><span style="color:#6F42C1;">enc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jc&#39;</span><span style="color:#24292E;">, obj));</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: {&quot;foo&quot;:{&quot;_nan&quot;:true},&quot;bar&quot;:[1,{&quot;_undef&quot;:true},3]}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dec </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Duktape.</span><span style="color:#6F42C1;">dec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jc&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;{ &quot;foo&quot;: 123, &quot;bar&quot;: {&quot;_undef&quot;:true}, &quot;quux&quot;: {&quot;_nan&quot;:true} }&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(dec.foo, dec.bar, dec.quux);</span></span>
<span class="line"><span style="color:#6A737D;">// prints out: 123 [object Object] [object Object]</span></span></code></pre></div><p>JCデコーダは、現時点では、基本的に標準のJSONデコーダと同じです。すべてのJC出力は有効なJSONであり、カスタム構文は必要ありません。例で示したように、カスタム値（{&quot;_undef&quot;:true}など）は自動的には復活しません。それらは、代わりに普通のオブジェクトとしてパースバックされます。</p><h3 id="u-ffff以上のコードポイントと無効なutf-8データについて" tabindex="-1">U+FFFF以上のコードポイントと無効なUTF-8データについて <a class="header-anchor" href="#u-ffff以上のコードポイントと無効なutf-8データについて" aria-label="Permalink to &quot;U+FFFF以上のコードポイントと無効なUTF-8データについて&quot;">​</a></h3><p>すべての標準ECMAScript文字列は、内部的には有効なCESU-8データなので、U+FFFF以上のコードポイントに対する動作は、コンプライアンス上の問題を引き起こすことはありません。しかし、Duktapeの文字列は、拡張UTF-8コードポイントを含み、さらに無効なUTF-8データを含む可能性があります。</p><p>標準のECMAScript JSON APIを含むDuktape JSON実装は、無効なUTF-8データを処理するために置換文字を使用します。結果として得られる文字列は少し奇妙に見えるかもしれませんが、この動作はエラーを投げるよりも望ましいものです。</p><h3 id="jsonフォーマット例" tabindex="-1">JSONフォーマット例 <a class="header-anchor" href="#jsonフォーマット例" aria-label="Permalink to &quot;JSONフォーマット例&quot;">​</a></h3><p>以下の表は、各エンコーディングで異なる値がどのようにエンコードされるかをまとめたものです。</p>`,19),r=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Value"),n("th",null,"Standard JSON"),n("th",null,"JX"),n("th",null,"JC"),n("th",null,"Notes")])]),n("tbody",null,[n("tr",null,[n("td",null,"undefined"),n("td",null,"n/a"),n("td",null,"undefined"),n("td",{"_undef:true":""}),n("td",null,"Standard JSON: encoded as null inside arrays, otherwise omitted")]),n("tr",null,[n("td",null,"null"),n("td",null,"null"),n("td",null,"null"),n("td",null,"null"),n("td",null,"standard JSON")]),n("tr",null,[n("td",null,"true"),n("td",null,"true"),n("td",null,"true"),n("td",null,"true"),n("td",null,"standard JSON")]),n("tr",null,[n("td",null,"false"),n("td",null,"false"),n("td",null,"false"),n("td",null,"false"),n("td",null,"standard JSON")]),n("tr",null,[n("td",null,"123.4"),n("td",null,"123.4"),n("td",null,"123.4"),n("td",null,"123.4"),n("td",null,"standard JSON")]),n("tr",null,[n("td",null,"+0"),n("td",null,"0"),n("td",null,"0"),n("td",null,"0"),n("td",null,"standard JSON")]),n("tr",null,[n("td",null,"-0"),n("td",null,"0"),n("td",null,"-0"),n("td",null,"-0"),n("td",null,"Standard JSON allows -0 but serializes negative zero as 0 (losing the sign unnecessarily)")]),n("tr",null,[n("td",null,"NaN"),n("td",null,"null"),n("td",null,"NaN"),n("td",{"_nan:true":""}),n("td",null,"Standard JSON: always encoded as null")]),n("tr",null,[n("td",null,"Infinity"),n("td",null,"null"),n("td",null,"Infinity"),n("td",{"_inf:true":""}),n("td",null,"Standard JSON: always encoded as null")]),n("tr",null,[n("td",null,"-Infinity"),n("td",null,"null"),n("td",null,"-Infinity"),n("td",{"_ninf:true":""}),n("td",null,"Standard JSON: always encoded as null")]),n("tr",null,[n("td",null,'"köhä"'),n("td",null,'"köhä"'),n("td",null,'"k\\xf6h\\xe4"'),n("td",null,'"k\\u00f6h\\u00e4"'),n("td")]),n("tr",null,[n("td",null,"U+00FC"),n("td",null,'"\\u00fc"'),n("td",null,'"\\xfc"'),n("td",null,'"\\u00fc"'),n("td")]),n("tr",null,[n("td",null,"U+ABCD"),n("td",null,'"\\uabcd"'),n("td",null,'"\\uabcd"'),n("td",null,'"\\uabcd"'),n("td")]),n("tr",null,[n("td",null,"U+1234ABCD"),n("td",null,'"U+1234abcd"'),n("td",null,'"\\U1234abcd"'),n("td",null,'"U+1234abcd"'),n("td",null,"Non-BMP characters are not standard ECMAScript, JX format borrowed from Python")]),n("tr",null,[n("td",null,"object"),n("td",{"my_key:123":""}),n("td",{"my_key:123":""}),n("td",{"my_key:123":""}),n("td",null,"ASCII keys matching identifer requirements encoded without quotes in JX")]),n("tr",null,[n("td",null,"array"),n("td",null,'["foo","bar"]'),n("td",null,'["foo","bar"]'),n("td",null,'["foo","bar"]'),n("td")]),n("tr",null,[n("td",null,"buffer"),n("td",null,"n/a"),n("td",null,"|deadbeef|"),n("td",{"_buf:deadbeef":""}),n("td")]),n("tr",null,[n("td",null,"pointer"),n("td",null,"n/a"),n("td",null,"(0xdeadbeef)"),n("td",{"_ptr:0xdeadbeef":""}),n("td")]),n("tr",null,[n("td"),n("td"),n("td",null,"(DEADBEEF)"),n("td",{"_ptr:DEADBEEF":""}),n("td",null,"Representation inside parentheses or quotes is platform specific")]),n("tr",null,[n("td",null,"NULL pointer"),n("td",null,"n/a"),n("td",null,"(null)"),n("td",{"_ptr:null":""}),n("td")]),n("tr",null,[n("td",null,"function"),n("td",null,"n/a"),n("td",{"_func:true":""}),n("td",{"_func:true":""}),n("td",null,"Standard JSON: encoded as null inside arrays, otherwise omitted")]),n("tr",null,[n("td",null,"lightfunc"),n("td",null,"n/a"),n("td",{"_func:true":""}),n("td",{"_func:true":""}),n("td",null,"Formats like ordinary functions")])])],-1),u=n("h3",{id:"制限事項",tabindex:"-1"},[o("制限事項 "),n("a",{class:"header-anchor",href:"#制限事項","aria-label":'Permalink to "制限事項"'},"​")],-1),c=n("p",null,"いくつかの制限事項があります。",-1),d=n("ul",null,[n("li",null,"列挙可能な自身のプロパティのみが、どのフォーマットでもシリアライズされます。"),n("li",null,'配列のプロパティ（エントリ以外）はシリアライズされません。これは、例えばロギングなどで [1,2,3, "type": "point"] のように有用でしょう。'),n("li",null,"配列のギャップは保存されず、未定義としてパースバックされます。"),n("li",null,"JCデータの解析時に、特殊な値を自動的に復活させることはありません。"),n("li",null,"正規のエンコーディングがない。これは、エンコード時にオブジェクトのキーをソートする簡単なオプションで簡単にアレンジできるだろう。")],-1),i=n("p",null,"(今後の課題については、内部ドキュメントを参照してください)。",-1),y=[p,r,u,c,d,i];function E(f,F,h,_,b,q){return s(),a("div",null,y)}const S=l(e,[["render",E]]);export{N as __pageData,S as default};
