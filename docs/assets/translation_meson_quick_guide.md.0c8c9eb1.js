import{_ as s,c as n,o as a,a as e}from"./app.b419af8d.js";const m=JSON.parse('{"title":"Mesonの使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"必要条件","slug":"必要条件","link":"#必要条件","children":[]},{"level":2,"title":"パッケージマネージャによるインストール","slug":"パッケージマネージャによるインストール","link":"#パッケージマネージャによるインストール","children":[]},{"level":2,"title":"Pythonを使ったインストール","slug":"pythonを使ったインストール","link":"#pythonを使ったインストール","children":[]},{"level":2,"title":"ソースからのインストール","slug":"ソースからのインストール","link":"#ソースからのインストール","children":[]},{"level":2,"title":"トラブルシューティング:","slug":"トラブルシューティング","link":"#トラブルシューティング","children":[]},{"level":2,"title":"Mesonプロジェクトのコンパイル","slug":"mesonプロジェクトのコンパイル","link":"#mesonプロジェクトのコンパイル","children":[]},{"level":2,"title":"Mesonをディストロのパッケージャーとして使用する","slug":"mesonをディストロのパッケージャーとして使用する","link":"#mesonをディストロのパッケージャーとして使用する","children":[]}],"relativePath":"translation/meson/quick_guide.md","lastUpdated":1676126774000}'),l={name:"translation/meson/quick_guide.md"},p=e(`<h1 id="mesonの使用" tabindex="-1">Mesonの使用 <a class="header-anchor" href="#mesonの使用" aria-hidden="true">#</a></h1><p>Meson はできるだけ簡単に使用できるように設計されています。このページでは、インストール、トラブルシューティング、標準的な使用に必要な最初のステップを概説します。</p><p>より高度な設定については、コマンドラインヘルプ meson --help、または Mesonbuild ウェブサイトにある Meson ドキュメントを参照してください。</p><p>目次</p><ul><li>必要条件</li><li>パッケージマネージャを使ったインストール</li><li>Pythonを使ったインストール</li><li>ソースからのインストール</li><li>トラブルシューティング</li><li>Mesonプロジェクトのコンパイル</li><li>ディストロのパッケージャーとしてのMesonの使用</li></ul><h2 id="必要条件" tabindex="-1">必要条件 <a class="header-anchor" href="#必要条件" aria-hidden="true">#</a></h2><ul><li>Python 3</li><li>Ninja</li></ul><p>Ninja は、Ninja バックエンドを使用する場合のみ必要です。Meson は、VS と Xcode のネイティブなプロジェクトファイルを生成することもできます。</p><h2 id="パッケージマネージャによるインストール" tabindex="-1">パッケージマネージャによるインストール <a class="header-anchor" href="#パッケージマネージャによるインストール" aria-hidden="true">#</a></h2><p>Ubuntu:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt-get install python3 python3-pip python3-setuptools \\</span></span>
<span class="line"><span style="color:#A6ACCD;">                       python3-wheel ninja-build</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>ディストロのパッケージソフトは、頻繁なリリースサイクルと開発スピードの関係で、すぐに古くなってしまうことがあります。</p><h2 id="pythonを使ったインストール" tabindex="-1">Pythonを使ったインストール <a class="header-anchor" href="#pythonを使ったインストール" aria-hidden="true">#</a></h2><p>必要条件: pip3</p><p>Mesonbuildの最新バージョンを受け取るための最良の方法です。</p><p>ローカルユーザーとしてインストールする（推奨）。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ pip3 install --user meson</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>rootでインストールします。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ pip3 install meson</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>rootでインストールするか、ローカルユーザーでインストールするか迷った場合は、ローカルユーザーでインストールします。</p><h2 id="ソースからのインストール" tabindex="-1">ソースからのインストール <a class="header-anchor" href="#ソースからのインストール" aria-hidden="true">#</a></h2><p>必要条件: git</p><p>Meson はクローンした git リポジトリから直接実行することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ git clone https://github.com/mesonbuild/meson.git /path/to/sourcedir</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="トラブルシューティング" tabindex="-1">トラブルシューティング: <a class="header-anchor" href="#トラブルシューティング" aria-hidden="true">#</a></h2><p>共通の課題</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ meson setup builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ bash: /usr/bin/meson: No such file or directory</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>説明python pipモジュールのインストール用のデフォルトのプレフィックスが、シェル環境のPATHに含まれていない。python pipのインストールモジュールのデフォルトのプレフィクスは、/usr/local以下に配置されています。</p><p><strong>解決方法この問題は、デフォルトのシェル環境の PATH に /usr/local/bin が含まれるように変更することで解決します。</strong></p><blockquote><p>注意：この問題を解決する方法として、シンボリックリンクを使用する、バイナリをデフォルトパスにコピーするなどの方法がありますが、これらの方法はパッケージ管理の相互運用性を損なう可能性があるため、推奨またはサポートされていません。</p></blockquote><h2 id="mesonプロジェクトのコンパイル" tabindex="-1">Mesonプロジェクトのコンパイル <a class="header-anchor" href="#mesonプロジェクトのコンパイル" aria-hidden="true">#</a></h2><p>Meson の最も一般的な使用例は、作業中のコード ベースでコードをコンパイルすることです。取るべき手順は非常にシンプルです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ cd /path/to/source/root</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson setup builddir &amp;&amp; cd builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson compile</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson test</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>唯一の注意点は、ビルドディレクトリを別に作成する必要があることです。Meson はソースツリーの中でソースコードをビルドすることを許しません。ビルドの成果物はすべてビルドディレクトリに格納されます。これにより、異なる設定を持つ複数のビルドツリーを同時に持つことができます。このようにして、生成されたファイルが誤ってリビジョン管理に追加されることがありません。</p><p>コード変更後に再コンパイルするには、meson compile と入力するだけです。ビルドコマンドは常に同じものです。ソースコードとビルドシステムファイルに対して任意の変更を行うことができ、Meson はそれを検出して正しい処理を行います。最適化されたバイナリをビルドしたい場合は、Meson の実行時に --buildtype=debugoptimized という引数を使用するだけです。ビルドディレクトリは、最適化されていないビルド用と、最適化されたビルド用の 2 つを用意することをお勧めします。任意の構成をコンパイルするには、対応するビルド・ディレクトリに移動して、meson compile を実行するだけです。</p><p>Mesonは、デバッグ情報とコンパイラー警告を有効にするためのコンパイラーフラグを自動的に追加します（すなわち、-gと-Wall）。つまり、ユーザーはそれらに対処する必要がなく、代わりにコーディングに集中することができます。</p><h2 id="mesonをディストロのパッケージャーとして使用する" tabindex="-1">Mesonをディストロのパッケージャーとして使用する <a class="header-anchor" href="#mesonをディストロのパッケージャーとして使用する" aria-hidden="true">#</a></h2><p>ディストリビューションパッケージャは通常、使用するビルドフラグを完全に制御したいと考えます。Meson はこの使用方法をネイティブにサポートします。Meson プロジェクトのビルドとインストールに必要なコマンドは次のとおりです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ cd /path/to/source/root</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson --prefix /usr --buildtype=plain builddir -Dc_args=... -Dcpp_args=... -Dc_link_args=... -Dcpp_link_args=...</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson compile -C builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ meson test -C builddir</span></span>
<span class="line"><span style="color:#A6ACCD;">$ DESTDIR=/path/to/staging/root meson install -C builddir</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>コマンドラインスイッチ --buildtype=plain は、Meson に自分自身のフラグをコマンドラインに追加しないよう指示します。これにより、パッケージャは使用するフラグを完全に制御できるようになります。</p><p>これは他のビルドシステムと非常によく似ています。唯一の違いは、 DESTDIR 変数が meson install の引数としてではなく、環境変数として渡されることです。</p><p>ディストロのビルドは常にスクラッチから行われるので、あなたのパッケージでユニティビルドを有効にすることを考えるかもしれません。なぜなら、ユニティの方が速く、より良いコードを生成するからです。しかし、unity builds を有効にしてもビルドされないプロジェクトがたくさんあるので、unity builds を使うかどうかはパッケージャがケースバイケースで判断しなければなりません。</p>`,42),o=[p];function i(t,c,r,d,h,u){return a(),n("div",null,o)}const y=s(l,[["render",i]]);export{m as __pageData,y as default};
