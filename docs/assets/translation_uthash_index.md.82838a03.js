import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.43c433ff.js";const h=JSON.parse('{"title":"uthash","description":"","frontmatter":{},"headers":[],"relativePath":"translation/uthash/index.md","filePath":"translation/uthash/index.md","lastUpdated":1683185018000}'),l={name:"translation/uthash/index.md"},o=p(`<h1 id="uthash" tabindex="-1">uthash <a class="header-anchor" href="#uthash" aria-label="Permalink to &quot;uthash&quot;">​</a></h1><p>C言語の構造体であれば、uthashを使ってハッシュテーブルに格納することができます。構造体にUT_hash_handleを追加し、キーとして機能するように構造体の1つ以上のフィールドを選択するだけです。次に、これらのマクロを使用して、ハッシュテーブルから項目を格納、取得、削除します。</p><p>例1．ハッシュに項目を追加する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;uthash.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> id;</span><span style="color:#6A737D;">            /* このフィールドをキーとして使用します */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    UT_hash_handle hh;</span><span style="color:#6A737D;"> /* この構造体をハッシャブルにする */</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add_user</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">HASH_ADD_INT</span><span style="color:#E1E4E8;">( users, id, s );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;uthash.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span><span style="color:#6A737D;">            /* このフィールドをキーとして使用します */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    UT_hash_handle hh;</span><span style="color:#6A737D;"> /* この構造体をハッシャブルにする */</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add_user</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">HASH_ADD_INT</span><span style="color:#24292E;">( users, id, s );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>例2.ハッシュの中の項目を調べる。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct </span><span style="color:#F97583;">*</span><span style="color:#B392F0;">find_user</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">user_id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">HASH_FIND_INT</span><span style="color:#E1E4E8;">( users, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">user_id, s );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">find_user</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">user_id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">HASH_FIND_INT</span><span style="color:#24292E;">( users, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">user_id, s );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>例3．ハッシュから項目を削除する。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete_user</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> my_struct </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">HASH_DEL</span><span style="color:#E1E4E8;">( users, user);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete_user</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> my_struct </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">HASH_DEL</span><span style="color:#24292E;">( users, user);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>詳細や使用例については、「ユーザーガイド」をご覧ください。</p>`,9),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const _=s(l,[["render",t]]);export{h as __pageData,_ as default};
