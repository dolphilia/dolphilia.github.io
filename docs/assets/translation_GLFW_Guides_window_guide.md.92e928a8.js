import{_ as s,c as a,o as n,a as l}from"./app.b419af8d.js";const C=JSON.parse('{"title":"GLFWウィンドウガイド（日本語訳）","description":"","frontmatter":{},"headers":[{"level":2,"title":"ウィンドウズ・オブジェクト","slug":"ウィンドウズ・オブジェクト","link":"#ウィンドウズ・オブジェクト","children":[{"level":3,"title":"ウィンドウの作成","slug":"ウィンドウの作成","link":"#ウィンドウの作成","children":[]},{"level":3,"title":"ウィンドウの破棄","slug":"ウィンドウの破棄","link":"#ウィンドウの破棄","children":[]},{"level":3,"title":"ウィンドウ作成のヒント","slug":"ウィンドウ作成のヒント","link":"#ウィンドウ作成のヒント","children":[]}]},{"level":2,"title":"ウィンドウのイベント処理","slug":"ウィンドウのイベント処理","link":"#ウィンドウのイベント処理","children":[]},{"level":2,"title":"ウィンドウのプロパティとイベント","slug":"ウィンドウのプロパティとイベント","link":"#ウィンドウのプロパティとイベント","children":[{"level":3,"title":"ユーザーポインタ","slug":"ユーザーポインタ","link":"#ユーザーポインタ","children":[]},{"level":3,"title":"ウィンドウのクローズ方法とクローズフラグ","slug":"ウィンドウのクローズ方法とクローズフラグ","link":"#ウィンドウのクローズ方法とクローズフラグ","children":[]},{"level":3,"title":"ウィンドウのサイズ","slug":"ウィンドウのサイズ","link":"#ウィンドウのサイズ","children":[]},{"level":3,"title":"フレームバッファサイズ","slug":"フレームバッファサイズ","link":"#フレームバッファサイズ","children":[]},{"level":3,"title":"ウィンドウの表示倍率","slug":"ウィンドウの表示倍率","link":"#ウィンドウの表示倍率","children":[]},{"level":3,"title":"ウィンドウサイズ制限","slug":"ウィンドウサイズ制限","link":"#ウィンドウサイズ制限","children":[]},{"level":3,"title":"ウィンドウの位置","slug":"ウィンドウの位置","link":"#ウィンドウの位置","children":[]},{"level":3,"title":"ウィンドウのタイトル","slug":"ウィンドウのタイトル","link":"#ウィンドウのタイトル","children":[]},{"level":3,"title":"ウィンドウのアイコン","slug":"ウィンドウのアイコン","link":"#ウィンドウのアイコン","children":[]},{"level":3,"title":"ウィンドウズ・モニター","slug":"ウィンドウズ・モニター","link":"#ウィンドウズ・モニター","children":[]},{"level":3,"title":"ウィンドウのアイコン化","slug":"ウィンドウのアイコン化","link":"#ウィンドウのアイコン化","children":[]},{"level":3,"title":"ウィンドウの最大化","slug":"ウィンドウの最大化","link":"#ウィンドウの最大化","children":[]},{"level":3,"title":"ウィンドウの視認性","slug":"ウィンドウの視認性","link":"#ウィンドウの視認性","children":[]},{"level":3,"title":"ウィンドウの入力フォーカス","slug":"ウィンドウの入力フォーカス","link":"#ウィンドウの入力フォーカス","children":[]},{"level":3,"title":"ウィンドウズ・アテンション・リクエスト","slug":"ウィンドウズ・アテンション・リクエスト","link":"#ウィンドウズ・アテンション・リクエスト","children":[]},{"level":3,"title":"ウィンドウの損傷とリフレッシュ","slug":"ウィンドウの損傷とリフレッシュ","link":"#ウィンドウの損傷とリフレッシュ","children":[]},{"level":3,"title":"ウィンドウの透明度","slug":"ウィンドウの透明度","link":"#ウィンドウの透明度","children":[]},{"level":3,"title":"ウィンドウの属性","slug":"ウィンドウの属性","link":"#ウィンドウの属性","children":[]}]},{"level":2,"title":"バッファースワッピング","slug":"バッファースワッピング","link":"#バッファースワッピング","children":[]}],"relativePath":"translation/GLFW/Guides/window_guide.md","lastUpdated":1676126774000}'),p={name:"translation/GLFW/Guides/window_guide.md"},o=l(`<h1 id="glfwウィンドウガイド-日本語訳" tabindex="-1">GLFWウィンドウガイド（日本語訳） <a class="header-anchor" href="#glfwウィンドウガイド-日本語訳" aria-hidden="true">#</a></h1><p><a href="https://www.glfw.org/docs/latest/window_guide.html" target="_blank" rel="noreferrer">原文</a></p><p>このガイドでは，GLFWのウィンドウに関する機能を紹介します．このカテゴリの特定の機能の詳細については、ウィンドウのリファレンスを参照してください。また、GLFWの他の領域のガイドもあります。</p><ul><li>Introduction to the API</li><li>Context guide</li><li>Vulkan guide</li><li>Monitor guide</li><li>Input guide</li></ul><h2 id="ウィンドウズ・オブジェクト" tabindex="-1">ウィンドウズ・オブジェクト <a class="header-anchor" href="#ウィンドウズ・オブジェクト" aria-hidden="true">#</a></h2><p>GLFWwindow オブジェクトは、ウィンドウとコンテキストの両方をカプセル化します。これらは glfwCreateWindow で生成され、glfwDestroyWindow または glfwTerminate で破棄されます（残っている場合）。ウィンドウとコンテキストは不可分にリンクされているので、オブジェクトポインタはコンテキストとウィンドウハンドルの両方として使用されます。</p><p>ウィンドウに関連する様々なコールバックに提供されるイベントストリームを見るには、イベント テスト プログラムを実行してください。</p><h3 id="ウィンドウの作成" tabindex="-1">ウィンドウの作成 <a class="header-anchor" href="#ウィンドウの作成" aria-hidden="true">#</a></h3><p>ウィンドウとそのOpenGLまたはOpenGL ESコンテキストはglfwCreateWindowで作成され、作成されたウィンドウオブジェクトへのハンドルが返されます。例えば、これは640×480のウィンドウモードのウィンドウを作成します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウ作成に失敗した場合は NULL を返すので、戻り値の確認が必要である。</p><p>ウィンドウハンドルは、ウィンドウに関連するすべての関数に渡され、すべての入力イベントと一緒に提供されるので、イベントハンドラはどのウィンドウがそのイベントを受け取ったかを知ることができます。</p><h4 id="フルスクリーンウィンドウ" tabindex="-1">フルスクリーンウィンドウ <a class="header-anchor" href="#フルスクリーンウィンドウ" aria-hidden="true">#</a></h4><p>フルスクリーンウィンドウを作成するには、そのウィンドウが使用するモニタを指定する必要があります。ほとんどの場合、ユーザーのプライマリモニタが良い選択です。モニタの取得について詳しくは、「モニタの取得」を参照してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetPrimaryMonitor</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><p>フルスクリーンウィンドウは、モニターの表示領域全体をカバーし、ボーダーや装飾はありません。</p><p>ウィンドウモードのウィンドウは、glfwSetWindowMonitorでモニタを設定することでフルスクリーンにすることができ、同じ関数で設定を解除することでウィンドウにすることができます。</p><p>GLFWvidmode構造体の各フィールドは、関数パラメータまたはウィンドウヒントに対応し、組み合わせてそのウィンドウの希望するビデオモードを形成する。希望するビデオモードに最も近いサポートされているビデオモードが、ウィンドウに入力フォーカスがある限り、選択されたモニターに設定される。ビデオモードの取得に関する詳細については、ビデオモードを参照してください。</p><table><thead><tr><th>Video mode field</th><th>Corresponds to</th></tr></thead><tbody><tr><td>GLFWvidmode.width</td><td>width parameter of glfwCreateWindow</td></tr><tr><td>GLFWvidmode.height</td><td>height parameter of glfwCreateWindow</td></tr><tr><td>GLFWvidmode.redBits</td><td>GLFW_RED_BITS hint</td></tr><tr><td>GLFWvidmode.greenBits</td><td>GLFW_GREEN_BITS hint</td></tr><tr><td>GLFWvidmode.blueBits</td><td>GLFW_BLUE_BITS hint</td></tr><tr><td>GLFWvidmode.refreshRate</td><td>GLFW_REFRESH_RATE hint</td></tr></tbody></table><p>いったんフルスクリーンウィンドウができたら、glfwSetWindowMonitor でその解像度、リフレッシュレート、モニタを変更することができます。もし、解像度だけを変更する必要があれば、glfwSetWindowSize を呼び出すこともできます。すべての場合において、新しいビデオモードは、glfwCreateWindowによって選択されたビデオモードと同じ方法で選択されます。ウィンドウがOpenGLまたはOpenGL ESのコンテキストを持っている場合、それは影響を受けません。</p><p>デフォルトでは、モニタの元のビデオモードが復元され、入力フォーカスを失うとウィンドウがアイコン化され、ユーザがデスクトップに戻ることができるようになります。この動作は GLFW_AUTO_ICONIFY window hint で無効にすることができる。例えば、同時に複数のモニターをフルスクリーンウィンドウで覆いたい場合などである。</p><p>モニターが切断された場合、そのモニター上でフルスクリーンになっているすべてのウィンドウはウィンドウモードに切り替わります。詳しくは、モニター設定の変更を参照してください。</p><h4 id="ウィンドウズ・フル・スクリーン-ウィンドウ" tabindex="-1">&quot;ウィンドウズ・フル・スクリーン &quot;ウィンドウ <a class="header-anchor" href="#ウィンドウズ・フル・スクリーン-ウィンドウ" aria-hidden="true">#</a></h4><p>希望するビデオモードに最も近いものが現在のビデオモードである場合、ビデオモードは変更されないので、ウィンドウの作成が速くなり、アプリケーションの切り替えも非常にスムーズになります。これは、ウィンドウ付きフルスクリーンまたはボーダーレスフルスクリーンウィンドウと呼ばれることもあり、フルスクリーンウィンドウとしてカウントされます。このようなウィンドウを作成するには、現在のビデオモードを要求します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> GLFWvidmode</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetVideoMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">monitor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_RED_BITS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">redBits</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_GREEN_BITS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">greenBits</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_BLUE_BITS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">blueBits</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_REFRESH_RATE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">refreshRate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> monitor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><p>This also works for windowed mode windows that are made full screen.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> GLFWvidmode</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetVideoMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">monitor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">glfwSetWindowMonitor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> monitor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">refreshRate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>glfwGetVideoModeは、モニタの現在のビデオモードを返すので、そのモニタに既にフルスクリーンウィンドウがあり、それをウィンドウズフルスクリーンにしたい場合、デスクトップの解像度を事前に保存しておく必要があることに注意してください。</p><h3 id="ウィンドウの破棄" tabindex="-1">ウィンドウの破棄 <a class="header-anchor" href="#ウィンドウの破棄" aria-hidden="true">#</a></h3><p>ウィンドウが不要になったら、glfwDestroyWindowで破棄してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwDestroyWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウの破棄は常に成功します。実際の破壊の前に、すべてのコールバックは削除され、ウィンドウのために配信されるそれ以降のイベントはありません。glfwTerminate が呼び出されたときに残っているすべてのウィンドウも同様に破棄されます。</p><p>フルスクリーン ウィンドウが破壊されると、そのモニタの元のビデオ モードが復元されますが、ガンマ ランプはそのまま残されます。</p><h3 id="ウィンドウ作成のヒント" tabindex="-1">ウィンドウ作成のヒント <a class="header-anchor" href="#ウィンドウ作成のヒント" aria-hidden="true">#</a></h3><p>ウィンドウやコンテキストを作成する前に設定できるヒントがいくつかあります。いくつかはウィンドウ自体に影響し、その他はフレームバッファやコンテキストに影響します。これらのヒントは、ライブラリが glfwInit で初期化されるたびにデフォルト値に設定されます。整数値のヒントはglfwWindowHintで、文字列値のヒントはglfwWindowHintStringで、それぞれ個別に設定することができます。glfwDefaultWindowHintsを使用すると、すべてを一度にデフォルトに戻すことができます。</p><p>いくつかのヒントはプラットフォーム固有です。これらは、どのプラットフォームでも常に有効ですが、特定のプラットフォームにのみ影響します。他のプラットフォームでは無視されます。これらのヒントを設定するために、プラットフォーム固有のヘッダや呼び出しは必要ありません。</p><blockquote><p>ウィンドウヒントは、指定された属性を持ちたいウィンドウとコンテキストを作成する前に設定する必要があります。これらは glfwCreateWindow への追加引数として機能します。</p></blockquote><h4 id="ハードとソフトの制約" tabindex="-1">ハードとソフトの制約 <a class="header-anchor" href="#ハードとソフトの制約" aria-hidden="true">#</a></h4><p>いくつかのウィンドウヒントはハード制約です。これらは、ウィンドウとコンテキストの作成が成功するために、利用可能な機能に正確に一致する必要があります。ハード制約でないヒントは可能な限り一致させますが、結果のコンテキストとフレームバッファはこれらのヒントが要求したものと異なる場合があります。</p><p>以下のヒントは常にハード制約である。</p><ul><li>GLFW_STEREO</li><li>GLFW_DOUBLEBUFFER</li><li>GLFW_CLIENT_API</li><li>GLFW_CONTEXT_CREATION_API</li></ul><p>以下の追加ヒントは、OpenGLコンテキストの要求時にはハード制約となるが、OpenGL ESコンテキストの要求時には無視される。</p><ul><li>GLFW_OPENGL_FORWARD_COMPAT</li><li>GLFW_OPENGL_PROFILE</li></ul><h4 id="ウィンドウに関するヒント" tabindex="-1">ウィンドウに関するヒント <a class="header-anchor" href="#ウィンドウに関するヒント" aria-hidden="true">#</a></h4><p>GLFW_RESIZABLE ウィンドウモードのウィンドウをユーザがサイズ変更できるかどうかを指定します。ウィンドウは、glfwSetWindowSize 関数を使用してもサイズ変更可能です。指定可能な値は GLFW_TRUE と GLFW_FALSE である。このヒントは、フルスクリーンと非装飾ウィンドウでは無視されます。</p><p>GLFW_VISIBLE は、ウィンドウモードのウィンドウを初期状態で表示するかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。このヒントは、フルスクリーンウィンドウでは無視される。</p><p>GLFW_DECORATED は、ウィンドウモードのウィンドウがボーダーやクローズウィジェットなどのウィンドウ装飾を持つかどうかを指定します。装飾がないウィンドウは、ユーザーがサイズを変更することはできないが、 いくつかのプラットフォームではクローズイベントを発生させることができる。使用可能な値は GLFW_TRUE と GLFW_FALSE である。このヒントは、フルスクリーンウィンドウでは無視される。</p><p>GLFW_FOCUSED ウィンドウモードのウィンドウを作成する際に、入力フォーカスを与えるかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。このヒントは、フルスクリーンおよび初期状態で非表示になっているウィンドウでは無視される。</p><p>GLFW_AUTO_ICONIFY は、入力フォーカスが失われたときに、フルスクリーンウィンドウが自動的にアイコン化され、以前のビデオモードに戻るかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE です。このヒントは、ウィンドウモードのウィンドウでは無視されます。</p><p>GLFW_FLOATING は、ウィンドウモードウィンドウを他の通常ウィンドウの上に浮かせるかどうかを指定します（topmost または always-on-top とも呼ばれます）。これは主にデバッグのためのものであり、フルスクリーンウィンドウを実装するためには使用できない。使用可能な値は GLFW_TRUE と GLFW_FALSE である。このヒントは、フルスクリーンウィンドウでは無視される。</p><p>GLFW_MAXIMIZED は、ウィンドウモードのウィンドウを作成するときに最大化するかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。このヒントは、フルスクリーンウィンドウでは無視される。</p><p>GLFW_CENTER_CURSOR は、新しく作成されたフルスクリーンウィンドウの上でカーソルを中央に配置するかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。このヒントは、ウィンドウモードのウィンドウでは無視されます。</p><p>GLFW_TRANSPARENT_FRAMEBUFFER は、ウィンドウフレームバッファを透明にするかどうかを指定します。有効でシステムがサポートしている場合、ウィンドウフレームバッファのアルファチャンネルは、フレームバッファと背景を結合するために使用されます。これはウィンドウの装飾には影響しない。指定可能な値は GLFW_TRUE および GLFW_FALSE である。</p><p>GLFW_FOCUS_ON_SHOW glfwShowWindowが呼ばれたとき、ウィンドウに入力フォーカスを与えるかどうかを指定します。指定可能な値は GLFW_TRUE および GLFW_FALSE です。</p><p>GLFW_SCALE_TO_MONITOR ウィンドウの内容領域が、それが配置される任意のモニタのモニタ内容尺度に基づいてサイズ変更されるべきかどうかを指定します。これは、ウィンドウが作成されたときの初期配置を含む。指定可能な値は GLFW_TRUE と GLFW_FALSE である。</p><p>このヒントは、Windows や X11 など、画面座標とピクセルが常に 1:1 で対応するプラットフォームでのみ効果を発揮します。macOS のようなプラットフォームでは、フレームバッファの解像度はウィンドウサイズとは無関係に変更されます。</p><h4 id="フレームバッファ関連ヒント" tabindex="-1">フレームバッファ関連ヒント <a class="header-anchor" href="#フレームバッファ関連ヒント" aria-hidden="true">#</a></h4><p>GLFW_RED_BITS, GLFW_GREEN_BITS, GLFW_BLUE_BITS, GLFW_ALPHA_BITS, GLFW_DEPTH_BITS and GLFW_STENCIL_BITS デフォルトフレームバッファの様々な構成要素の希望するビット深度を指定する。GLFW_DONT_CARE の値は、アプリケーションに優先権がないことを意味する。</p><p>GLFW_ACCUM_RED_BITS, GLFW_ACCUM_GREEN_BITS, GLFW_ACCUM_BLUE_BITS and GLFW_ACCUM_ALPHA_BITS 蓄積バッファの様々な構成要素の希望するビット深度を指定する。GLFW_DONT_CAREの値は、アプリケーションに優先権がないことを意味する。</p><p>アキュムレーションバッファはOpenGLのレガシー機能であり、新しいコードで使用するべきではありません。</p><p>GLFW_AUX_BUFFERS は、希望する補助バッファの数を指定する。GLFW_DONT_CAREの値は、アプリケーションに優先権がないことを意味する。</p><p>補助バッファはOpenGLのレガシー機能であり、新しいコードで使用するべきではありません。</p><p>GLFW_STEREO は、OpenGLステレオスコピックレンダリングを使用するかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。これはハード制約である。</p><p>GLFW_SAMPLES は、マルチサンプリングに使用するサンプル数を指定します。0はマルチサンプリングを無効とする。GLFW_DONT_CAREの値は、アプリケーションに優先権がないことを意味する。</p><p>GLFW_SRGB_CAPABLE は、フレームバッファを sRGB 対応にするかどうかを指定します。指定可能な値は GLFW_TRUE および GLFW_FALSE である。</p><blockquote><p>OpenGL: GL_FRAMEBUFFER_SRGB enableは、システムでサポートされている場合、sRGBレンダリングを制御する。デフォルトでは、sRGBレンダリングは無効である。 OpenGL ES: システムでサポートされている場合、コンテキストは常にsRGBレンダリングが有効になっています。</p></blockquote><p>GLFW_DOUBLEBUFFER は、フレームバッファをダブルバッファにするかどうかを指定します。ほぼ常にダブルバッファリングを使用したい。これはハード的な制約である。指定可能な値は GLFW_TRUE および GLFW_FALSE である。</p><h4 id="モニター関連ヒント" tabindex="-1">モニター関連ヒント <a class="header-anchor" href="#モニター関連ヒント" aria-hidden="true">#</a></h4><p>GLFW_REFRESH_RATE フルスクリーンウィンドウに必要なリフレッシュレートを指定する。GLFW_DONT_CAREの値は、利用可能な最も高いリフレッシュレートが使用されることを意味する。このヒントは、ウィンドウモードのウィンドウでは無視される。</p><h4 id="コンテキストに関するヒント" tabindex="-1">コンテキストに関するヒント <a class="header-anchor" href="#コンテキストに関するヒント" aria-hidden="true">#</a></h4><p>GLFW_CLIENT_API は、どのクライアント API に対してコンテキストを作成するかを指定します。指定できる値は GLFW_OPENGL_API、GLFW_OPENGL_ES_API および GLFW_NO_API です。これはハード制約である。</p><p>GLFW_CONTEXT_CREATION_API は、コンテキストの作成に使用する API を指定します。指定可能な値は GLFW_NATIVE_CONTEXT_API, GLFW_EGL_CONTEXT_API, GLFW_OSMESA_CONTEXT_API です。これはハードな制約です。クライアントAPIが要求されない場合、このヒントは無視される。</p><p>現在のコンテキストを作成するために使用された API を知っていると仮定している拡張ローダライブラリは、 このヒントを変更すると失敗する可能性があります。これは、glfwGetProcAddress を使って関数をロードさせることで解決できます。</p><blockquote><p>Wayland: EGL APIはネイティブのコンテキスト作成APIであるため、このヒントは何の効果もない。 X11: 一部のLinuxシステムでは、1つのプロセスでネイティブAPIとEGL APIの両方を使用してコンテキストを作成すると、アプリケーションのセグメンテーションが発生します。Linuxでは、今のところ、どちらかのAPIを使うようにしてください。 OSMesa: その名前が示すように、OSMesaで作成されたOpenGLコンテキストは、そのバッファがスワップされたときにウィンドウの内容を更新しません。フレームバッファの内容を取得するには、OpenGL関数またはOSMesaのネイティブアクセス関数glfwGetOSMesaColorBufferとglfwGetOSMesaDepthBufferを使用します。</p></blockquote><p>GLFW_CONTEXT_VERSION_MAJOR and GLFW_CONTEXT_VERSION_MINOR は、作成されるコンテキストが互換性を持たなければならないクライアントAPIのバージョンを指定します。これらのヒントの正確な動作は、要求されたクライアント API に依存します。</p><p>サポートされている最高バージョンのコンテキストをドライバに要求する方法はありませんが、GLFWは、これらのヒントのデフォルトであるバージョン1.0のコンテキストを要求したときに、これを提供しようと試みます。</p><p>これらのヒントを GLFW_VERSION_MAJOR および GLFW_VERSION_MINOR と混同しないでください。</p><blockquote><p>OpenGL: これらのヒントはハード的な制約ではありませんが、作成されたコンテキストのOpenGLバージョンが要求されたものよりも小さい場合、作成は失敗します。したがって、レガシーコードにはバージョン 1.0 のデフォルトを使用してもまったく問題ありませんし、バージョン 3.0 以上の下位互換性のあるコンテキストが利用可能な場合は、それを使用することもできます。 OpenGL ES: これらのヒントはハード的な制約ではありませんが、作成されたコンテキストのOpenGL ESバージョンが要求されたものよりも低い場合、作成は失敗します。さらに、2.0以降が要求された場合、OpenGL ES 1.xを返すことはできませんし、その逆もまた然りです。これは、OpenGL ES 3.xは2.0と後方互換性がありますが、OpenGL ES 2.0は1.xと後方互換性がないためです。 macOS: OS は、OpenGL バージョン 3.2 以降の前方互換性のあるコアプロファイルコンテキストのみをサポートします。バージョン 3.2 以降の OpenGL コンテキストを作成する前に、GLFW_OPENGL_FORWARD_COMPAT と GLFW_OPENGL_PROFILE ヒントをそれに応じて設定する必要があります。OpenGL 3.0 と 3.1 のコンテキストは、macOS では全くサポートされていません。</p></blockquote><p>GLFW_OPENGL_FORWARD_COMPAT は、OpenGL コンテキストが前方互換性を持つかどうかを指定します。これは、要求されたOpenGLのバージョンが3.0以上の場合にのみ使用する必要があります。OpenGL ESが要求された場合、このヒントは無視されます。</p><p>前方互換性については、OpenGLリファレンスマニュアルで詳しく説明されています。</p><p>GLFW_OPENGL_DEBUG_CONTEXT は、コンテキストをデバッグモードで作成するかどうかを指定します。 これにより、エラーや診断の報告機能が追加されることがあります。使用可能な値は GLFW_TRUE および GLFW_FALSE です。</p><p>OpenGLおよびOpenGL ESのデバッグコンテキストは、GL_KHR_debug拡張によって詳細に記述されています。</p><p>GLFW_OPENGL_PROFILE どのOpenGLプロファイルのコンテキストを作成するかを指定します。可能な値は GLFW_OPENGL_CORE_PROFILE または GLFW_OPENGL_COMPAT_PROFILE のいずれか、あるいは特定のプロファイルを要求しない場合は GLFW_OPENGL_ANY_PROFILE となる。3.2以下のOpenGLバージョンを要求する場合、GLFW_OPENGL_ANY_PROFILEを使用しなければならない。OpenGL ESが要求された場合、このヒントは無視される。</p><p>OpenGLプロファイルについては、OpenGLリファレンスマニュアルで詳しく説明されています。</p><p>GLFW_CONTEXT_ROBUSTNESS は、コンテキストが使用する堅牢性戦略を指定する。GLFW_NO_RESET_NOTIFICATION あるいは GLFW_LOSE_CONTEXT_ON_RESET のいずれか、 あるいは GLFW_NO_ROBUSTNESS で堅牢性の戦略を要求しないものとすることが可能である。</p><p>GLFW_CONTEXT_RELEASE_BEHAVIOR は、コンテキストが使用するリリース動作を指定します。指定できる値は GLFW_ANY_RELEASE_BEHAVIOR、 GLFW_RELEASE_BEHAVIOR_FLUSH あるいは GLFW_RELEASE_BEHAVIOR_NONE のいずれかである。動作が GLFW_ANY_RELEASE_BEHAVIOR の場合、コンテキスト作成 API のデフォルトの動作が使用される。GLFW_RELEASE_BEHAVIOR_FLUSH を指定すると、現在のコンテキストから解放されるたびにパイプラインがフラッシュされます。GLFW_RELEASE_BEHAVIOR_NONE を指定すると、パイプラインは解放時にフラッシュされません。</p><p>コンテキスト解放の動作は，GL_KHR_context_flush_control 拡張で詳細に記述されています．</p><p>GLFW_CONTEXT_NO_ERROR は、コンテキストによってエラーを発生させるかどうかを指定する。指定可能な値は GLFW_TRUE および GLFW_FALSE である。有効にすると、エラーが発生するような状況では、代わりに未定義の動作が発生する。</p><p>OpenGLおよびOpenGL ESのエラー無しモードは、GL_KHR_no_error拡張で詳細に記述されています。</p><h4 id="macos固有のウィンドウのヒント" tabindex="-1">macOS固有のウィンドウのヒント <a class="header-anchor" href="#macos固有のウィンドウのヒント" aria-hidden="true">#</a></h4><p>GLFW_COCOA_RETINA_FRAMEBUFFER は、Retinaディスプレイ上でフル解像度フレームバッファを使用するかどうかを指定します。使用可能な値は GLFW_TRUE および GLFW_FALSE です。これは他のプラットフォームでは無視される。</p><p>GLFW_COCOA_FRAME_NAME は、ウィンドウフレームの自動保存に使用するUTF-8エンコード名を指定し、空の場合はウィンドウのフレームの自動保存を無効にします。これは、他のプラットフォームでは無視されます。これは、glfwWindowHintStringで設定されます。</p><p>GLFW_COCOA_GRAPHICS_SWITCHING は、Automatic Graphics Switching、つまり、システムが OpenGL コンテキスト用に統合 GPU を選択し、必要に応じて GPU 間を移動することを許可するか、または、常にディスクリート GPU で実行することを強制するかを指定します。これは、統合GPUとディスクリートGPUの両方を持つシステムのみに影響します。使用可能な値は GLFW_TRUE および GLFW_FALSE です。他のプラットフォームでは、これは無視されます。</p><p>シンプルなプログラムやツールでは、この機能を有効にして電力を節約することができますが、ゲームや高度なレンダリングを行うその他のアプリケーションでは、無効にしておくとよいでしょう。</p><p>自動グラフィックス切り替えに参加したいバンドルアプリケーションは、そのInfo.plistでNSSupportsAutomaticGraphicsSwitchingキーをtrueに設定して、これを宣言する必要もあります。</p><h4 id="x11-スペシャルウィンドウヒント" tabindex="-1">X11 スペシャルウィンドウヒント <a class="header-anchor" href="#x11-スペシャルウィンドウヒント" aria-hidden="true">#</a></h4><p>GLFW_X11_CLASS_NAME and GLFW_X11_INSTANCE_NAME は、ICCCM WM_CLASSウィンドウプロパティのクラス部とインスタンス部をASCIIエンコードしたものを指定する。これらは、glfwWindowHintStringで設定される。</p><h4 id="supported-and-default-values" tabindex="-1">Supported and default values <a class="header-anchor" href="#supported-and-default-values" aria-hidden="true">#</a></h4><p>Window hint Default value Supported values GLFW_RESIZABLE GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_VISIBLE GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_DECORATED GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_FOCUSED GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_AUTO_ICONIFY GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_FLOATING GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_MAXIMIZED GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_CENTER_CURSOR GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_TRANSPARENT_FRAMEBUFFER GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_FOCUS_ON_SHOW GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_SCALE_TO_MONITOR GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_RED_BITS 8 0 to INT_MAX or GLFW_DONT_CARE GLFW_GREEN_BITS 8 0 to INT_MAX or GLFW_DONT_CARE GLFW_BLUE_BITS 8 0 to INT_MAX or GLFW_DONT_CARE GLFW_ALPHA_BITS 8 0 to INT_MAX or GLFW_DONT_CARE GLFW_DEPTH_BITS 24 0 to INT_MAX or GLFW_DONT_CARE GLFW_STENCIL_BITS 8 0 to INT_MAX or GLFW_DONT_CARE GLFW_ACCUM_RED_BITS 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_ACCUM_GREEN_BITS 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_ACCUM_BLUE_BITS 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_ACCUM_ALPHA_BITS 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_AUX_BUFFERS 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_SAMPLES 0 0 to INT_MAX or GLFW_DONT_CARE GLFW_REFRESH_RATE GLFW_DONT_CARE 0 to INT_MAX or GLFW_DONT_CARE GLFW_STEREO GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_SRGB_CAPABLE GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_DOUBLEBUFFER GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_CLIENT_API GLFW_OPENGL_API GLFW_OPENGL_API, GLFW_OPENGL_ES_API or GLFW_NO_API GLFW_CONTEXT_CREATION_API GLFW_NATIVE_CONTEXT_API GLFW_NATIVE_CONTEXT_API, GLFW_EGL_CONTEXT_API or GLFW_OSMESA_CONTEXT_API GLFW_CONTEXT_VERSION_MAJOR 1 Any valid major version number of the chosen client API GLFW_CONTEXT_VERSION_MINOR 0 Any valid minor version number of the chosen client API GLFW_CONTEXT_ROBUSTNESS GLFW_NO_ROBUSTNESS GLFW_NO_ROBUSTNESS, GLFW_NO_RESET_NOTIFICATION or GLFW_LOSE_CONTEXT_ON_RESET GLFW_CONTEXT_RELEASE_BEHAVIOR GLFW_ANY_RELEASE_BEHAVIOR GLFW_ANY_RELEASE_BEHAVIOR, GLFW_RELEASE_BEHAVIOR_FLUSH or GLFW_RELEASE_BEHAVIOR_NONE GLFW_OPENGL_FORWARD_COMPAT GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_OPENGL_DEBUG_CONTEXT GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_OPENGL_PROFILE GLFW_OPENGL_ANY_PROFILE GLFW_OPENGL_ANY_PROFILE, GLFW_OPENGL_COMPAT_PROFILE or GLFW_OPENGL_CORE_PROFILE GLFW_COCOA_RETINA_FRAMEBUFFER GLFW_TRUE GLFW_TRUE or GLFW_FALSE GLFW_COCOA_FRAME_NAME &quot;&quot; A UTF-8 encoded frame autosave name GLFW_COCOA_GRAPHICS_SWITCHING GLFW_FALSE GLFW_TRUE or GLFW_FALSE GLFW_X11_CLASS_NAME &quot;&quot; An ASCII encoded WM_CLASS class name GLFW_X11_INSTANCE_NAME &quot;&quot; An ASCII encoded WM_CLASS instance name</p><h2 id="ウィンドウのイベント処理" tabindex="-1">ウィンドウのイベント処理 <a class="header-anchor" href="#ウィンドウのイベント処理" aria-hidden="true">#</a></h2><p>イベント処理を参照してください。</p><h2 id="ウィンドウのプロパティとイベント" tabindex="-1">ウィンドウのプロパティとイベント <a class="header-anchor" href="#ウィンドウのプロパティとイベント" aria-hidden="true">#</a></h2><h3 id="ユーザーポインタ" tabindex="-1">ユーザーポインタ <a class="header-anchor" href="#ユーザーポインタ" aria-hidden="true">#</a></h3><p>各ウィンドウは、glfwSetWindowUserPointer で設定し、glfwGetWindowUserPointer で問い合わせることができるユーザポインタをもっています。これは必要な目的に使用することができ，ウィンドウの寿命が尽きるまで GLFWによって変更されることはありません．</p><p>ポインタの初期値はNULLです．</p><h3 id="ウィンドウのクローズ方法とクローズフラグ" tabindex="-1">ウィンドウのクローズ方法とクローズフラグ <a class="header-anchor" href="#ウィンドウのクローズ方法とクローズフラグ" aria-hidden="true">#</a></h3><p>ユーザがウィンドウを閉じようとしたとき、例えば、閉じるウィジェットをクリックするか、Alt+F4のようなキーコードを使用すると、ウィンドウの閉じるフラグが設定されます。しかし、ウィンドウは実際には破棄されず、この状態の変化を監視しない限り、それ以上何も起こりません。</p><p>クローズフラグの現在の状態はglfwWindowShouldCloseによって返され、glfwSetWindowShouldCloseで直接設定または解除できます。よくあるパターンは、メインループの条件としてクローズフラグを使用することです。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">glfwWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwSwapBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwPollEvents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ユーザーがウィンドウを閉じようとしたときに通知を受けたい場合は、closeコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowCloseCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_close_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、クローズフラグが設定された後に直接呼び出されます。例えば、close リクエストをフィルタリングし、特定の条件が満たされない限り close フラグを再びクリアするために使用することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_close_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">time_to_close</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwSetWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GLFW_FALSE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウのサイズ" tabindex="-1">ウィンドウのサイズ <a class="header-anchor" href="#ウィンドウのサイズ" aria-hidden="true">#</a></h3><p>ウィンドウのサイズは glfwSetWindowSize で変更することができます。ウィンドウモードのウィンドウの場合、これはウィンドウのコンテンツ領域またはコンテンツ領域のサイズをスクリーン座標で設定します。ウィンドウシステムは、ウィンドウサイズに制限を課すことがあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>フルスクリーンウィンドウの場合、指定されたサイズはウィンドウの希望するビデオモードの新しい解像度となる。新しい希望するビデオモードに最も近いビデオモードが直ちに設定される。ウィンドウは、設定されたビデオモードの解像度に合うようにサイズが変更される。</p><p>ユーザー、システム、または独自のコードによってウィンドウのサイズが変更されたときに通知を受けたい場合は、サイズ コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowSizeCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_size_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウのサイズ変更時に、ウィンドウのコンテンツ領域の新しいサイズをスクリーン座標で受け取る。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_size_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、ウィンドウの現在のサイズを直接取得するためのglfwGetWindowSizeもあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetWindowSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><blockquote><p>glViewportや他のピクセルベースのOpenGL呼び出しにウィンドウサイズを渡さないでください。ウィンドウサイズはスクリーン座標であり、ピクセルではありません。ピクセルベースの呼び出しには、ピクセル単位であるフレームバッファサイズを使用します。</p></blockquote><p>上記の関数はコンテントエリアのサイズで動作しますが、装飾されたウィンドウは通常この矩形の周りにタイトルバーとウィンドウフレームを持ちます。これらの領域は glfwGetWindowFrameSize で取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> top</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bottom</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetWindowFrameSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">top</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">bottom</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>返される値は、スクリーン座標で、コンテンツ領域の端からフルウィンドウの対応する端までの距離である。座標ではなく距離であるため、常に0または正の値である。</p><h3 id="フレームバッファサイズ" tabindex="-1">フレームバッファサイズ <a class="header-anchor" href="#フレームバッファサイズ" aria-hidden="true">#</a></h3><p>ウィンドウの大きさはスクリーン座標で測定されますが、OpenGLはピクセルで動作します。例えば、glViewportに渡すサイズはピクセルであるべきです。あるマシンではスクリーン座標とピクセルが同じですが、他のマシンでは同じではありません。ウィンドウのフレームバッファのサイズをピクセル単位で取得するための関数がもう1つあります。</p><p>もし、ウィンドウのフレームバッファのサイズがユーザーやシステムによって変更されたときに通知を受けたい場合は、サイズコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetFramebufferSizeCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> framebuffer_size_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、フレームバッファのサイズ変更時に新しいサイズを受け取り、例えばOpenGLのビューポートを更新するために使用することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">framebuffer_size_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glViewport</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、ウィンドウのフレームバッファの現在のサイズを直接取得するためのglfwGetFramebufferSizeもあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetFramebufferSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glViewport</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>フレームバッファのサイズは、ウィンドウのサイズとは無関係に変化することがあります。例えば、ウィンドウを通常のモニタと高DPIのモニタの間でドラッグした場合などです。</p><h3 id="ウィンドウの表示倍率" tabindex="-1">ウィンドウの表示倍率 <a class="header-anchor" href="#ウィンドウの表示倍率" aria-hidden="true">#</a></h3><p>ウィンドウのコンテンツスケールはglfwGetWindowContentScaleで取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> xscale</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> yscale</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetWindowContentScale</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">xscale</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">yscale</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コンテンツスケールは、現在のDPIとプラットフォームのデフォルトDPIとの比率です。これは、テキストやUI要素で特に重要です。この比率でスケーリングされたUIのピクセル寸法があなたのマシンで適切に見えるなら、他のマシンではDPIやスケーリング設定に関係なく、妥当な大きさで表示されるはずです。これは、システムのDPIとスケーリング設定がある程度正しいことが前提になります。</p><p>各モニターが独自のコンテンツスケールを持つことができるシステムでは、ウィンドウのコンテンツスケールは、システムがウィンドウをどのモニター上にあると見なすかに依存します。</p><p>システム設定の変更または異なるスケールのモニタに移動したために、ウィンドウのコンテンツスケールが変更されたときに通知を受けたい場合、コンテンツスケールコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowContentScaleCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_content_scale_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウの新しいコンテンツスケールを受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_content_scale_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">xscale</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">yscale</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">set_interface_scale</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">xscale</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> yscale</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ピクセルとスクリーン座標が常に1:1に対応するプラットフォームでは、ウィンドウは異なるコンテンツスケールのモニターに移動したときに同じサイズに見えるようにリサイズされる必要がある。ウィンドウの作成時とコンテンツスケールの変更時の両方で自動的にこれを行うには、GLFW_SCALE_TO_MONITOR ウィンドウヒントを設定する。</p><h3 id="ウィンドウサイズ制限" tabindex="-1">ウィンドウサイズ制限 <a class="header-anchor" href="#ウィンドウサイズ制限" aria-hidden="true">#</a></h3><p>ウィンドウモードのウィンドウの最小および最大サイズは、glfwSetWindowSizeLimitsによって強制することができます。アスペクト比が設定されていない限り、ユーザは指定された制限内の任意のサイズとアスペクト比にウィンドウをリサイズすることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowSizeLimits</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>最小サイズのみ、あるいは最大サイズのみを指定する場合は、もう一方のペアをGLFW_DONT_CAREに設定する。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowSizeLimits</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_DONT_CARE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_DONT_CARE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウのサイズ制限を無効にするには、すべてをGLFW_DONT_CAREに設定します。</p><p>ウィンドウモード・ウィンドウのコンテンツ領域のアスペクト比は、 glfwSetWindowAspectRatioで強制することができる。サイズ制限が設定されていない限り、ユーザーはウィンドウのサイズを自由に変更することができますが、サイズはアスペクト比を維持するために制限されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowAspectRatio</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>アスペクト比は、幅と高さにそれぞれ対応する分子と分母で指定します。ウィンドウのアスペクト比を維持したい場合は、現在のサイズを比率として使用します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetWindowSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glfwSetWindowAspectRatio</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウのアスペクト比制限を無効にするには、両方の条件をGLFW_DONT_CAREに設定する。</p><p>ウィンドウのサイズ制限とアスペクト比の両方を設定することができるが、それらが衝突した場合、結果は不定である。</p><h3 id="ウィンドウの位置" tabindex="-1">ウィンドウの位置 <a class="header-anchor" href="#ウィンドウの位置" aria-hidden="true">#</a></h3><p>ウィンドウモードのウィンドウの位置は、glfwSetWindowPosで変更することができます。これは、ウィンドウの内容領域の左上隅が、指定されたスクリーン座標になるようにウィンドウを移動します。ウィンドウシステムは、ウィンドウの配置に制限を加えるかもしれません。</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowPos</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ユーザー、システム、または独自のコードによってウィンドウが移動されたときに通知を受けたい場合は、位置コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowPosCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_pos_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウを移動したときのコンテンツ領域の左上隅の新しい位置をスクリーン座標で受け取る。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_pos_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ypos</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、ウィンドウのコンテンツ領域の現在位置を直接取得するためのglfwGetWindowPosもあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ypos</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetWindowPos</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">ypos</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウのタイトル" tabindex="-1">ウィンドウのタイトル <a class="header-anchor" href="#ウィンドウのタイトル" aria-hidden="true">#</a></h3><p>すべてのGLFWウィンドウはタイトルを持ちますが、装飾されていないウィンドウやフルスクリーンウィンドウはタイトルを表示しないか、タスクバーや同様のインターフェイスにのみ表示することができます。glfwSetWindowTitleでUTF-8エンコードされたウィンドウのタイトルを設定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Window</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>指定された文字列は、関数が戻る前にコピーされるので、それを保持する必要はない。</p><p>ソースファイルがUTF-8でエンコードされている限り、ソース内で任意のUnicode文字を直接使用することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ラストエグザイル</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>C++11、C11をお使いの場合は、UTF-8文字列リテラルを使用することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> u8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is always a UTF-8 string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウのアイコン" tabindex="-1">ウィンドウのアイコン <a class="header-anchor" href="#ウィンドウのアイコン" aria-hidden="true">#</a></h3><p>一部のプラットフォームでは、装飾されたウィンドウにはアイコンが表示されます。glfwSetWindowIconで候補画像のリストを指定することで、このアイコンを設定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWimage images</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">images</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load_icon</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_icon.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">images</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load_icon</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_icon_small.png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">glfwSetWindowIcon</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> images</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>画像データは32ビット，リトルエンディアン，非前乗算のRGBA，すなわち各チャンネル8ビットで，赤チャンネルが先にある。画素は左上から順番に正規の列として配置される。</p><p>デフォルトのウィンドウアイコンに戻すには、空の画像配列を渡します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowIcon</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウズ・モニター" tabindex="-1">ウィンドウズ・モニター <a class="header-anchor" href="#ウィンドウズ・モニター" aria-hidden="true">#</a></h3><p>フルスクリーンウィンドウは、特定のモニタに関連付けられます。glfwGetWindowMonitorでこのモニタのハンドルを取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWmonitor</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> monitor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowMonitor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>このモニターハンドルは、glfwGetMonitors によって返されるもののうちの 1 つです。</p><p>ウィンドウモードのウィンドウの場合、この関数はNULLを返します。これは、フルスクリーンウィンドウとウィンドウドモードウィンドウを区別する方法です。</p><p>glfwSetWindowMonitorを使用すると、モニタ間やフルスクリーンとウィンドウモードの間でウィンドウを移動することができます。同じモニタまたは別のモニタでウィンドウをフルスクリーンにする場合、希望するモニタ、解像度、リフレッシュレートを指定します。位置の引数は無視されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> GLFWvidmode</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetVideoMode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">monitor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">glfwSetWindowMonitor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> monitor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mode</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;font-style:italic;">refreshRate</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウ化する場合は、任意の位置と大きさを指定する。引数のリフレッシュレートは無視される。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowMonitor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> xpos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ypos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これにより、装飾、フローティング、サイズ変更、サイズやアスペクト比の制限など、以前のウィンドウの設定が復元されます。元々ウィンドウであったものを元のサイズと位置に戻すには、フルスクリーンにする前にこれらを保存し、上記のように渡します。</p><h3 id="ウィンドウのアイコン化" tabindex="-1">ウィンドウのアイコン化 <a class="header-anchor" href="#ウィンドウのアイコン化" aria-hidden="true">#</a></h3><p>glfwIconifyWindowでウィンドウをアイコン化(最小化)することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwIconifyWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>フルスクリーンウィンドウがアイコン化されると、ユーザーまたはアプリケーションがウィンドウを復元するまで、そのモニタの元のビデオモードが復元されます。</p><p>アイコン化されたウィンドウは、glfwRestoreWindowで復元することができます。この関数は、ウィンドウを最大化した状態から復元することもできます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwRestoreWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>フルスクリーンウィンドウが復元されると、そのモニターにも希望のビデオモードが復元されます。</p><p>ユーザー、システム、または独自のコードによってウィンドウがアイコン化または復元されたときに通知を受けたい場合は、iconifyコールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowIconifyCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_iconify_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウのアイコン化状態の変化を受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_iconify_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">iconified</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">iconified</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window was iconified</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window was restored</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、glfwGetWindowAttribで現在のアイコン化状態を取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> iconified </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_ICONIFIED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウの最大化" tabindex="-1">ウィンドウの最大化 <a class="header-anchor" href="#ウィンドウの最大化" aria-hidden="true">#</a></h3><p>glfwMaximizeWindowにより、ウィンドウを最大化（ズーム）することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwMaximizeWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>フルスクリーンウィンドウは最大化できないので、この関数にフルスクリーンウィンドウを渡しても何も起こりません。</p><p>最大化されたウィンドウは、glfwRestoreWindowで復元することができます。この関数はアイコン化されたウィンドウも復元します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwRestoreWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ユーザー、システム、または独自のコードによってウィンドウが最大化または復元されたときに通知を受けたい場合は、最大化コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowMaximizeCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_maximize_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウの最大化状態の変化を受け取ります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_maximize_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">maximized</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">maximized</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window was maximized</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window was restored</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、glfwGetWindowAttribで現在の最大化状態を取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> maximized </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_MAXIMIZED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>デフォルトでは、新しく作成されたウィンドウは最大化されない。ウィンドウを作成する前にウィンドウヒント GLFW_MAXIMIZED を設定することにより、この動作を変更することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_MAXIMIZED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウの視認性" tabindex="-1">ウィンドウの視認性 <a class="header-anchor" href="#ウィンドウの視認性" aria-hidden="true">#</a></h3><p>ウィンドウモードのウィンドウはglfwHideWindowで隠すことができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwHideWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>これにより、ウィンドウはタスクバー、ドック、ウィンドウリストから削除されるなど、ユーザーから完全に見えなくなります。フルスクリーンウィンドウは隠すことができず、フルスクリーンウィンドウでglfwHideWindowを呼び出しても何も起こりません。</p><p>隠されたウィンドウは、glfwShowWindowで表示することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwShowWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>デフォルトでは、この関数は入力フォーカスもそのウィンドウに設定する。GLFW_FOCUS_ON_SHOW ウィンドウヒントを設定して、新しく作成されたすべてのウィンドウのこの動作を変更するか、 glfwSetWindowAttrib を使用して既存のウィンドウの動作を変更します。</p><p>また、glfwGetWindowAttribで現在の可視性状態を取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> visible </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_VISIBLE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>デフォルトでは、新しく作成されたウィンドウは表示される。ウィンドウを作成する前にウィンドウヒント GLFW_VISIBLE を設定することにより、この動作を変更することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_VISIBLE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FALSE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>非表示に作成されたウィンドウは、表示されるまでユーザーからは完全に見えません。これは、ウィンドウを表示する前に、例えば特定の場所に移動するなど、ウィンドウをさらに設定する必要がある場合に便利です。</p><h3 id="ウィンドウの入力フォーカス" tabindex="-1">ウィンドウの入力フォーカス <a class="header-anchor" href="#ウィンドウの入力フォーカス" aria-hidden="true">#</a></h3><p>glfwFocusWindowにより、ウィンドウに入力フォーカスを与え、前面に表示させることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwFocusWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウが強制的に一番上に表示されると、ユーザーにとって非常に邪魔になることを心に留めておいてください。ユーザーの注意を喚起するための、より邪魔にならない方法については、注意喚起要求を参照してください。</p><p>ユーザー、システム、または独自のコードによってウィンドウが入力フォーカスを獲得または喪失したときに通知を受けたい場合は、フォーカス コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowFocusCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_focus_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウの入力フォーカスの状態の変化を受け取る。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_focus_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">focused</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">focused</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window gained input focus</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The window lost input focus</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>また、glfwGetWindowAttribで現在の入力フォーカスの状態を取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> focused </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FOCUSED</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>デフォルトでは、新しく作成されたウィンドウには入力フォーカスが与えられる。ウィンドウを作成する前にウィンドウヒント GLFW_FOCUSED を設定することにより、この動作を変更することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_FOCUSED</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FALSE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウズ・アテンション・リクエスト" tabindex="-1">ウィンドウズ・アテンション・リクエスト <a class="header-anchor" href="#ウィンドウズ・アテンション・リクエスト" aria-hidden="true">#</a></h3><p>割り込みをかけずにイベントを通知したい場合、glfwRequestWindowAttentionでアテンションを要求することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwRequestWindowAttention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>システムは指定されたウィンドウを、またはこれがサポートされていないプラットフォームでは、アプリケーション全体を強調表示します。ユーザーが注目すると、システムは自動的にリクエストを終了します。</p><h3 id="ウィンドウの損傷とリフレッシュ" tabindex="-1">ウィンドウの損傷とリフレッシュ <a class="header-anchor" href="#ウィンドウの損傷とリフレッシュ" aria-hidden="true">#</a></h3><p>ウィンドウの内容が破損し、リフレッシュする必要がある場合に通知を受けたい場合は、ウィンドウのリフレッシュ コールバックを設定します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowRefreshCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m_handle</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window_refresh_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数は、ウィンドウの内容を更新する必要があるときに呼び出されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window_refresh_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">draw_editor_ui</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwSwapBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Aero、Compiz、Aquaなどの合成ウィンドウシステムで、ウィンドウの内容が画面外に保存される場合、このコールバックは、ウィンドウまたはフレームバッファのサイズが変更されたときにのみ呼び出される可能性があります。</p></blockquote><h3 id="ウィンドウの透明度" tabindex="-1">ウィンドウの透明度 <a class="header-anchor" href="#ウィンドウの透明度" aria-hidden="true">#</a></h3><p>GLFWは、フレームバッファの透過とウィンドウ全体の透過の2種類のウィンドウの透過をサポートしています．1つのウィンドウで両方の方法を使用することはできません。これを行った場合の結果は未定義である．</p><p>どちらの方法もプラットフォームがそれをサポートする必要があり、GLFWがサポートするすべてのプラットフォームのすべてのバージョンがこれを行うわけではないので、ウィンドウが本当に透明であるかどうかをチェックするメカニズムがあります。</p><p>ウィンドウフレームバッファは GLFW_TRANSPARENT_FRAMEBUFFER ウィンドウヒントでピクセル単位、フレーム単位で透明にすることができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_TRANSPARENT_FRAMEBUFFER</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>システムでサポートされている場合、ウィンドウのコンテンツ領域は、フレームバッファのピクセル単位のアルファチャンネルを使用して背景と合成されます。これには、システム上でデスクトップ合成が有効になっていることが必要です。これはウィンドウの装飾には影響しません。</p><p>ウィンドウフレームバッファが正常に透過されたかどうかは、GLFW_TRANSPARENT_FRAMEBUFFER ウィンドウ属性で確認することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_TRANSPARENT_FRAMEBUFFER</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// window framebuffer is currently transparent</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>GLFWには、gearsというフレームバッファの透明化を有効にした例が付属しています。</p><p>装飾を含むウィンドウ全体の不透明度は、glfwSetWindowOpacityで設定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowOpacity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>不透明度（またはアルファ値）は0と1の間の正の有限の数で、0（ゼロ）は完全に透明、1（イチ）は完全に不透明になります。新しく作成されたウィンドウの初期不透明度値は1です。</p><p>ウィンドウの現在の不透明度は、glfwGetWindowOpacityで問い合わせることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">float</span><span style="color:#A6ACCD;"> opacity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetWindowOpacity</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>システムがウィンドウ全体の透明化をサポートしていない場合、この関数は常に1を返します。</p><p>GLFWには、opacityと呼ばれる実行時にウィンドウ全体の透明度を制御できるテストプログラムが付属しています。</p><h3 id="ウィンドウの属性" tabindex="-1">ウィンドウの属性 <a class="header-anchor" href="#ウィンドウの属性" aria-hidden="true">#</a></h3><p>ウィンドウには glfwGetWindowAttrib を使用して返すことができる多くの属性があります。ユーザーの操作によって変化する状態（たとえば、入力フォーカスがあるかどうか）を反映するものもあれば、ウィンドウの固有の特性（たとえば、どのようなボーダーを持つか）を反映するものもあります。ウィンドウに関連するものと、OpenGLまたはOpenGL ESのコンテキストに関連するものがあります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwGetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FOCUSED</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// window has input focus</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>GLFW_DECORATED, GLFW_RESIZABLE, GLFW_FLOATING, GLFW_AUTO_ICONIFY, GLFW_FOCUS_ON_SHOWウィンドウ属性はglfwSetWindowAttribで変更することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetWindowAttrib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_RESIZABLE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FALSE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h4 id="ウィンドウ関連属性" tabindex="-1">ウィンドウ関連属性 <a class="header-anchor" href="#ウィンドウ関連属性" aria-hidden="true">#</a></h4><p>GLFW_FOCUSED は、指定されたウィンドウに入力フォーカスがあるかどうかを示す。詳細は、「ウィンドウの入力フォーカス」を参照してください。</p><p>GLFW_ICONIFIED は、指定されたウィンドウがアイコン化されているかどうかを示す。詳しくは、ウィンドウのアイコン化を参照してください。</p><p>GLFW_MAXIMIZED は、指定されたウィンドウが最大化されているかどうかを示す。詳しくは、ウィンドウの最大化を参照してください。</p><p>GLFW_HOVERED は、カーソルが現在ウィンドウのコンテンツ領域の真上にあり、間に他のウィンドウがないかどうかを示す。詳細は、「カーソルの入力/離脱イベント」を参照してください。</p><p>GLFW_VISIBLE は、指定されたウィンドウが表示されているかどうかを示す。詳細は、「ウィンドウの可視性」を参照してください。</p><p>GLFW_RESIZABLE は、指定されたウィンドウがユーザーによってリサイズ可能かどうかを示す。これは、作成前に GLFW_RESIZABLE window hint で設定するか、作成後に glfwSetWindowAttrib で設定することができる。</p><p>GLFW_DECORATED 指定されたウィンドウがボーダー、クローズウィジェットなどの装飾を持つかどうかを示す。これは、作成前に GLFW_DECORATED window hint で設定するか、作成後に glfwSetWindowAttrib で設定することができる。</p><p>GLFW_AUTO_ICONIFY は、指定されたフルスクリーンウィンドウが、 フォーカスロスやクローズウィジェットなどの際にアイコン化されるかどうかを 示します。これは、作成前に GLFW_AUTO_ICONIFY window hint で設定するか、作成後に glfwSetWindowAttrib で設定することができる。</p><p>GLFW_FLOATING 指定されたウィンドウがフローティングであるかどうかを示す。これは、作成前に GLFW_FLOATING ウィンドウヒントで設定するか、作成後に glfwSetWindowAttrib で設定することができる。</p><p>GLFW_TRANSPARENT_FRAMEBUFFER は、指定されたウィンドウが透明なフレームバッファを持っているかどうか、つまりウィンドウのフレームバッファのアルファチャンネルを使用してウィンドウの内容が背景と合成されるかどうかを示します。詳細はウィンドウの透過性を参照してください。</p><p>GLFW_FOCUS_ON_SHOW glfwShowWindowが呼ばれたときに、ウィンドウに入力フォーカスを与えるかどうかを指定します。これは、作成前に GLFW_FOCUS_ON_SHOW ウィンドウヒントで設定するか、作成後に glfwSetWindowAttrib で設定することができます。</p><h4 id="コンテキスト関連属性" tabindex="-1">コンテキスト関連属性 <a class="header-anchor" href="#コンテキスト関連属性" aria-hidden="true">#</a></h4><p>GLFW_CLIENT_API は、ウィンドウのコンテキストが提供するクライアント API を表します。 GLFW_OPENGL_API, GLFW_OPENGL_ES_API あるいは GLFW_NO_API のいずれかです。</p><p>GLFW_CONTEXT_CREATION_API は、ウィンドウのコンテキストを作成するために使用されるコンテキスト作成APIを示します。; either GLFW_NATIVE_CONTEXT_API, GLFW_EGL_CONTEXT_API or GLFW_OSMESA_CONTEXT_API.</p><p>GLFW_CONTEXT_VERSION_MAJOR, GLFW_CONTEXT_VERSION_MINOR and GLFW_CONTEXT_REVISION は、ウィンドウのコンテキストのクライアント API バージョンを示す。</p><blockquote><p>これらの属性を GLFW_VERSION_MAJOR, GLFW_VERSION_MINOR および GLFW_VERSION_REVISION と混同しないようにしてください。</p></blockquote><p>GLFW_OPENGL_FORWARD_COMPAT は、ウィンドウのコンテキストがOpenGLの前方互換性のあるものであればGLFW_TRUE、そうでない場合はGLFW_FALSEとなります。</p><p>GLFW_OPENGL_DEBUG_CONTEXT は、ウィンドウのコンテキストがデバッグモードであればGLFW_TRUE、そうでなければGLFW_FALSEです。</p><p>GLFW_OPENGL_PROFILE は、コンテキストによって使用されるOpenGLプロファイルを示します。コンテキストが既知のプロファイルを使用している場合は GLFW_OPENGL_CORE_PROFILE または GLFW_OPENGL_COMPAT_PROFILE であり、 OpenGLプロファイルが不明であるかコンテキストが OpenGL ES コンテキストである場合は GLFW_OPENGL_ANY_PROFILE になる。返されたプロファイルは、コンテキストフラグのプロファイルビットと一致しないかもしれないことに注意してください、なぜなら、ビットが設定されていないとき、GLFWはプロファイルを検出する他の手段を試すからです。</p><p>GLFW_CONTEXT_RELEASE_BEHAVIOR は、コンテキストが使用するリリースを示す。指定できる値は GLFW_ANY_RELEASE_BEHAVIOR、 GLFW_RELEASE_BEHAVIOR_FLUSH あるいは GLFW_RELEASE_BEHAVIOR_NONE のいずれかである。動作が GLFW_ANY_RELEASE_BEHAVIOR の場合、コンテキスト作成 API のデフォルトの動作が使用される。GLFW_RELEASE_BEHAVIOR_FLUSH を指定すると、現在のコンテキストから解放されるたびにパイプラインがフラッシュされます。GLFW_RELEASE_BEHAVIOR_NONE を指定すると、パイプラインは解放時にフラッシュされません。</p><p>GLFW_CONTEXT_NO_ERROR は、コンテキストによってエラーが生成されるかどうかを示す。使用可能な値は GLFW_TRUE および GLFW_FALSE である。有効にすると、エラーが発生するような状況では、代わりに未定義の動作が発生する。</p><p>GLFW_CONTEXT_ROBUSTNESS は、コンテキストによって使用される堅牢性ストラテジーを示す。ウィンドウのコンテキストが堅牢性をサポートしている場合は GLFW_LOSE_CONTEXT_ON_RESET または GLFW_NO_RESET_NOTIFICATION で、そうでない場合は GLFW_NO_ROBUSTNESS である。</p><h4 id="フレームバッファ関連属性" tabindex="-1">フレームバッファ関連属性 <a class="header-anchor" href="#フレームバッファ関連属性" aria-hidden="true">#</a></h4><p>GLFWはデフォルトフレームバッファ（すなわち、ウィンドウに接続されたフレームバッファ）の属性を公開していません。</p><p>OpenGLまたはOpenGL ESのバージョン3.0以降を使用している場合、glGetFramebufferAttachmentParameteriv関数は、赤、緑、青、アルファ、深度およびステンシルバッファチャネルのビット数を取得するために使用することができます。それ以外の場合は、glGetIntegerv関数を使用することができます。</p><p>MSAAサンプルの数は、常にglGetIntegervで取得されます。フレームバッファオブジェクトをサポートするコンテキストでは、現在バインドされているフレームバッファのサンプル数が返されます。</p><p>Attribute glGetIntegerv glGetFramebufferAttachmentParameteriv Red bits GL_RED_BITS GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE Green bits GL_GREEN_BITS GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE Blue bits GL_BLUE_BITS GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE Alpha bits GL_ALPHA_BITS GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE Depth bits GL_DEPTH_BITS GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE Stencil bits GL_STENCIL_BITS GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE MSAA samples GL_SAMPLES Not provided by this function</p><p>glGetFramebufferAttachmentParameteriv を呼び出すと、赤、緑、青、アルファのサイズは GL_BACK_LEFT から、深度とステンシルのサイズはそれぞれ GL_DEPTH と GL_STENCIL アタッチメントから問い合わせがあります。</p><h2 id="バッファースワッピング" tabindex="-1">バッファースワッピング <a class="header-anchor" href="#バッファースワッピング" aria-hidden="true">#</a></h2><p>GLFWウィンドウは、デフォルトでダブルバッファリングされています。つまり、フロントバッファとバックバッファの2つのレンダリングバッファを持つということです。フロントバッファは表示されるもので、バックバッファはレンダリングされるものです。</p><p>フレーム全体のレンダリングが完了したら、バックバッファとフロントバッファを入れ替えて、レンダリング済みのものを表示し、新しいフレームのレンダリングを開始する必要があります。これは glfwSwapBuffers で行われます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSwapBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>時々、バッファスワップがいつ行われるかを選択することが有用です。関数glfwSwapIntervalを用いると、glfwSwapBuffersが呼ばれた時点から、バッファを交換するまでにドライバが待つべき最小限のモニタリフレッシュ回数を選択することが可能です。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSwapInterval</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>間隔が 0 の場合、glfwSwapBuffers が呼ばれたとき、リフレッシュを待たずに、すぐにスワップが実行されます。そうでなければ、各バッファスワップの間に少なくともインターバルリトレースが経過します。ゼロのスワップ間隔を使用することは、垂直リトレースを待つためにかかる時間を測定することが望ましくない場合、ベンチマーク目的のために有用である。しかし、1つのスワップ間隔を使用すると、テアリングを回避することができます。</p><p>ドライバによっては、アプリケーションが要求するスワップ間隔を上書きするユーザ制御の設定があるため、すべてのマシンでこれが機能するとは限らないことに注意してください。</p><p>WGL_EXT_swap_control_tear または GLX_EXT_swap_control_tear 拡張のいずれかをサポートするコンテキストは、負のスワップ間隔も受け入れ、フレームが少し遅れて到着した場合でも、ドライバがすぐにスワップすることを可能にします。これは、目に見える涙のリスクと、より大きなフレームレートの安定性をトレードします。これらの拡張は glfwExtensionSupported で確認することができます。</p>`,311),e=[o];function t(c,F,r,i,D,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
