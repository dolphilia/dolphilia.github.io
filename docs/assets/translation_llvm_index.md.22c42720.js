import{_ as l,o as e,c as i,R as t}from"./chunks/framework.320df067.js";const d=JSON.parse('{"title":"LLVMの概要","description":"","frontmatter":{},"headers":[],"relativePath":"translation/llvm/index.md","filePath":"translation/llvm/index.md","lastUpdated":1690210523000}'),L={name:"translation/llvm/index.md"},a=t('<h1 id="llvmの概要" tabindex="-1">LLVMの概要 <a class="header-anchor" href="#llvmの概要" aria-label="Permalink to &quot;LLVMの概要&quot;">​</a></h1><p>LLVMプロジェクトは、モジュール式で再利用可能なコンパイラとツールチェーン技術の集合体である。その名前とは裏腹に、LLVMは従来の仮想マシンとはほとんど関係がない。LLVMという名前自体は頭字語ではなく、プロジェクトの正式名称である。</p><p>LLVMはイリノイ大学の研究プロジェクトとして始まり、任意のプログラミング言語の静的コンパイルと動的コンパイルの両方をサポートできる、最新のSSAベースのコンパイル戦略を提供することを目標としていた。それ以来、LLVMは多くのサブプロジェクトからなる包括的なプロジェクトに成長し、その多くは学術研究だけでなく、さまざまな商用プロジェクトやオープンソースプロジェクトで実運用されている。LLVMプロジェクトのコードは、&quot;Apache 2.0 License with LLVM exceptions&quot;の下でライセンスされている。</p><p>LLVMの主なサブプロジェクトは以下の通り：</p><ol><li><p>LLVMコア・ライブラリは、ソースやターゲットに依存しない最新のオプティマイザと、多くの一般的なCPUに対応したコード生成を提供します（一般的でないCPUもあります！）。これらのライブラリは、LLVM中間表現（&quot;LLVM IR&quot;）として知られる、適切に指定されたコード表現を中心に構築されています。LLVMコア・ライブラリはよく文書化されており、LLVMをオプティマイザやコード生成器として使用するために、独自の言語を考案する（または既存のコンパイラを移植する）のは特に簡単です。</p></li><li><p>Clangは &quot;LLVMネイティブ&quot; のC/C++/Objective-Cコンパイラで、驚くほど高速なコンパイル、非常に便利なエラーや警告のメッセージ、そして優れたソースレベルのツールを構築するためのプラットフォームを提供することを目指しています。Clang Static Analyzerとclang-tidyはコードのバグを自動的に見つけるツールで、C/C++コードを解析するライブラリとしてClangフロントエンドを使って構築できるツールの素晴らしい例です。</p></li><li><p>LLDBプロジェクトは、LLVMとClangによって提供されるライブラリをベースにして、優れたネイティブ・デバッガを提供します。ClangのASTと式パーサー、LLVM JIT、LLVMディスアセンブラなどを使用し、「ただ動く」体験を提供します。また、シンボルをロードする際に、GDBよりもはるかに高速で、メモリ効率に優れています。</p></li><li><p>libc++およびlibc++ ABIプロジェクトは、C++11およびC++14の完全サポートを含む、C++標準ライブラリの標準準拠かつ高性能な実装を提供する。</p></li><li><p>compiler-rtプロジェクトは、&quot;__fixunsdfdi &quot;のような低レベル・コード・ジェネレータ・サポート・ルーチンの高度に調整された実装や、ターゲットがコアIR操作を実装するための短いネイティブ命令シーケンスを持たない場合に生成されるその他の呼び出しを提供する。また、AddressSanitizer、ThreadSanitizer、MemorySanitizer、DataFlowSanitizerなどの動的テスト・ツールのランタイム・ライブラリの実装も提供する。</p></li><li><p>MLIRサブプロジェクトは、再利用可能で拡張可能なコンパイラ・インフラを構築するための新しいアプローチである。MLIRは、ソフトウェアの断片化に対処し、異種ハードウェア向けのコンパイルを改善し、ドメイン固有のコンパイラを構築するコストを大幅に削減し、既存のコンパイラ同士を接続する手助けをすることを目指している。</p></li><li><p>OpenMPサブプロジェクトは、ClangのOpenMP実装で使用するOpenMPランタイムを提供します。</p></li><li><p>pollyプロジェクトは、多面体モデルを使った自動並列化とベクトル化だけでなく、一連のキャッシュ・ローカリティ最適化を実装している。</p></li><li><p>libclcプロジェクトは、OpenCL標準ライブラリの実装を目指している。</p></li><li><p>kleeプロジェクトは「記号的仮想機械」を実装しており、バグを発見したり関数の特性を証明したりするために、定理証明器を用いてプログラムを通るすべての動的パスの評価を試みる。kleeの大きな特徴は、バグを検出した場合にテストケースを生成できることである。</p></li><li><p>LLDプロジェクトは新しいリンカーだ。これはシステム・リンカーのドロップイン・リプレースメントであり、はるかに高速に動作する。</p></li><li><p>BOLTプロジェクトは、ポストリンク・オプティマイザーである。サンプリング・プロファイラによって収集された実行プロファイルに基づいてアプリケーションのコード・レイアウトを最適化することで、改善を実現している。</p></li></ol><p>LLVMの公式なサブプロジェクトに加え、LLVMのコンポーネントをさまざまなタスクに使用する多種多様なプロジェクトがあります。これらの外部プロジェクトを通じて、LLVMを使ってRuby、Python、Haskell、Rust、D、PHP、Pure、Lua、Julia、その他多くの言語をコンパイルすることができる。LLVMの大きな強みは、その多用途性、柔軟性、再利用性であり、Luaのような組み込み言語の軽量なJITコンパイルから、巨大なスーパーコンピュータ用のFortranコードのコンパイルまで、このように多種多様なタスクに使用されている理由である。</p><p>他のすべてと同様に、LLVMには優れた低レベル・ツールの構築に興味を持つ人々の広範でフレンドリーなコミュニティがある。もし参加することに興味があるなら、まずはLLVMブログに目を通し、LLVM Discourseに参加するのが良いだろう。パッチの送り方、コミット・アクセス、著作権やライセンスに関する情報については、LLVM Developer Policyをご覧ください。</p>',7),p=[a];function n(o,r,s,c,M,V){return e(),i("div",null,p)}const u=l(L,[["render",n]]);export{d as __pageData,u as default};
