import{_ as s,c as n,o as a,a as l}from"./app.b419af8d.js";const C=JSON.parse('{"title":"ファイナライズの使用方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"簡単な例","slug":"簡単な例","link":"#簡単な例","children":[]},{"level":2,"title":"プロトタイプオブジェクトへのファイナライザーの追加","slug":"プロトタイプオブジェクトへのファイナライザーの追加","link":"#プロトタイプオブジェクトへのファイナライザーの追加","children":[]},{"level":2,"title":"ヒープ破壊","slug":"ヒープ破壊","link":"#ヒープ破壊","children":[]},{"level":2,"title":"ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム","slug":"ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム","link":"#ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム","children":[]}],"relativePath":"translation/duktape/wiki/how_to_use_finalization.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/wiki/how_to_use_finalization.md"},o=l(`<h1 id="ファイナライズの使用方法" tabindex="-1">ファイナライズの使用方法 <a class="header-anchor" href="#ファイナライズの使用方法" aria-hidden="true">#</a></h1><p>ドキュメンテーションガイド: <a href="http://duktape.org/guide.html#finalization" target="_blank" rel="noreferrer">http://duktape.org/guide.html#finalization</a>.</p><h2 id="簡単な例" tabindex="-1">簡単な例 <a class="header-anchor" href="#簡単な例" aria-hidden="true">#</a></h2><p>ファイナライズ例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// finalize.js</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> foo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">123</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fin</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">finalizer, foo -&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WARNING: finalizer failed (ignoring): </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// オブジェクトを作成し、&#39;a&#39;を通してそれを参照する。</span></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 参照削除，参照カウントで即座に確定</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refcount finalizer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// refcountingが無効の場合、マーク＆スイープのファイナライズはここで発生します（遅くとも）。</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mark-and-sweep finalizer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">gc</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上の例のファイナライザーの内部で try-catch ラッパーを使用することを強く推奨します。捕捉されないファイナライザーエラーは黙って無視されるので、ファイナライザーが全く実行されないように見えるかもしれません。</p><p>これをDuktapeコマンドラインツール（デフォルトのDuktapeプロファイルを使用）で実行すると、次のようになります。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">duk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">finalize.js</span></span>
<span class="line"><span style="color:#FFCB6B;">refcount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">finalizer</span></span>
<span class="line"><span style="color:#FFCB6B;">finalizer,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#FFCB6B;">mark-and-sweep</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">finalizer</span></span>
<span class="line"><span style="color:#FFCB6B;">Cleaning</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up...</span></span>
<span class="line"></span></code></pre></div><h2 id="プロトタイプオブジェクトへのファイナライザーの追加" tabindex="-1">プロトタイプオブジェクトへのファイナライザーの追加 <a class="header-anchor" href="#プロトタイプオブジェクトへのファイナライザーの追加" aria-hidden="true">#</a></h2><p>同じ型のオブジェクトが多数ある場合、プロトタイプにファイナライザーを追加することで、オブジェクトインスタンスのプロパティカウントを最小にすることができます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// プラットフォーム固有のファイル記述子に関連付けられた仮想的なSocketオブジェクトの例です。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Socket</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">host</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">port</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">host</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">port</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">port</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Platform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openSocket</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">port</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fin</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Socket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Socket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// called for the prototype itself</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// already freed</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Platform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">closeSocket</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">WARNING: finalizer failed for fd </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fd</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> (ignoring): </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Socketインスタンスに対して明示的なファイナライザーを登録することなく、任意のSocketインスタンスがファイナライズされるようになりました。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> sock </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Socket</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="ヒープ破壊" tabindex="-1">ヒープ破壊 <a class="header-anchor" href="#ヒープ破壊" aria-hidden="true">#</a></h2><p>Duktapeのヒープが破壊されるとき、ファイナライザーは通常通り呼び出されます。</p><ul><li>オブジェクトを救出することはできません。ファイナライザーは、最初のファイナライザー呼び出しでネイティブ・リソースを解放しなければなりません。なぜなら、ターゲット・オブジェクトへの新しい参照が作成されても、ファイナライザーは再び呼び出されないからです。</li><li>ファイナライザーは、新しいファイナライズ可能なオブジェクトを作成することができ、これらもファイナライズされます。しかし、この処理には、暴走するファイナライザーを捕まえるための健全性の限界があります。通常、この制限に遭遇することはないはずです。</li></ul><p>Duktape 1.4.0以降、ファイナライザーには第2引数が与えられています。これは、オブジェクトが救出できない（ヒープ破壊が進行している）かどうかを示すブール値です。この引数は、救出が不可能な場合は真、そうでない場合は偽となります。Duktape 1.3.0以前では、この引数は提供されません。</p><p>もしファイナライザーが、(1)解放しなければならないネイティブ・リソースを管理し、 (2)オブジェクトの救助を使い、後でファイナライザーが再び呼ばれることに依存しているなら、 例えば、ヒープ破壊の場合を明示的にチェックする必要があります。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myFinalizer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">heapDestruct</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">heapDestruct</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ヒープが破壊されているので、すぐに解放する必要があります。</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">freeNativeResources</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 通常の場合：後でファイナライザが呼ばれることを保証して、オブジェクトを救出することができる。</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム" tabindex="-1">ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム <a class="header-anchor" href="#ヒープ破壊時のファイナライザーの現在のサニティ・アルゴリズム" aria-hidden="true">#</a></h2><p>ヒープ破棄時のファイナライザーのサニティ制限は、現在おおよそ以下のように動作します（正確な詳細はリリース間で変更される可能性があります）。</p><ul><li>割り当てられたすべてのヒープ・オブジェクトが反復処理され、ファイナライザが実行可能なオブジェクトはすべてファイナライズされます。ファイナライザーは特定のオブジェクトに対して二度と実行されません。これは DUK_HEAPHDR_FLAG_FINALIZED を使って追跡されます。n_total を全ヒープオブジェクトの数、n_finalized をこのラウンドでファイナライザを実行した（というか実行しようとした）全オブジェクトの数とします。</li><li>ファイナライズ可能なオブジェクトの数の限界は次のように計算される。</li><li>最初のラウンド: n_limit = 2 * n_total.</li><li>次のラウンドでは、n_limit = n_limit * 3 / 4、つまり約25%減少します。</li><li>n_finalized == 0 の場合、すべてのファイナライザーが終了し、終了します。</li><li>n_finalized &gt;= n_limit の場合、ファイナライズ可能なオブジェクトの数が予想通り減らないので、おそらくファイナライザが暴走していることが原因です。ファイナライズ処理は終了し、残りのファイナライザーは実行されません。</li><li>その他の場合は、ループを再開してください。</li></ul><p>このアルゴリズムの動機は、明らかに暴走したファイナライザーがあり、プロセスが終了できない場合を除き、ヒープ破壊ですべてのファイナライザーが実行されるようにすることです。</p><p>最終化可能なオブジェクトの数を増やすために、最初の制限値はかなり大きくなっていますが、その後ラウンドごとに少なくとも25%減少しなければ最終化処理は中止されます。</p><p>ヒープ破壊のアプローチについては、<a href="https://github.com/svaarala/duktape/pull/473" target="_blank" rel="noreferrer">https://github.com/svaarala/duktape/pull/473</a> でいくつか議論されています。</p>`,23),e=[o];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const f=s(p,[["render",t]]);export{C as __pageData,f as default};
