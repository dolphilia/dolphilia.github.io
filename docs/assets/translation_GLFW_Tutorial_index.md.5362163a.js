import{_ as s,c as a,o as n,a as l}from"./app.e18c80f2.js";const A=JSON.parse('{"title":"GLFWチュートリアル（日本語訳）","description":"","frontmatter":{},"headers":[{"level":2,"title":"ステップ・バイ・ステップ","slug":"ステップ・バイ・ステップ","link":"#ステップ・バイ・ステップ","children":[{"level":3,"title":"GLFWヘッダーをインクルードする","slug":"glfwヘッダーをインクルードする","link":"#glfwヘッダーをインクルードする","children":[]},{"level":3,"title":"GLFWの初期化と終了","slug":"glfwの初期化と終了","link":"#glfwの初期化と終了","children":[]},{"level":3,"title":"エラーコールバックを設定する","slug":"エラーコールバックを設定する","link":"#エラーコールバックを設定する","children":[]},{"level":3,"title":"ウィンドウとコンテキストの作成","slug":"ウィンドウとコンテキストの作成","link":"#ウィンドウとコンテキストの作成","children":[]},{"level":3,"title":"OpenGLコンテキストのカレント化","slug":"openglコンテキストのカレント化","link":"#openglコンテキストのカレント化","children":[]},{"level":3,"title":"ウィンドウクローズ・フラグの確認","slug":"ウィンドウクローズ・フラグの確認","link":"#ウィンドウクローズ・フラグの確認","children":[]},{"level":3,"title":"入力イベントの受信","slug":"入力イベントの受信","link":"#入力イベントの受信","children":[]},{"level":3,"title":"OpenGLによるレンダリング","slug":"openglによるレンダリング","link":"#openglによるレンダリング","children":[]},{"level":3,"title":"タイマーの読み取り","slug":"タイマーの読み取り","link":"#タイマーの読み取り","children":[]},{"level":3,"title":"バッファの入れ替え","slug":"バッファの入れ替え","link":"#バッファの入れ替え","children":[]},{"level":3,"title":"イベントの処理","slug":"イベントの処理","link":"#イベントの処理","children":[]},{"level":3,"title":"組み立てる","slug":"組み立てる","link":"#組み立てる","children":[]}]}],"relativePath":"translation/GLFW/Tutorial/index.md","lastUpdated":1676126774000}'),p={name:"translation/GLFW/Tutorial/index.md"},o=l(`<h1 id="glfwチュートリアル-日本語訳" tabindex="-1">GLFWチュートリアル（日本語訳） <a class="header-anchor" href="#glfwチュートリアル-日本語訳" aria-hidden="true">#</a></h1><p><a href="https://www.glfw.org/docs/latest/quick_guide.html" target="_blank" rel="noreferrer">原文</a></p><p>このガイドではGLFW3を使った簡単なアプリケーションの書き方を説明します。 このアプリケーションはウィンドウとOpenGLコンテキストを作成し、回転する三角形を描画して、ユーザがウィンドウを閉じるかEscapeキーを押すと終了するようになっています。このガイドでは最もよく使われる関数をいくつか紹介しますが、他にもたくさんあります。</p><p>このガイドは以前のバージョンのGLFWの経験がないことを前提にしています。過去にGLFW2を使っていた人は、<a href="https://www.glfw.org/docs/latest/moving_guide.html" target="_blank" rel="noreferrer">GLFW2から3への移行</a>を読んでください。GLFW3ではいくつかの関数の動作が異なるからです。</p><h2 id="ステップ・バイ・ステップ" tabindex="-1">ステップ・バイ・ステップ <a class="header-anchor" href="#ステップ・バイ・ステップ" aria-hidden="true">#</a></h2><h3 id="glfwヘッダーをインクルードする" tabindex="-1">GLFWヘッダーをインクルードする <a class="header-anchor" href="#glfwヘッダーをインクルードする" aria-hidden="true">#</a></h3><p>GLFWを使用するアプリケーションのソースファイルで、そのヘッダファイルをインクルードする必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>このヘッダはGLFW APIのすべての定数・型・関数プロトタイプを提供します。</p><p>デフォルトではあなたの開発環境のOpenGLヘッダも含まれます。いくつかのプラットフォームでは、このヘッダーはOpenGLの古いバージョンしかサポートしていません。最も極端なケースはWindowsで、通常OpenGL1.2しかサポートしていません。</p><p>ほとんどのプログラムは代わりに<a href="https://www.glfw.org/docs/latest/context_guide.html#context_glext_auto" target="_blank" rel="noreferrer">拡張ローダーライブラリ</a>を使用し、そのヘッダを含めます。この例では<a href="https://gen.glad.sh/" target="_blank" rel="noreferrer">glad</a>によって生成されたファイルを使用しています。GLFWヘッダはそのようなヘッダが最初にインクルードされていれば、そのほとんどを検出し、開発環境からのヘッダをインクルードしないようにすることができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/gl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>ヘッダーの衝突がないことを確認するために、GLFWヘッダーの前に<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_INCLUDE_NONE" target="_blank" rel="noreferrer">GLFW_INCLUDE_NONE</a>を定義して、開発環境ヘッダーを含めることを明示的に禁止することができます。これにより、2つのヘッダを任意の順番でインクルードすることもできます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GLFW_INCLUDE_NONE</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/gl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="glfwの初期化と終了" tabindex="-1">GLFWの初期化と終了 <a class="header-anchor" href="#glfwの初期化と終了" aria-hidden="true">#</a></h3><p>ほとんどのGLFW関数は使用する前にライブラリを初期化する必要があります。初期化に成功するとGLFW_TRUEが返されます。エラーが発生した場合はGLFW_FALSEが返されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">glfwInit</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 初期化に失敗しました</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>GLFW_TRUEとGLFW_FALSEは常に1と0であることに注意してください。</p><p>GLFWを使い終わったら、通常はアプリケーションが終了する直前にGLFWを終了させる必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwTerminate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>これは残っているウィンドウをすべて破棄し、GLFWによって割り当てられたその他のリソースを解放します。この呼び出しの後、それを必要とするGLFW関数を使う前に、再びGLFWを初期化する必要があります。</p><h3 id="エラーコールバックを設定する" tabindex="-1">エラーコールバックを設定する <a class="header-anchor" href="#エラーコールバックを設定する" aria-hidden="true">#</a></h3><p>ほとんどのイベントはキーが押された・GLFWウィンドウが移動した・エラーが発生したなどのコールバックを通じて報告されます。コールバックは、イベントを記述した引数でGLFWによって呼び出されるC関数（またはC++の静的メソッド）です。</p><p>GLFWの関数が失敗した場合、GLFWのエラーコールバックにエラーが報告されます。これらの報告はエラーコールバックで受け取ることができます。この関数は以下のシグネチャを持つ必要がありますが、他のコールバックで許可されていることは何でもできます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">error_callback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">description</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> description</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>コールバック関数はセットする必要があり、GLFWはそれらを呼び出すことができます。エラーコールバックを設定する関数は初期化前に呼び出すことができる数少ないGLFW関数のひとつで、これにより初期化中と初期化後の両方でエラーが通知されるようになります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetErrorCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">error_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウとコンテキストの作成" tabindex="-1">ウィンドウとコンテキストの作成 <a class="header-anchor" href="#ウィンドウとコンテキストの作成" aria-hidden="true">#</a></h3><p>ウィンドウとそのOpenGLコンテキストは<a href="https://www.glfw.org/docs/latest/group__window.html#ga3555a418df92ad53f917597fe2f64aeb" target="_blank" rel="noreferrer">glfwCreateWindow</a>を1回呼び出すだけで作成され、作成されたウィンドウとコンテキストを組み合わせたオブジェクトへのハンドルが返されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ウィンドウまたはOpenGLコンテキストの作成に失敗しました</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>この例では、640 x 480 のウィンドウモード・ウィンドウとOpenGLコンテキストを作成しています。ウィンドウやOpenGLコンテキストの作成に失敗した場合はNULLが返されます。常に戻り値をチェックする必要があります。ウィンドウの作成に失敗することはほとんどありませんが、 コンテキストの作成は適切にインストールされたドライバに依存し、 必要なハードウェアを備えたマシンであっても失敗することがあります。</p><p>デフォルトでは、GLFWが作成するOpenGLコンテキストは任意のバージョンを持つことができます。作成前にGLFW_CONTEXT_VERSION_MAJORとGLFW_CONTEXT_VERSION_MINORヒントを設定することにより、最小限のOpenGLバージョンを要求することができます。必要な最小バージョンがマシンでサポートされていない場合、コンテキスト（およびウィンドウ）の作成は失敗します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_CONTEXT_VERSION_MAJOR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_CONTEXT_VERSION_MINOR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ウィンドウまたはコンテキストの作成に失敗しました</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウハンドルはウィンドウに関連するすべての関数に渡され、ウィンドウに関連するすべてのコールバックに提供されるため、どのウィンドウがイベントを受け取ったかを知ることができます。</p><p>ウィンドウとコンテキストが不要になったら、それを破棄します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwDestroyWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>この関数が呼ばれるとウィンドウのイベントは配信されなくなり、ハンドルは無効になります。</p><h3 id="openglコンテキストのカレント化" tabindex="-1">OpenGLコンテキストのカレント化 <a class="header-anchor" href="#openglコンテキストのカレント化" aria-hidden="true">#</a></h3><p>OpenGL APIを使用する前に現在のOpenGLコンテキストを持つ必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwMakeContextCurrent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>このコンテキストは他のコンテキストをカレントにするか、現在のコンテキストを所有するウィンドウが破壊されるまでカレントのままです。</p><p>OpenGLにアクセスするために<a href="https://www.glfw.org/docs/latest/context_guide.html#context_glext_auto" target="_blank" rel="noreferrer">拡張ローダーライブラリ</a>を使用している場合、ローダーはロードするために現在のコンテキストを必要とします。この例では<a href="https://github.com/Dav1dde/glad" target="_blank" rel="noreferrer">glad</a>を使用していますが、このようなライブラリにはすべて同じルールが適用されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">gladLoadGL</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">glfwGetProcAddress</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="ウィンドウクローズ・フラグの確認" tabindex="-1">ウィンドウクローズ・フラグの確認 <a class="header-anchor" href="#ウィンドウクローズ・フラグの確認" aria-hidden="true">#</a></h3><p>各ウィンドウにはそのウィンドウを閉じるかどうかを示すフラグがあります。</p><p>ユーザーがタイトルバーのクローズボタンを押すか、 Alt+F4などのキーコンビネーションでウィンドウを閉じようとすると、このフラグが1にセットされます。ウィンドウは実際には閉じないので、このフラグを監視してウィンドウを破棄するか、ユーザーに何らかのフィードバックを与えることが期待されていることに注意してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">glfwWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 実行し続ける</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><a href="https://www.glfw.org/docs/latest/group__window.html#gada646d775a7776a95ac000cfc1885331" target="_blank" rel="noreferrer">glfwSetWindowCloseCallback</a>でクローズコールバックを設定することにより、ユーザがウィンドウを閉じようとするときに通知を受けることができます。コールバックはクローズフラグが設定された直後に呼び出されます。</p><p>また<a href="https://www.glfw.org/docs/latest/group__window.html#ga49c449dde2a6f87d996f4daaa09d6708" target="_blank" rel="noreferrer">glfwSetWindowShouldClose</a>を使って自分で設定することもできます。これは、例えばEscapeキーを押すような、他の種類の入力をウィンドウを閉じるものとして解釈したい場合に便利です。</p><h3 id="入力イベントの受信" tabindex="-1">入力イベントの受信 <a class="header-anchor" href="#入力イベントの受信" aria-hidden="true">#</a></h3><p>各ウィンドウには多数のコールバック関数があり、様々な種類のイベントをすべて受信できるように設定することができます。キーを押したり離したりするイベントを受信するには、キーコールバック関数を作成します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">key_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scancode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_KEY_ESCAPE </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> action </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwSetWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>キーコールバックは他のウィンドウ関連のコールバックと同様にウィンドウごとに設定されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSetKeyCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>イベント発生時にイベントコールバックを呼び出すためにはイベントを設定する必要があります。</p><h3 id="openglによるレンダリング" tabindex="-1">OpenGLによるレンダリング <a class="header-anchor" href="#openglによるレンダリング" aria-hidden="true">#</a></h3><p>現在のOpenGLのコンテキストがあれば問題なくOpenGLを使うことができます。このチュートリアルでは多色の回転する三角形がレンダリングされます。glViewportのためにフレームバッファサイズを取得する必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">glfwGetFramebufferSize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">glViewport</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>また<a href="https://www.glfw.org/docs/latest/group__window.html#gab3fb7c3366577daef18c0023e2a8591f" target="_blank" rel="noreferrer">glfwSetFramebufferSizeCallback</a>を使用してフレームバッファサイズコールバックを設定し、サイズが変更されたときに通知されるようにすることができます。</p><p>OpenGLでレンダリングする方法の詳細はこのチュートリアルの範囲外ですが、最新のOpenGLを学ぶための優れたリソースはたくさんあります。ここではそのうちのいくつかを紹介します。</p><ul><li><a href="https://antongerdelan.net/opengl/" target="_blank" rel="noreferrer">AntonのOpenGL 4チュートリアル</a></li><li><a href="https://learnopengl.com/" target="_blank" rel="noreferrer">OpenGLを学ぶ</a></li><li><a href="https://open.gl/" target="_blank" rel="noreferrer">Open.GL</a></li></ul><p>これらはすべてたまたまGLFWを使用していますが、OpenGL自体はあなたがウィンドウとコンテキストを作成するために使用するどのようなAPIでも同じように動作します。</p><h3 id="タイマーの読み取り" tabindex="-1">タイマーの読み取り <a class="header-anchor" href="#タイマーの読み取り" aria-hidden="true">#</a></h3><p>滑らかなアニメーションを作るには時間のソースが必要です。GLFWは初期化からの秒数を返すタイマーを提供しています。使用する時間ソースは各プラットフォームで最も正確なもので、一般にマイクロ秒またはナノ秒の分解能を持っています。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetTime</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><h3 id="バッファの入れ替え" tabindex="-1">バッファの入れ替え <a class="header-anchor" href="#バッファの入れ替え" aria-hidden="true">#</a></h3><p>GLFWウィンドウはデフォルトでダブルバッファリングを使用します。つまり、各ウィンドウはフロントバッファとバックバッファの2つのレンダリングバッファを持っています。フロントバッファは表示されるもので、バックバッファはレンダリングされるものです。</p><p>フレーム全体のレンダリングが完了したら、バッファを入れ替える必要があります。バックバッファがフロントバッファになり、その逆もまた然りです。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSwapBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>swap intervalはバッファのスワップ（一般にvsyncとして知られている）まで何フレーム待つかを示します。デフォルトではswap intervalは0であり、バッファのスワップが即座に行われることを意味します。高速なマシンではこれらのフレームの多くは決して表示されません。なぜなら画面は通常1秒間に60～75回しか更新されないので、多くのCPUとGPUサイクルを浪費するからです。</p><p>また画面更新の途中でバッファが入れ替わるため、<a href="https://en.wikipedia.org/wiki/Screen_tearing" target="_blank" rel="noreferrer">画面のテアリング</a>が発生します。</p><p>これらの理由からアプリケーションは通常、スワップ間隔を1に設定することを望むでしょう。それ以上の値に設定することも可能ですが、入力遅延が発生するため、通常は推奨されません。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwSwapInterval</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>この関数は現在のコンテキストに対して動作し、コンテキストが存在しない場合は失敗します。</p><h3 id="イベントの処理" tabindex="-1">イベントの処理 <a class="header-anchor" href="#イベントの処理" aria-hidden="true">#</a></h3><p>GLFWはイベントを受け取るためと、アプリケーションがロックアップしていないことを示すために、ウィンドウシステムと定期的に通信する必要があります。イベント処理は表示可能なウィンドウがある間は定期的に行われなければならず、通常はバッファスワップの後に各フレームで行われます。</p><p>保留中のイベントを処理する方法には、ポーリングとウェイトの2つがあります。この例ではイベントポーリングを使用します。これは、すでに受信したイベントのみを処理し、すぐにリターンします。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwPollEvents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>ほとんどのゲームのように継続的にレンダリングする場合はこれが最適な選択です。その代わりに、新しい入力を受け取ったときだけレンダリングを更新する必要がある場合は、<a href="https://www.glfw.org/docs/latest/group__window.html#ga554e37d781f0a997656c26b2c56c835e" target="_blank" rel="noreferrer">glfwWaitEvents</a>がより良い選択となります。これは、少なくとも1つのイベントが受信されるまで待機し、その間スレッドをスリープさせ、受信したすべてのイベントを処理します。これは非常に多くのCPUサイクルを節約し、例えば多くの種類の編集ツールに有用です。</p><h3 id="組み立てる" tabindex="-1">組み立てる <a class="header-anchor" href="#組み立てる" aria-hidden="true">#</a></h3><p>GLFWの初期化・ウィンドウの作成・キーボード入力のポーリングの方法がわかったので簡単なプログラムを作成することができます。</p><p>このプログラムは、640×480のウィンドウモードのウィンドウを作成し、画面をクリアして三角形を描画し、ユーザーがEscapeを押すかウィンドウを閉じるまでイベントを処理するループを開始します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/gl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GLFW_INCLUDE_NONE</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">linmath.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> g</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> vertices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0.6f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0.4f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#F78C6C;">0.6f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">0.4f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span><span style="color:#F78C6C;">0.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#F78C6C;">0.6f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> vertex_shader_text </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#version 110</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uniform mat4 MVP;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">attribute vec3 vCol;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">attribute vec2 vPos;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">varying vec3 color;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">void main()</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">    gl_Position = MVP * vec4(vPos, 0.0, 1.0);</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">    color = vCol;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> fragment_shader_text </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#version 110</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">varying vec3 color;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">void main()</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">    gl_FragColor = vec4(color, 1.0);</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">error_callback</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">description</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Error: %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> description</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">key_callback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">scancode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mods</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_KEY_ESCAPE </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> action </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> GLFW_PRESS</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwSetWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GLFW_TRUE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> window</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    GLuint vertex_buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> vertex_shader</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fragment_shader</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> program</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    GLint mvp_location</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> vpos_location</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> vcol_location</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwSetErrorCallback</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">error_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">glfwInit</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GLFW_CONTEXT_VERSION_MAJOR</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GLFW_CONTEXT_VERSION_MINOR</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    window </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Simple example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwTerminate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwSetKeyCallback</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> key_callback</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwMakeContextCurrent</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">gladLoadGL</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">glfwGetProcAddress</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwSwapInterval</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// NOTE: OpenGL error checks have been omitted for brevity</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glGenBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">vertex_buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glBindBuffer</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_ARRAY_BUFFER</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> vertex_buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glBufferData</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_ARRAY_BUFFER</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">vertices</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> vertices</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_STATIC_DRAW</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    vertex_shader </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glCreateShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_VERTEX_SHADER</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glShaderSource</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vertex_shader</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">vertex_shader_text</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glCompileShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vertex_shader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    fragment_shader </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glCreateShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_FRAGMENT_SHADER</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glShaderSource</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fragment_shader</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">fragment_shader_text</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glCompileShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fragment_shader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    program </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glCreateProgram</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glAttachShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> vertex_shader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glAttachShader</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fragment_shader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glLinkProgram</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    mvp_location </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glGetUniformLocation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MVP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    vpos_location </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glGetAttribLocation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vPos</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    vcol_location </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glGetAttribLocation</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vCol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glEnableVertexAttribArray</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vpos_location</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glVertexAttribPointer</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vpos_location</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_FLOAT</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_FALSE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                          </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glEnableVertexAttribArray</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vcol_location</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glVertexAttribPointer</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">vcol_location</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_FLOAT</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_FALSE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                          </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(sizeof(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">glfwWindowShouldClose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">float</span><span style="color:#F07178;"> ratio</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        mat4x4 m</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mvp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwGetFramebufferSize</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        ratio </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> width </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glViewport</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glClear</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_COLOR_BUFFER_BIT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">mat4x4_identity</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">m</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">mat4x4_rotate_Z</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">m</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> m</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">float</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">glfwGetTime</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">mat4x4_ortho</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;">ratio</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ratio</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1.f</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">mat4x4_mul</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mvp</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> m</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glUseProgram</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">program</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glUniformMatrix4fv</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mvp_location</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GL_FALSE</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> GLfloat</span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;"> mvp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glDrawArrays</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GL_TRIANGLES</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwSwapBuffers</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">glfwPollEvents</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwDestroyWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">glfwTerminate</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_SUCCESS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上のプログラムは<a href="https://www.glfw.org/download.html" target="_blank" rel="noreferrer">ソースパッケージ</a>のexamples/simple.cにあり、GLFWをビルドするときに他のすべてのサンプルと一緒にコンパイルされます。GLFWをソースパッケージからビルドした場合、Windowsではsimple.exe、Linuxではsimple、macOSではsimple.appとして、すでにこのプログラムが存在しています。</p><p>このチュートリアルでは、GLFWが提供する多くの機能のうち、ほんの一部だけを使いました。GLFWがカバーする各分野のガイドがあります。それぞれのガイドでは、そのカテゴリの全機能を紹介しています。</p><ul><li><a href="https://www.glfw.org/docs/latest/intro_guide.html" target="_blank" rel="noreferrer">API紹介</a></li><li><a href="https://www.glfw.org/docs/latest/window_guide.html" target="_blank" rel="noreferrer">ウィンドウガイド</a></li><li><a href="https://www.glfw.org/docs/latest/context_guide.html" target="_blank" rel="noreferrer">コンテキストガイド</a></li><li><a href="https://www.glfw.org/docs/latest/monitor_guide.html" target="_blank" rel="noreferrer">モニターガイド</a></li><li><a href="https://www.glfw.org/docs/latest/input_guide.html" target="_blank" rel="noreferrer">入力ガイド</a></li></ul><p>GLFWの関数をクリックすると、その機能のリファレンスドキュメントにアクセスでき、各関数のリファレンスは、関連する関数やガイドのセクションにリンクしています。</p><p>チュートリアルはここで終了です。GLFWを使うプログラムを書いたら、それをコンパイルしリンクする必要があります。その方法は、あなたが使っている開発環境に依存し、その環境のドキュメントで最もよく説明されています。GLFWに特有の詳細については、アプリケーションのビルドを参照してください。</p>`,88),e=[o];function t(c,r,F,y,D,i){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
