import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.43c433ff.js";const D=JSON.parse('{"title":"プリミティブ値","description":"","frontmatter":{},"headers":[],"relativePath":"translation/v8/v8-primitive_h.md","filePath":"translation/v8/v8-primitive_h.md","lastUpdated":null}'),p={name:"translation/v8/v8-primitive_h.md"},o=l(`<h1 id="プリミティブ値" tabindex="-1">プリミティブ値 <a class="header-anchor" href="#プリミティブ値" aria-label="Permalink to &quot;プリミティブ値&quot;">​</a></h1><h2 id="primitiveクラス" tabindex="-1">Primitiveクラス <a class="header-anchor" href="#primitiveクラス" aria-label="Permalink to &quot;Primitiveクラス&quot;">​</a></h2><p>プリミティブ値のスーパークラス。ECMA-262 4.3.2 参照。</p><h2 id="booleanクラス" tabindex="-1">Booleanクラス <a class="header-anchor" href="#booleanクラス" aria-label="Permalink to &quot;Booleanクラス&quot;">​</a></h2><p>プリミティブなブーリアン値（ECMA-262、4.3.14）。真か偽のどちらかの値。</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>Value()</td><td></td></tr><tr><td>Cast()</td><td>inline, static</td></tr><tr><td>New()</td><td>inline, static</td></tr></tbody></table><h2 id="primitivearrayクラス" tabindex="-1">PrimitiveArrayクラス <a class="header-anchor" href="#primitivearrayクラス" aria-label="Permalink to &quot;PrimitiveArrayクラス&quot;">​</a></h2><p>プリミティブ値を保持する配列。これは、エンベッダがコンパイル時にホスト定義のオプションを <code>ScriptOptions</code> に渡すために使用します。</p><p>これはモジュールのロード時に <code>HostImportModuleDynamicallyCallback</code> の一部としてエンベッダーに返されます。</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>New()</td><td>static</td></tr><tr><td>Length()</td><td></td></tr><tr><td>Set()</td><td></td></tr><tr><td>Get()</td><td></td></tr><tr><td>Cast()</td><td>inline, static</td></tr></tbody></table><h2 id="nameクラス" tabindex="-1">Nameクラス <a class="header-anchor" href="#nameクラス" aria-label="Permalink to &quot;Nameクラス&quot;">​</a></h2><p>シンボルと文字列のスーパークラス。</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>GetIdentityHash()</td><td>このオブジェクトの ID ハッシュを返します。現在の実装では、ID ハッシュを格納するためにオブジェクトのインラインプロパティを使用しています。また、一意であることは保証されない。</td></tr><tr><td>Cast()</td><td></td></tr></tbody></table><h2 id="newstringtypeスコープ付き列挙型" tabindex="-1">NewStringTypeスコープ付き列挙型 <a class="header-anchor" href="#newstringtypeスコープ付き列挙型" aria-label="Permalink to &quot;NewStringTypeスコープ付き列挙型&quot;">​</a></h2><p>文字列作成のさまざまなモードを表すフラグ。</p><p>パフォーマンスへの影響を除けば、2つの作成モードに違いはない。</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>kNormal</td><td>新しい文字列を作成し、常に新しいストレージ・メモリを確保する。</td></tr><tr><td>kInternalized</td><td>同一の文字列がすでに存在する場合、文字列は旧世代のヒープ空間に作成され、重複排除されるべきであることを示すヒントとして機能する。</td></tr></tbody></table><h2 id="stringクラス" tabindex="-1">Stringクラス <a class="header-anchor" href="#stringクラス" aria-label="Permalink to &quot;Stringクラス&quot;">​</a></h2><p>JavaScriptの文字列値 (ECMA-262, 4.3.17).</p><table><thead><tr><th>名前</th><th>説明</th></tr></thead><tbody><tr><td>Length()</td><td>この文字列に含まれる文字数（UTF-16 コードユニット）を返します。</td></tr><tr><td>Utf8Length()</td><td>UTF-8でエンコードされた文字列のバイト数を返します。</td></tr><tr><td>IsOneByte()</td><td>この文字列が1バイトのデータ、すなわちISO-8859-1のコードポイントしか含まないことが分かっているかどうかを返します。文字列を読み取らない。偽陰性の可能性がある。</td></tr><tr><td>ContainsOnlyOneByte()</td><td>この文字列が1バイトのデータ、すなわちISO-8859-1のコードポイントのみを含むかどうかを返します。場合によっては文字列全体を読み込みます。</td></tr><tr><td>Write()</td><td>16ビット文字コード</td></tr><tr><td>WriteOneByte()</td><td>1バイト文字</td></tr><tr><td>WriteUtf8</td><td>UTF-8エンコード文字</td></tr><tr><td>Empty</td><td>(inline/static) 長さ0の文字列。</td></tr><tr><td>IsExternal()</td><td>文字列が外部であれば真を返す。</td></tr><tr><td>IsExternalTwoByte()</td><td>文字列が外部かつ2バイトの場合に真を返す。</td></tr><tr><td>IsExternalOneByte()</td><td>文字列が外部かつ半角の場合に真を返す。</td></tr></tbody></table><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">constexpr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> kMaxLength </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::kApiSystemPointerSize </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">UNKNOWN_ENCODING</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TWO_BYTE_ENCODING</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ONE_BYTE_ENCODING</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Write the contents of the string to an external buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If no arguments are given, expects the buffer to be large</span></span>
<span class="line"><span style="color:#6A737D;">   * enough to hold the entire string and NULL terminator. Copies</span></span>
<span class="line"><span style="color:#6A737D;">   * the contents of the string and the NULL terminator into the</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * WriteUtf8 will not write partial UTF-8 sequences, preferring to stop</span></span>
<span class="line"><span style="color:#6A737D;">   * before the end of the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * Copies up to length characters into the output buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * Only null-terminates if there is enough space in the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">buffer</span><span style="color:#6A737D;"> The buffer into which the string will be copied.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">start</span><span style="color:#6A737D;"> The starting position within the string at which</span></span>
<span class="line"><span style="color:#6A737D;">   * copying begins.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">length</span><span style="color:#6A737D;"> The number of characters to copy from the string.  For</span></span>
<span class="line"><span style="color:#6A737D;">   *    WriteUtf8 the number of bytes in the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">nchars_ref</span><span style="color:#6A737D;"> The number of characters written, can be NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">options</span><span style="color:#6A737D;"> Various options that might affect performance of this or</span></span>
<span class="line"><span style="color:#6A737D;">   *    subsequent operations.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">\\return</span><span style="color:#6A737D;"> The number of characters copied to the buffer excluding the null</span></span>
<span class="line"><span style="color:#6A737D;">   *    terminator.  For WriteUtf8: The number of bytes copied to the buffer</span></span>
<span class="line"><span style="color:#6A737D;">   *    including the null terminator (if written).</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WriteOptions</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NO_OPTIONS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">HINT_MANY_WRITES_EXPECTED</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NO_NULL_TERMINATION</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PRESERVE_ONE_BYTE_NULL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // Used by WriteUtf8 to replace orphan surrogate code units with the</span></span>
<span class="line"><span style="color:#6A737D;">    // unicode replacement character. Needs to be set to guarantee valid UTF-8</span></span>
<span class="line"><span style="color:#6A737D;">    // output.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">REPLACE_INVALID_UTF8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">~ExternalStringResourceBase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * If a string is cacheable, the value returned by</span></span>
<span class="line"><span style="color:#6A737D;">     * ExternalStringResource::data() may be cached, otherwise it is not</span></span>
<span class="line"><span style="color:#6A737D;">     * expected to be stable beyond the current top-level task.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IsCacheable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Internally V8 will call this Dispose method when the external string</span></span>
<span class="line"><span style="color:#6A737D;">     * resource is no longer needed. The default implementation will use the</span></span>
<span class="line"><span style="color:#6A737D;">     * delete operator. This method can be overridden in subclasses to</span></span>
<span class="line"><span style="color:#6A737D;">     * control how allocated external string resources are disposed.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dispose</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * For a non-cacheable string, the value returned by</span></span>
<span class="line"><span style="color:#6A737D;">     * |ExternalStringResource::data()| has to be stable between |Lock()| and</span></span>
<span class="line"><span style="color:#6A737D;">     * |Unlock()|, that is the string must behave as is |IsCacheable()| returned</span></span>
<span class="line"><span style="color:#6A737D;">     * true.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * These two functions must be thread-safe, and can be called from anywhere.</span></span>
<span class="line"><span style="color:#6A737D;">     * They also must handle lock depth, in the sense that each can be called</span></span>
<span class="line"><span style="color:#6A737D;">     * several times, from different threads, and unlocking should only happen</span></span>
<span class="line"><span style="color:#6A737D;">     * when the balance of Lock() and Unlock() calls is 0.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lock</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Unlocks the string.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Unlock</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ExternalString</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">StringForwardingTable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">friend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ScopedExternalStringLock</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * An ExternalStringResource is a wrapper around a two-byte string</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer that resides outside V8&#39;s heap. Implement an</span></span>
<span class="line"><span style="color:#6A737D;">   * ExternalStringResource to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer.  Note that the string data must be immutable.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Override the destructor to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">     * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">~ExternalStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The string data from the underlying buffer. If the resource is cacheable</span></span>
<span class="line"><span style="color:#6A737D;">     * then data() must return the same value for all invocations.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The length of the string. That is, the number of two-byte characters.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Returns the cached data from the underlying buffer. This method can be</span></span>
<span class="line"><span style="color:#6A737D;">     * called only for cacheable resources (i.e. IsCacheable() == true) and only</span></span>
<span class="line"><span style="color:#6A737D;">     * after UpdateDataCache() was called.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cached_data</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">CheckCachedDataInvariants</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cached_data_;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Update {cached_data_} with the data from the underlying buffer. This can</span></span>
<span class="line"><span style="color:#6A737D;">     * be called only for cacheable resources.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateDataCache</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCachedDataInvariants</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> cached_data_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * An ExternalOneByteStringResource is a wrapper around an one-byte</span></span>
<span class="line"><span style="color:#6A737D;">   * string buffer that resides outside V8&#39;s heap. Implement an</span></span>
<span class="line"><span style="color:#6A737D;">   * ExternalOneByteStringResource to manage the life cycle of the</span></span>
<span class="line"><span style="color:#6A737D;">   * underlying buffer.  Note that the string data must be immutable</span></span>
<span class="line"><span style="color:#6A737D;">   * and that the data must be Latin-1 and not UTF-8, which would require</span></span>
<span class="line"><span style="color:#6A737D;">   * special treatment internally in the engine and do not allow efficient</span></span>
<span class="line"><span style="color:#6A737D;">   * indexing.  Use String::New or convert to 16 bit data for non-Latin1.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalOneByteStringResource</span></span>
<span class="line"><span style="color:#E1E4E8;">      : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Override the destructor to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">     * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">~ExternalOneByteStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The string data from the underlying buffer. If the resource is cacheable</span></span>
<span class="line"><span style="color:#6A737D;">     * then data() must return the same value for all invocations.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /** The number of Latin-1 characters in the string.*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Returns the cached data from the underlying buffer. If the resource is</span></span>
<span class="line"><span style="color:#6A737D;">     * uncacheable or if UpdateDataCache() was not called before, it has</span></span>
<span class="line"><span style="color:#6A737D;">     * undefined behaviour.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cached_data</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">CheckCachedDataInvariants</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cached_data_;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Update {cached_data_} with the data from the underlying buffer. This can</span></span>
<span class="line"><span style="color:#6A737D;">     * be called only for cacheable resources.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UpdateDataCache</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">protected:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ExternalOneByteStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCachedDataInvariants</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> cached_data_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * If the string is an external string, return the ExternalStringResourceBase</span></span>
<span class="line"><span style="color:#6A737D;">   * regardless of the encoding, otherwise return NULL.  The encoding of the</span></span>
<span class="line"><span style="color:#6A737D;">   * string is returned in encoding_out.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE ExternalStringResourceBase</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResourceBase</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Encoding</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> encoding_out) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the ExternalStringResource for an external string.  Returns</span></span>
<span class="line"><span style="color:#6A737D;">   * NULL if IsExternal() doesn&#39;t return true.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the ExternalOneByteStringResource for an external one-byte string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns NULL if IsExternalOneByte() doesn&#39;t return true.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalOneByteStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalOneByteStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Allocates a new string from a UTF-8 literal. This is equivalent to calling</span></span>
<span class="line"><span style="color:#6A737D;">   * String::NewFromUtf(isolate, &quot;...&quot;).ToLocalChecked(), but without the check</span></span>
<span class="line"><span style="color:#6A737D;">   * overhead.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * When called on a string literal containing &#39;\\0&#39;, the inferred length is the</span></span>
<span class="line"><span style="color:#6A737D;">   * length of the input array minus 1 (for the final &#39;\\0&#39;) and not the value</span></span>
<span class="line"><span style="color:#6A737D;">   * returned by strlen.</span></span>
<span class="line"><span style="color:#6A737D;">   **/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">N</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewFromUtf8Literal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">literal)[N],</span></span>
<span class="line"><span style="color:#E1E4E8;">      NewStringType type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewStringType</span><span style="color:#E1E4E8;">::kNormal) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static_assert</span><span style="color:#E1E4E8;">(N </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> kMaxLength, </span><span style="color:#9ECBFF;">&quot;String is too long&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewFromUtf8Literal</span><span style="color:#E1E4E8;">(isolate, literal, type, N </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from UTF-8 data. Only returns an empty value when</span></span>
<span class="line"><span style="color:#6A737D;">   * length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewFromUtf8</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> data,</span></span>
<span class="line"><span style="color:#E1E4E8;">      NewStringType type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewStringType</span><span style="color:#E1E4E8;">::kNormal, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from Latin-1 data.  Only returns an empty value</span></span>
<span class="line"><span style="color:#6A737D;">   * when length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewFromOneByte</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint8_t*</span><span style="color:#E1E4E8;"> data,</span></span>
<span class="line"><span style="color:#E1E4E8;">      NewStringType type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewStringType</span><span style="color:#E1E4E8;">::kNormal, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from UTF-16 data. Only returns an empty value when</span></span>
<span class="line"><span style="color:#6A737D;">   * length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewFromTwoByte</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> data,</span></span>
<span class="line"><span style="color:#E1E4E8;">      NewStringType type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewStringType</span><span style="color:#E1E4E8;">::kNormal, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new string by concatenating the left and the right strings</span></span>
<span class="line"><span style="color:#6A737D;">   * passed in as parameters.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">Concat</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">left</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">right</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new external string using the data defined in the given</span></span>
<span class="line"><span style="color:#6A737D;">   * resource. When the external string is no longer live on V8&#39;s heap the</span></span>
<span class="line"><span style="color:#6A737D;">   * resource will be disposed by calling its Dispose method. The caller of</span></span>
<span class="line"><span style="color:#6A737D;">   * this function should not otherwise delete or modify the resource. Neither</span></span>
<span class="line"><span style="color:#6A737D;">   * should the underlying buffer be deallocated or modified except through the</span></span>
<span class="line"><span style="color:#6A737D;">   * destructor of the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewExternalTwoByte</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> resource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Associate an external string resource with this string by transforming it</span></span>
<span class="line"><span style="color:#6A737D;">   * in place so that existing references to this string in the JavaScript heap</span></span>
<span class="line"><span style="color:#6A737D;">   * will use the external string resource. The external string resource&#39;s</span></span>
<span class="line"><span style="color:#6A737D;">   * character contents need to be equivalent to this string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the string has been changed to be an external string.</span></span>
<span class="line"><span style="color:#6A737D;">   * The string is not modified if the operation fails. See NewExternal for</span></span>
<span class="line"><span style="color:#6A737D;">   * information on the lifetime of the resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeExternal</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">resource</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new external string using the one-byte data defined in the given</span></span>
<span class="line"><span style="color:#6A737D;">   * resource. When the external string is no longer live on V8&#39;s heap the</span></span>
<span class="line"><span style="color:#6A737D;">   * resource will be disposed by calling its Dispose method. The caller of</span></span>
<span class="line"><span style="color:#6A737D;">   * this function should not otherwise delete or modify the resource. Neither</span></span>
<span class="line"><span style="color:#6A737D;">   * should the underlying buffer be deallocated or modified except through the</span></span>
<span class="line"><span style="color:#6A737D;">   * destructor of the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewExternalOneByte</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, ExternalOneByteStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> resource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Associate an external string resource with this string by transforming it</span></span>
<span class="line"><span style="color:#6A737D;">   * in place so that existing references to this string in the JavaScript heap</span></span>
<span class="line"><span style="color:#6A737D;">   * will use the external string resource. The external string resource&#39;s</span></span>
<span class="line"><span style="color:#6A737D;">   * character contents need to be equivalent to this string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the string has been changed to be an external string.</span></span>
<span class="line"><span style="color:#6A737D;">   * The string is not modified if the operation fails. See NewExternal for</span></span>
<span class="line"><span style="color:#6A737D;">   * information on the lifetime of the resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeExternal</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ExternalOneByteStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">resource</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if this string can be made external, given the encoding for</span></span>
<span class="line"><span style="color:#6A737D;">   * the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CanMakeExternal</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">encoding</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the strings values are equal. Same as JS ==/===.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Converts an object to a UTF-8-encoded character array.  Useful if</span></span>
<span class="line"><span style="color:#6A737D;">   * you want to print the object.  If conversion to a string fails</span></span>
<span class="line"><span style="color:#6A737D;">   * (e.g. due to an exception in the toString() method of the object)</span></span>
<span class="line"><span style="color:#6A737D;">   * then the length() method returns 0 and the * operator returns</span></span>
<span class="line"><span style="color:#6A737D;">   * NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Utf8Value</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Utf8Value</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">~Utf8Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> length_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Utf8Value</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Utf8Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Utf8Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> str_;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Converts an object to a two-byte (UTF-16-encoded) string.</span></span>
<span class="line"><span style="color:#6A737D;">   * If conversion to a string fails (eg. due to an exception in the toString()</span></span>
<span class="line"><span style="color:#6A737D;">   * method of the object) then the length() method returns 0 and the * operator</span></span>
<span class="line"><span style="color:#6A737D;">   * returns NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">~Value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">*</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str_; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> length_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">operator</span><span style="color:#B392F0;">=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">uint16_t*</span><span style="color:#E1E4E8;"> str_;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length_;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VerifyExternalStringResourceBase</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        </span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">encoding</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VerifyExternalStringResource</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResourceSlow</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResourceBaseSlow</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Encoding</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">encoding_out</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">NewFromUtf8Literal</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">literal</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                              </span><span style="color:#B392F0;">NewStringType</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">constexpr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> kMaxLength </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::kApiSystemPointerSize </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">UNKNOWN_ENCODING</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TWO_BYTE_ENCODING</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ONE_BYTE_ENCODING</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Write the contents of the string to an external buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If no arguments are given, expects the buffer to be large</span></span>
<span class="line"><span style="color:#6A737D;">   * enough to hold the entire string and NULL terminator. Copies</span></span>
<span class="line"><span style="color:#6A737D;">   * the contents of the string and the NULL terminator into the</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * WriteUtf8 will not write partial UTF-8 sequences, preferring to stop</span></span>
<span class="line"><span style="color:#6A737D;">   * before the end of the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * Copies up to length characters into the output buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * Only null-terminates if there is enough space in the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">buffer</span><span style="color:#6A737D;"> The buffer into which the string will be copied.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">start</span><span style="color:#6A737D;"> The starting position within the string at which</span></span>
<span class="line"><span style="color:#6A737D;">   * copying begins.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">length</span><span style="color:#6A737D;"> The number of characters to copy from the string.  For</span></span>
<span class="line"><span style="color:#6A737D;">   *    WriteUtf8 the number of bytes in the buffer.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">nchars_ref</span><span style="color:#6A737D;"> The number of characters written, can be NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">options</span><span style="color:#6A737D;"> Various options that might affect performance of this or</span></span>
<span class="line"><span style="color:#6A737D;">   *    subsequent operations.</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">\\return</span><span style="color:#6A737D;"> The number of characters copied to the buffer excluding the null</span></span>
<span class="line"><span style="color:#6A737D;">   *    terminator.  For WriteUtf8: The number of bytes copied to the buffer</span></span>
<span class="line"><span style="color:#6A737D;">   *    including the null terminator (if written).</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WriteOptions</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NO_OPTIONS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">HINT_MANY_WRITES_EXPECTED</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NO_NULL_TERMINATION</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PRESERVE_ONE_BYTE_NULL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // Used by WriteUtf8 to replace orphan surrogate code units with the</span></span>
<span class="line"><span style="color:#6A737D;">    // unicode replacement character. Needs to be set to guarantee valid UTF-8</span></span>
<span class="line"><span style="color:#6A737D;">    // output.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">REPLACE_INVALID_UTF8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">~ExternalStringResourceBase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * If a string is cacheable, the value returned by</span></span>
<span class="line"><span style="color:#6A737D;">     * ExternalStringResource::data() may be cached, otherwise it is not</span></span>
<span class="line"><span style="color:#6A737D;">     * expected to be stable beyond the current top-level task.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IsCacheable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Internally V8 will call this Dispose method when the external string</span></span>
<span class="line"><span style="color:#6A737D;">     * resource is no longer needed. The default implementation will use the</span></span>
<span class="line"><span style="color:#6A737D;">     * delete operator. This method can be overridden in subclasses to</span></span>
<span class="line"><span style="color:#6A737D;">     * control how allocated external string resources are disposed.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dispose</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * For a non-cacheable string, the value returned by</span></span>
<span class="line"><span style="color:#6A737D;">     * |ExternalStringResource::data()| has to be stable between |Lock()| and</span></span>
<span class="line"><span style="color:#6A737D;">     * |Unlock()|, that is the string must behave as is |IsCacheable()| returned</span></span>
<span class="line"><span style="color:#6A737D;">     * true.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * These two functions must be thread-safe, and can be called from anywhere.</span></span>
<span class="line"><span style="color:#6A737D;">     * They also must handle lock depth, in the sense that each can be called</span></span>
<span class="line"><span style="color:#6A737D;">     * several times, from different threads, and unlocking should only happen</span></span>
<span class="line"><span style="color:#6A737D;">     * when the balance of Lock() and Unlock() calls is 0.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lock</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Unlocks the string.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Unlock</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ExternalString</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">StringForwardingTable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ScopedExternalStringLock</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * An ExternalStringResource is a wrapper around a two-byte string</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer that resides outside V8&#39;s heap. Implement an</span></span>
<span class="line"><span style="color:#6A737D;">   * ExternalStringResource to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">   * buffer.  Note that the string data must be immutable.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Override the destructor to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">     * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">~ExternalStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The string data from the underlying buffer. If the resource is cacheable</span></span>
<span class="line"><span style="color:#6A737D;">     * then data() must return the same value for all invocations.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The length of the string. That is, the number of two-byte characters.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Returns the cached data from the underlying buffer. This method can be</span></span>
<span class="line"><span style="color:#6A737D;">     * called only for cacheable resources (i.e. IsCacheable() == true) and only</span></span>
<span class="line"><span style="color:#6A737D;">     * after UpdateDataCache() was called.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cached_data</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">CheckCachedDataInvariants</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cached_data_;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Update {cached_data_} with the data from the underlying buffer. This can</span></span>
<span class="line"><span style="color:#6A737D;">     * be called only for cacheable resources.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateDataCache</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCachedDataInvariants</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> cached_data_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * An ExternalOneByteStringResource is a wrapper around an one-byte</span></span>
<span class="line"><span style="color:#6A737D;">   * string buffer that resides outside V8&#39;s heap. Implement an</span></span>
<span class="line"><span style="color:#6A737D;">   * ExternalOneByteStringResource to manage the life cycle of the</span></span>
<span class="line"><span style="color:#6A737D;">   * underlying buffer.  Note that the string data must be immutable</span></span>
<span class="line"><span style="color:#6A737D;">   * and that the data must be Latin-1 and not UTF-8, which would require</span></span>
<span class="line"><span style="color:#6A737D;">   * special treatment internally in the engine and do not allow efficient</span></span>
<span class="line"><span style="color:#6A737D;">   * indexing.  Use String::New or convert to 16 bit data for non-Latin1.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalOneByteStringResource</span></span>
<span class="line"><span style="color:#24292E;">      : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Override the destructor to manage the life cycle of the underlying</span></span>
<span class="line"><span style="color:#6A737D;">     * buffer.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">~ExternalOneByteStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * The string data from the underlying buffer. If the resource is cacheable</span></span>
<span class="line"><span style="color:#6A737D;">     * then data() must return the same value for all invocations.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /** The number of Latin-1 characters in the string.*/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Returns the cached data from the underlying buffer. If the resource is</span></span>
<span class="line"><span style="color:#6A737D;">     * uncacheable or if UpdateDataCache() was not called before, it has</span></span>
<span class="line"><span style="color:#6A737D;">     * undefined behaviour.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cached_data</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">CheckCachedDataInvariants</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cached_data_;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Update {cached_data_} with the data from the underlying buffer. This can</span></span>
<span class="line"><span style="color:#6A737D;">     * be called only for cacheable resources.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UpdateDataCache</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ExternalOneByteStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCachedDataInvariants</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> cached_data_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * If the string is an external string, return the ExternalStringResourceBase</span></span>
<span class="line"><span style="color:#6A737D;">   * regardless of the encoding, otherwise return NULL.  The encoding of the</span></span>
<span class="line"><span style="color:#6A737D;">   * string is returned in encoding_out.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE ExternalStringResourceBase</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResourceBase</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Encoding</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> encoding_out) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the ExternalStringResource for an external string.  Returns</span></span>
<span class="line"><span style="color:#6A737D;">   * NULL if IsExternal() doesn&#39;t return true.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Get the ExternalOneByteStringResource for an external one-byte string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns NULL if IsExternalOneByte() doesn&#39;t return true.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalOneByteStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalOneByteStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Allocates a new string from a UTF-8 literal. This is equivalent to calling</span></span>
<span class="line"><span style="color:#6A737D;">   * String::NewFromUtf(isolate, &quot;...&quot;).ToLocalChecked(), but without the check</span></span>
<span class="line"><span style="color:#6A737D;">   * overhead.</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * When called on a string literal containing &#39;\\0&#39;, the inferred length is the</span></span>
<span class="line"><span style="color:#6A737D;">   * length of the input array minus 1 (for the final &#39;\\0&#39;) and not the value</span></span>
<span class="line"><span style="color:#6A737D;">   * returned by strlen.</span></span>
<span class="line"><span style="color:#6A737D;">   **/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">N</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewFromUtf8Literal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">literal)[N],</span></span>
<span class="line"><span style="color:#24292E;">      NewStringType type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewStringType</span><span style="color:#24292E;">::kNormal) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static_assert</span><span style="color:#24292E;">(N </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> kMaxLength, </span><span style="color:#032F62;">&quot;String is too long&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewFromUtf8Literal</span><span style="color:#24292E;">(isolate, literal, type, N </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from UTF-8 data. Only returns an empty value when</span></span>
<span class="line"><span style="color:#6A737D;">   * length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewFromUtf8</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> data,</span></span>
<span class="line"><span style="color:#24292E;">      NewStringType type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewStringType</span><span style="color:#24292E;">::kNormal, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from Latin-1 data.  Only returns an empty value</span></span>
<span class="line"><span style="color:#6A737D;">   * when length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewFromOneByte</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint8_t*</span><span style="color:#24292E;"> data,</span></span>
<span class="line"><span style="color:#24292E;">      NewStringType type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewStringType</span><span style="color:#24292E;">::kNormal, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /** Allocates a new string from UTF-16 data. Only returns an empty value when</span></span>
<span class="line"><span style="color:#6A737D;">   * length &gt; kMaxLength. **/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewFromTwoByte</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> data,</span></span>
<span class="line"><span style="color:#24292E;">      NewStringType type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewStringType</span><span style="color:#24292E;">::kNormal, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new string by concatenating the left and the right strings</span></span>
<span class="line"><span style="color:#6A737D;">   * passed in as parameters.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">Concat</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">left</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">right</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new external string using the data defined in the given</span></span>
<span class="line"><span style="color:#6A737D;">   * resource. When the external string is no longer live on V8&#39;s heap the</span></span>
<span class="line"><span style="color:#6A737D;">   * resource will be disposed by calling its Dispose method. The caller of</span></span>
<span class="line"><span style="color:#6A737D;">   * this function should not otherwise delete or modify the resource. Neither</span></span>
<span class="line"><span style="color:#6A737D;">   * should the underlying buffer be deallocated or modified except through the</span></span>
<span class="line"><span style="color:#6A737D;">   * destructor of the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewExternalTwoByte</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> resource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Associate an external string resource with this string by transforming it</span></span>
<span class="line"><span style="color:#6A737D;">   * in place so that existing references to this string in the JavaScript heap</span></span>
<span class="line"><span style="color:#6A737D;">   * will use the external string resource. The external string resource&#39;s</span></span>
<span class="line"><span style="color:#6A737D;">   * character contents need to be equivalent to this string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the string has been changed to be an external string.</span></span>
<span class="line"><span style="color:#6A737D;">   * The string is not modified if the operation fails. See NewExternal for</span></span>
<span class="line"><span style="color:#6A737D;">   * information on the lifetime of the resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeExternal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">resource</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new external string using the one-byte data defined in the given</span></span>
<span class="line"><span style="color:#6A737D;">   * resource. When the external string is no longer live on V8&#39;s heap the</span></span>
<span class="line"><span style="color:#6A737D;">   * resource will be disposed by calling its Dispose method. The caller of</span></span>
<span class="line"><span style="color:#6A737D;">   * this function should not otherwise delete or modify the resource. Neither</span></span>
<span class="line"><span style="color:#6A737D;">   * should the underlying buffer be deallocated or modified except through the</span></span>
<span class="line"><span style="color:#6A737D;">   * destructor of the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT MaybeLocal</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewExternalOneByte</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, ExternalOneByteStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> resource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Associate an external string resource with this string by transforming it</span></span>
<span class="line"><span style="color:#6A737D;">   * in place so that existing references to this string in the JavaScript heap</span></span>
<span class="line"><span style="color:#6A737D;">   * will use the external string resource. The external string resource&#39;s</span></span>
<span class="line"><span style="color:#6A737D;">   * character contents need to be equivalent to this string.</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the string has been changed to be an external string.</span></span>
<span class="line"><span style="color:#6A737D;">   * The string is not modified if the operation fails. See NewExternal for</span></span>
<span class="line"><span style="color:#6A737D;">   * information on the lifetime of the resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeExternal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ExternalOneByteStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">resource</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if this string can be made external, given the encoding for</span></span>
<span class="line"><span style="color:#6A737D;">   * the external string resource.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CanMakeExternal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;"> </span><span style="color:#E36209;">encoding</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns true if the strings values are equal. Same as JS ==/===.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringEquals</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Converts an object to a UTF-8-encoded character array.  Useful if</span></span>
<span class="line"><span style="color:#6A737D;">   * you want to print the object.  If conversion to a string fails</span></span>
<span class="line"><span style="color:#6A737D;">   * (e.g. due to an exception in the toString() method of the object)</span></span>
<span class="line"><span style="color:#6A737D;">   * then the length() method returns 0 and the * operator returns</span></span>
<span class="line"><span style="color:#6A737D;">   * NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">~Utf8Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str_; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str_; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> length_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Utf8Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> str_;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length_;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Converts an object to a two-byte (UTF-16-encoded) string.</span></span>
<span class="line"><span style="color:#6A737D;">   * If conversion to a string fails (eg. due to an exception in the toString()</span></span>
<span class="line"><span style="color:#6A737D;">   * method of the object) then the length() method returns 0 and the * operator</span></span>
<span class="line"><span style="color:#6A737D;">   * returns NULL.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">~Value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str_; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">*</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str_; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> length_; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Disallow copying and assigning.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">uint16_t*</span><span style="color:#24292E;"> str_;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length_;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VerifyExternalStringResourceBase</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                        </span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;"> </span><span style="color:#E36209;">encoding</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VerifyExternalStringResource</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResourceSlow</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResourceBaseSlow</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Encoding</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">encoding_out</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">NewFromUtf8Literal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                              </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">literal</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                              </span><span style="color:#6F42C1;">NewStringType</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Zero-length string specialization (templated string size includes</span></span>
<span class="line"><span style="color:#6A737D;">// terminator).</span></span>
<span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#F97583;">inline</span><span style="color:#E1E4E8;"> V8_WARN_UNUSED_RESULT Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">NewFromUtf8Literal</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">literal)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], NewStringType type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Empty</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Interface for iterating through all external resources in the heap.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExternalResourceVisitor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">~ExternalResourceVisitor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VisitExternalString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">string</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript symbol (ECMA-262 edition 6)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the description string of the symbol, or undefined if none.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">Description</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Create a symbol. If description is not empty, it will be used as the</span></span>
<span class="line"><span style="color:#6A737D;">   * description.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Access global symbol registry.</span></span>
<span class="line"><span style="color:#6A737D;">   * Note that symbols created this way are never collected, so</span></span>
<span class="line"><span style="color:#6A737D;">   * they should only be used for statically fixed properties.</span></span>
<span class="line"><span style="color:#6A737D;">   * Also, there is only one global name space for the descriptions used as</span></span>
<span class="line"><span style="color:#6A737D;">   * keys.</span></span>
<span class="line"><span style="color:#6A737D;">   * To minimize the potential for clashes, use qualified names as keys.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">For</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Retrieve a global symbol. Similar to |For|, but using a separate</span></span>
<span class="line"><span style="color:#6A737D;">   * registry that is not accessible by (and cannot clash with) JavaScript code.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">ForApi</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Well-known symbols</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetAsyncIterator</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetHasInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetIsConcatSpreadable</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetIterator</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetMatch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetReplace</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetSearch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetSplit</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetToPrimitive</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetToStringTag</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">GetUnscopables</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Symbol</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Symbol</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Symbol</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript number value (ECMA-262, 4.3.20)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Primitive</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Number</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Number</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a signed integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">NewFromUnsigned</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Integer</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a 32-bit signed integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Int32</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Int32</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Int32</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a 32-bit unsigned integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint32</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Integer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">uint32_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Uint32</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Uint32</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Uint32</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript BigInt value (https://tc39.github.io/proposal-bigint)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_EXPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;"> : </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Primitive</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">NewFromUnsigned</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new BigInt object using a specified sign bit and a</span></span>
<span class="line"><span style="color:#6A737D;">   * specified list of digits/words.</span></span>
<span class="line"><span style="color:#6A737D;">   * The resulting number is calculated as:</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * (-1)^sign_bit * (words[0] * (2^64)^0 + words[1] * (2^64)^1 + ...)</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MaybeLocal</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">NewFromWords</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sign_bit</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">word_count</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint64_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the value of this BigInt as an unsigned 64-bit integer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If \`lossless\` is provided, it will reflect whether the return value was</span></span>
<span class="line"><span style="color:#6A737D;">   * truncated or wrapped around. In particular, it is set to \`false\` if this</span></span>
<span class="line"><span style="color:#6A737D;">   * BigInt is negative.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">uint64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint64Value</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">bool*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">lossless</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the value of this BigInt as a signed 64-bit integer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If \`lossless\` is provided, it will reflect whether this BigInt was</span></span>
<span class="line"><span style="color:#6A737D;">   * truncated or not.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int64_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int64Value</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">bool*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">lossless</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nullptr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the number of 64-bit words needed to store the result of</span></span>
<span class="line"><span style="color:#6A737D;">   * ToWordsArray().</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WordCount</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Writes the contents of this BigInt to a specified memory location.</span></span>
<span class="line"><span style="color:#6A737D;">   * \`sign_bit\` must be provided and will be set to 1 if this BigInt is</span></span>
<span class="line"><span style="color:#6A737D;">   * negative.</span></span>
<span class="line"><span style="color:#6A737D;">   * \`*word_count\` has to be initialized to the length of the \`words\` array.</span></span>
<span class="line"><span style="color:#6A737D;">   * Upon return, it will be set to the actual number of words that would</span></span>
<span class="line"><span style="color:#6A737D;">   * be needed to store this BigInt (i.e. the return value of \`WordCount()\`).</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ToWordsArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sign_bit</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">word_count</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">uint64_t*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  V8_INLINE </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> BigInt</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> data) {</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">BigInt</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">BigInt</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckCast</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">v8</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Data</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">that</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Empty</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CheckInitialized</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  S</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetRootSlot</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kEmptyStringRootIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">FromSlot</span><span style="color:#E1E4E8;">(slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetExternalStringResource</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  A obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ValueHelper</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ValueAsAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  ExternalStringResource</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">IsExternalTwoByteString</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetInstanceType</span><span style="color:#E1E4E8;">(obj))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetIsolateForSandbox</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">    A value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ReadExternalPointerField</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">kExternalStringResourceTag</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">        isolate, obj, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kStringResourceOffset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">reinterpret_cast&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::ExternalStringResource</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResourceSlow</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">VerifyExternalStringResource</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ExternalStringResourceBase</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetExternalStringResourceBase</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Encoding</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">encoding_out</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  A obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ValueHelper</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ValueAsAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetInstanceType</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kStringRepresentationAndEncodingMask;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">encoding_out </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static_cast&lt;</span><span style="color:#E1E4E8;">Encoding</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(type </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kStringEncodingMask);</span></span>
<span class="line"><span style="color:#E1E4E8;">  ExternalStringResourceBase</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> resource;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kExternalOneByteRepresentationTag </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kExternalTwoByteRepresentationTag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetIsolateForSandbox</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#E1E4E8;">    A value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">ReadExternalPointerField</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">kExternalStringResourceTag</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">        isolate, obj, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kStringResourceOffset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">reinterpret_cast&lt;</span><span style="color:#E1E4E8;">ExternalStringResourceBase</span><span style="color:#F97583;">*&gt;</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetExternalStringResourceBaseSlow</span><span style="color:#E1E4E8;">(encoding_out);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">#ifdef</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">VerifyExternalStringResourceBase</span><span style="color:#E1E4E8;">(resource, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">encoding_out);</span></span>
<span class="line"><span style="color:#F97583;">#endif</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resource;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// --- Statics ---</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">V8_INLINE Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Primitive</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Undefined</span><span style="color:#E1E4E8;">(Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CheckInitialized</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  S</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetRootSlot</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kUndefinedValueRootIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Primitive</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">FromSlot</span><span style="color:#E1E4E8;">(slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">V8_INLINE Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Primitive</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Null</span><span style="color:#E1E4E8;">(Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CheckInitialized</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  S</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetRootSlot</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kNullValueRootIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Primitive</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">FromSlot</span><span style="color:#E1E4E8;">(slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">V8_INLINE Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">True</span><span style="color:#E1E4E8;">(Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CheckInitialized</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  S</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetRootSlot</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kTrueValueRootIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">FromSlot</span><span style="color:#E1E4E8;">(slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">V8_INLINE Local</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">False</span><span style="color:#E1E4E8;">(Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> isolate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">Internals</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">CheckInitialized</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">  S</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">GetRootSlot</span><span style="color:#E1E4E8;">(isolate, </span><span style="color:#B392F0;">I</span><span style="color:#E1E4E8;">::kFalseValueRootIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">&gt;::</span><span style="color:#B392F0;">FromSlot</span><span style="color:#E1E4E8;">(slot);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Local</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">::</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Isolate</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isolate</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">True</span><span style="color:#E1E4E8;">(isolate) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">False</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#6A737D;">  // namespace v8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#endif</span><span style="color:#6A737D;">  // INCLUDE_V8_PRIMITIVE_H_</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Zero-length string specialization (templated string size includes</span></span>
<span class="line"><span style="color:#6A737D;">// terminator).</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> V8_WARN_UNUSED_RESULT Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">NewFromUtf8Literal</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">literal)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], NewStringType type) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Empty</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Interface for iterating through all external resources in the heap.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExternalResourceVisitor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">~ExternalResourceVisitor</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VisitExternalString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">string</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript symbol (ECMA-262 edition 6)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the description string of the symbol, or undefined if none.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">Description</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Create a symbol. If description is not empty, it will be used as the</span></span>
<span class="line"><span style="color:#6A737D;">   * description.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">description</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Access global symbol registry.</span></span>
<span class="line"><span style="color:#6A737D;">   * Note that symbols created this way are never collected, so</span></span>
<span class="line"><span style="color:#6A737D;">   * they should only be used for statically fixed properties.</span></span>
<span class="line"><span style="color:#6A737D;">   * Also, there is only one global name space for the descriptions used as</span></span>
<span class="line"><span style="color:#6A737D;">   * keys.</span></span>
<span class="line"><span style="color:#6A737D;">   * To minimize the potential for clashes, use qualified names as keys.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">For</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">description</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Retrieve a global symbol. Similar to |For|, but using a separate</span></span>
<span class="line"><span style="color:#6A737D;">   * registry that is not accessible by (and cannot clash with) JavaScript code.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">ForApi</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">description</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Well-known symbols</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetAsyncIterator</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetHasInstance</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetIsConcatSpreadable</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetIterator</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetMatch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetReplace</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetSearch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetSplit</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetToPrimitive</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetToStringTag</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">GetUnscopables</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Symbol</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Symbol</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript number value (ECMA-262, 4.3.20)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Primitive</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Number</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Number</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a signed integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">NewFromUnsigned</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int64_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Integer</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a 32-bit signed integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Int32</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Int32</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Int32</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript value representing a 32-bit unsigned integer.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint32</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">uint32_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Uint32</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Uint32</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Uint32</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A JavaScript BigInt value (https://tc39.github.io/proposal-bigint)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_EXPORT</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Primitive</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int64_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">NewFromUnsigned</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint64_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Creates a new BigInt object using a specified sign bit and a</span></span>
<span class="line"><span style="color:#6A737D;">   * specified list of digits/words.</span></span>
<span class="line"><span style="color:#6A737D;">   * The resulting number is calculated as:</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * (-1)^sign_bit * (words[0] * (2^64)^0 + words[1] * (2^64)^1 + ...)</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MaybeLocal</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">NewFromWords</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sign_bit</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">word_count</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint64_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">words</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the value of this BigInt as an unsigned 64-bit integer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If \`lossless\` is provided, it will reflect whether the return value was</span></span>
<span class="line"><span style="color:#6A737D;">   * truncated or wrapped around. In particular, it is set to \`false\` if this</span></span>
<span class="line"><span style="color:#6A737D;">   * BigInt is negative.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">uint64_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint64Value</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">bool*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">lossless</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the value of this BigInt as a signed 64-bit integer.</span></span>
<span class="line"><span style="color:#6A737D;">   * If \`lossless\` is provided, it will reflect whether this BigInt was</span></span>
<span class="line"><span style="color:#6A737D;">   * truncated or not.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int64_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int64Value</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">bool*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">lossless</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the number of 64-bit words needed to store the result of</span></span>
<span class="line"><span style="color:#6A737D;">   * ToWordsArray().</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WordCount</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Writes the contents of this BigInt to a specified memory location.</span></span>
<span class="line"><span style="color:#6A737D;">   * \`sign_bit\` must be provided and will be set to 1 if this BigInt is</span></span>
<span class="line"><span style="color:#6A737D;">   * negative.</span></span>
<span class="line"><span style="color:#6A737D;">   * \`*word_count\` has to be initialized to the length of the \`words\` array.</span></span>
<span class="line"><span style="color:#6A737D;">   * Upon return, it will be set to the actual number of words that would</span></span>
<span class="line"><span style="color:#6A737D;">   * be needed to store this BigInt (i.e. the return value of \`WordCount()\`).</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ToWordsArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sign_bit</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">word_count</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">uint64_t*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">words</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  V8_INLINE </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> BigInt</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> data) {</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">BigInt</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckCast</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v8</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Data</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">that</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Empty</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CheckInitialized</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  S</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetRootSlot</span><span style="color:#24292E;">(isolate, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kEmptyStringRootIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">FromSlot</span><span style="color:#24292E;">(slot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetExternalStringResource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  A obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ValueHelper</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ValueAsAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  ExternalStringResource</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">IsExternalTwoByteString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetInstanceType</span><span style="color:#24292E;">(obj))) {</span></span>
<span class="line"><span style="color:#24292E;">    Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetIsolateForSandbox</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">    A value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ReadExternalPointerField</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">kExternalStringResourceTag</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">        isolate, obj, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kStringResourceOffset);</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">reinterpret_cast&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::ExternalStringResource</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResourceSlow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">VerifyExternalStringResource</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ExternalStringResourceBase</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetExternalStringResourceBase</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Encoding</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">encoding_out</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  A obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ValueHelper</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ValueAsAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetInstanceType</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kStringRepresentationAndEncodingMask;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">encoding_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;</span><span style="color:#24292E;">Encoding</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(type </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kStringEncodingMask);</span></span>
<span class="line"><span style="color:#24292E;">  ExternalStringResourceBase</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> resource;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kExternalOneByteRepresentationTag </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kExternalTwoByteRepresentationTag) {</span></span>
<span class="line"><span style="color:#24292E;">    Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetIsolateForSandbox</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">    A value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">ReadExternalPointerField</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">kExternalStringResourceTag</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">        isolate, obj, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kStringResourceOffset);</span></span>
<span class="line"><span style="color:#24292E;">    resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">reinterpret_cast&lt;</span><span style="color:#24292E;">ExternalStringResourceBase</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetExternalStringResourceBaseSlow</span><span style="color:#24292E;">(encoding_out);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">V8_ENABLE_CHECKS</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">VerifyExternalStringResourceBase</span><span style="color:#24292E;">(resource, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">encoding_out);</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resource;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// --- Statics ---</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">V8_INLINE Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Primitive</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Undefined</span><span style="color:#24292E;">(Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CheckInitialized</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  S</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetRootSlot</span><span style="color:#24292E;">(isolate, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kUndefinedValueRootIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Primitive</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">FromSlot</span><span style="color:#24292E;">(slot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">V8_INLINE Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Primitive</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Null</span><span style="color:#24292E;">(Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CheckInitialized</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  S</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetRootSlot</span><span style="color:#24292E;">(isolate, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kNullValueRootIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Primitive</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">FromSlot</span><span style="color:#24292E;">(slot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">V8_INLINE Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">True</span><span style="color:#24292E;">(Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CheckInitialized</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  S</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetRootSlot</span><span style="color:#24292E;">(isolate, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kTrueValueRootIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">FromSlot</span><span style="color:#24292E;">(slot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">V8_INLINE Local</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">False</span><span style="color:#24292E;">(Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> isolate) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">Internals</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">CheckInitialized</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">  S</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">GetRootSlot</span><span style="color:#24292E;">(isolate, </span><span style="color:#6F42C1;">I</span><span style="color:#24292E;">::kFalseValueRootIndex);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">FromSlot</span><span style="color:#24292E;">(slot);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Local</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Isolate</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isolate</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">True</span><span style="color:#24292E;">(isolate) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">False</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">  // namespace v8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#endif</span><span style="color:#6A737D;">  // INCLUDE_V8_PRIMITIVE_H_</span></span></code></pre></div>`,22),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{D as __pageData,d as default};
