import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.92ce8a2a.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_components_to_time.md","filePath":"translation/duktape/api/duk_components_to_time.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/api/duk_components_to_time.md"},l=o(`<h2 id="duk-components-to-time" tabindex="-1">duk_components_to_time() <a class="header-anchor" href="#duk-components-to-time" aria-label="Permalink to &quot;duk_components_to_time()&quot;">​</a></h2><p>2.0.0 time</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">duk_double_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_components_to_time</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, duk_time_components </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">comp</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">duk_double_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_components_to_time</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, duk_time_components </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">comp</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>(バリュースタックに影響なし。)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>UTCで解釈される構成要素（年、月、日、など）を時間値に変換します。comp-&gt;weekday 引数は変換の際に無視されます。構成要素の値が無効な場合、エラーが投げられます。</p><p>ECMAScriptのDate.UTC()組み込みと若干の違いがあります。</p><p>2桁の年号を特別に扱うことはありません。例えば、Date.UTC(99, 0, 1)は1999-01-01として解釈されます。comp-&gt;time が 99 の場合、99 年と解釈されます。 ミリ秒成分は分数（サブミリ秒の分解能）が許され、結果として得られる時刻の値に分数を持たせることができます。 ECMAScript のプリミティブと同様に、成分はその自然な範囲を超えることができ、正規化されます。例えば、comp-&gt;minutesを120と指定すると、時間値に2時間追加されると解釈されます。成分はIEEE doublesで表現され、大きな値や負の値を使用できるようにします。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">duk_time_components comp;</span></span>
<span class="line"><span style="color:#79B8FF;">duk_double_t</span><span style="color:#E1E4E8;"> time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">comp</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(comp));</span><span style="color:#6A737D;">  /* good practice even if fully initialized */</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2016</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.month </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  /* 0-based, 1=January */</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.day </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">    /* 1-based: second of January */</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.hours </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.minutes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.seconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.milliseconds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6.0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  /* allows sub-millisecond resolution */</span></span>
<span class="line"><span style="color:#E1E4E8;">comp.weekday </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">  /* ignored */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_components_to_time</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">comp</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2016-01-02 03:04:05.006Z -&gt; </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">) </span><span style="color:#FFAB70;">time</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">duk_time_components comp;</span></span>
<span class="line"><span style="color:#005CC5;">duk_double_t</span><span style="color:#24292E;"> time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">comp</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(comp));</span><span style="color:#6A737D;">  /* good practice even if fully initialized */</span></span>
<span class="line"><span style="color:#24292E;">comp.year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">comp.month </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  /* 0-based, 1=January */</span></span>
<span class="line"><span style="color:#24292E;">comp.day </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">    /* 1-based: second of January */</span></span>
<span class="line"><span style="color:#24292E;">comp.hours </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">comp.minutes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">comp.seconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">comp.milliseconds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6.0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  /* allows sub-millisecond resolution */</span></span>
<span class="line"><span style="color:#24292E;">comp.weekday </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  /* ignored */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_components_to_time</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">comp</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2016-01-02 03:04:05.006Z -&gt; </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">) </span><span style="color:#E36209;">time</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_time_to_components</p>`,14),e=[l];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{u as __pageData,_ as default};
