import{_ as u,D as n,o as m,c as v,k as o,a as p,I as s,w as a,R as i}from"./chunks/framework.c2IVng1e.js";const w=JSON.parse('{"title":"HSP3Dish","description":"","frontmatter":{},"headers":[],"relativePath":"translation/hsp/hsp3dish.md","filePath":"translation/hsp/hsp3dish.md","lastUpdated":1676126774000}'),_={name:"translation/hsp/hsp3dish.md"},b=i(`<h1 id="hsp3dish" tabindex="-1">HSP3Dish <a class="header-anchor" href="#hsp3dish" aria-label="Permalink to &quot;HSP3Dish&quot;">​</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li></ul><p><strong>グループ</strong>:</p><p>拡張入出力制御命令</p><h2 id="setreq" tabindex="-1">setreq <a class="header-anchor" href="#setreq" aria-label="Permalink to &quot;setreq {#setreq}&quot;">​</a></h2><p>システムリクエスト設定</p><p><strong>パラメーター</strong>:</p><p>type,val type(0) : 設定タイプ(SYSREQ_???) val(0) : 設定する値</p><p><strong>説明</strong>:</p><p>HSP3Dishランタイムに対して様々なシステム設定を行ないます。 設定タイプ名で指定できるのは以下のシンボルです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	設定タイプ名      読み書き(*)   内容</span></span>
<span class="line"><span>------------------------------------------------------------------------</span></span>
<span class="line"><span>	SYSREQ_CLSMODE        RW        背景のクリアフラグ</span></span>
<span class="line"><span>	SYSREQ_CLSCOLOR       RW        背景クリア色</span></span>
<span class="line"><span>	SYSREQ_TIMER          R         ミリ秒単位のタイマー値</span></span>
<span class="line"><span>	SYSREQ_PLATFORM       R         HSP3Dishを実行しているプラットフォーム</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	(*)項目ごとに、読み(R)書き(W)の可否が異なります</span></span></code></pre></div><p>・SYSREQ_CLSMODE、SYSREQ_CLSCOLOR</p><p>redraw 0による描画開始時に画面をクリアするかどうかを設定します。 SYSREQ_CLSMODEに1を設定した場合はクリア、0の場合はクリアを行ないません。 スクリプト内で画面のクリアを行なっている場合は、システム側で背景クリアをしない方が 処理速度の向上につながります。 SYSREQ_CLSCOLORでクリアする際の色コードを設定することができます。 色コードは、RGB24bit($rrggbb)を1つにした数値で設定します。</p><p>・SYSREQ_TIMER</p><p>ミリ秒単位のタイマー値を返します。 プラットフォームごとに返される値は異なりますが、1ミリ秒につき1ずつ値が加算されていきます。</p><p>・SYSREQ_PLATFORM</p><p>以下のHSP3Dishプラットフォーム値を返します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	マクロ名            値  内容</span></span>
<span class="line"><span>	-------------------------------------------</span></span>
<span class="line"><span>	PLATFORM_WINDOWS    0   Windows版</span></span>
<span class="line"><span>	PLATFORM_IOS        1   iOS版</span></span>
<span class="line"><span>	PLATFORM_ANDROID    2   android版</span></span>
<span class="line"><span>	PLATFORM_WEBGL      3   hsp3dish.js(WebGL/JavaScript)版</span></span>
<span class="line"><span>	PLATFORM_LINUX      4   Linux版</span></span>
<span class="line"><span>	PLATFORM_RASPBIAN   5   Raspberry Pi(raspbian)版</span></span></code></pre></div><p><strong>参照</strong>:</p><p>getreq</p><h2 id="getreq" tabindex="-1">getreq <a class="header-anchor" href="#getreq" aria-label="Permalink to &quot;getreq {#getreq}&quot;">​</a></h2><p>システムリクエスト取得</p><p><strong>パラメーター</strong>:</p><p>var,type var : 結果が代入される変数名 type : 設定タイプ(SYSREQ_???)</p><p><strong>説明</strong>:</p><p>HSP3Dishランタイムが保持するシステム設定を取得して変数に代入します。 設定タイプ名で指定できる名称は、setreq命令と同様です。</p><p><strong>参照</strong>:</p><p>setreq</p><h2 id="gfilter" tabindex="-1">gfilter <a class="header-anchor" href="#gfilter" aria-label="Permalink to &quot;gfilter {#gfilter}&quot;">​</a></h2><p>テクスチャ補間の設定</p><p><strong>パラメーター</strong>:</p><p>type type : 設定タイプ(FILTER_???)</p><p><strong>説明</strong>:</p><p>HSP3Dishランタイムが描画を行なう際の、テクスチャ補間(フィルタリング)の設定を行ないます。 設定タイプ名で指定できる名称は、以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	マクロ名        値      内容</span></span>
<span class="line"><span>	-------------------------------------------</span></span>
<span class="line"><span>	FILTER_NONE     0       補間なし(NEAREST)</span></span>
<span class="line"><span>	FILTER_LINEAR   1       直線補間(LINEAR)</span></span>
<span class="line"><span>	FILTER_LINEAR2  2       エリア補間(高度な補間処理)</span></span></code></pre></div><p>フィルタリングの設定により、画像の拡大・縮小時のドット補間方法を 選ぶことができます。FILTER_NONEを指定することで、補間なし(ニアレスト) の状態になります。FILTER_LINEARは、直線(リニア)補間、FILTER_LINEAR2は より高度な補間方法(バイリニアなど)を選択します。 gfilter命令の設定は、以降のすべての描画命令に適用されます。 また、「redraw 0」による画面クリア時には、フィルタリング設定は FILTER_NONEにリセットされます。</p><p><strong>参照</strong>:</p><p>gcopy grotate gsquare celput</p><h2 id="mtlist" tabindex="-1">mtlist <a class="header-anchor" href="#mtlist" aria-label="Permalink to &quot;mtlist {#mtlist}&quot;">​</a></h2><p>ポイントIDリスト取得</p><p><strong>パラメーター</strong>:</p><p>var var : 結果が代入される変数名</p><p><strong>説明</strong>:</p><p>現在タッチされている情報を持つポイントIDリストを取得します。 ポイントIDリストは、複数のポイントIDを返すもので、マルチタッチによる複数のポイントを含む情報になります。 mtlist命令が実行されると、その時点で押されている(触れている)すべてのポイントID(整数値)を、varで指定した変数に配列として代入します。 たとえば、ID0とID2、ID3の３つの情報があれば、var(0)に0、var(1)に2、var(2)に3という値が代入されることになります。 代入されたポイントIDの数は、システム変数statに返されます。 この命令で得られたポイントIDを使用して、mtinfo命令で詳細なタッチ情報を取得することができます。 マルチタッチの情報を取得するためには、それぞれのデバイスでマルチタッチの設定を有効にする必要があります。 また、Windows上では、Windows7以降のマルチタッチに対応したデバイスが必要になります。</p><p><strong>参照</strong>:</p><p>mtinfo</p><h2 id="mtinfo" tabindex="-1">mtinfo <a class="header-anchor" href="#mtinfo" aria-label="Permalink to &quot;mtinfo {#mtinfo}&quot;">​</a></h2><p>タッチ情報取得</p><p><strong>パラメーター</strong>:</p><p>var,id var : 結果が代入される変数名 id(0): ポイントID</p><p><strong>説明</strong>:</p><p>指定されたポイントIDに関連付けられたタッチ情報を取得します。 タッチ情報は、varで指定した変数に配列として代入されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	要素値  内容</span></span>
<span class="line"><span>	-------------------------------------------</span></span>
<span class="line"><span>	  0     タッチ状態(1=ON/0=OFF)</span></span>
<span class="line"><span>	  1     タッチされたX座標</span></span>
<span class="line"><span>	  2     タッチされたY座標</span></span>
<span class="line"><span>	  3     タッチ識別用ID</span></span></code></pre></div><p>つまり、var(1)にはタッチされたX座標が、var(0)にはタッチの状態(1ならば押されている)が代入されます。 varで指定された変数は必ず整数型の配列変数として初期化されます。 var(3)のタッチ識別用IDは、他のタッチと識別するための整数値です。この値は、デバイスごとに異なります。</p><p><strong>参照</strong>:</p><p>mtlist</p><h2 id="devinfo" tabindex="-1">devinfo <a class="header-anchor" href="#devinfo" aria-label="Permalink to &quot;devinfo {#devinfo}&quot;">​</a></h2><p>デバイス情報文字列取得</p><p><strong>パラメーター</strong>:</p><p>var,&quot;name&quot; var : 結果が代入される変数名 &quot;name&quot; : デバイス情報名</p><p><strong>説明</strong>:</p><p>特定のOS、及びデバイスに依存した情報を取得します。 文字列&quot;name&quot;で示された情報を、varで指定した変数に代入します。(代入される情報は文字列となります。) 実行後に、正しく情報が取得された場合は、システム変数statが0以上になります。 情報が存在しないか、エラーが発生した場合はシステム変数statがマイナスの値となります。</p><p><strong>参照</strong>:</p><p>devinfoi</p><h2 id="devinfoi" tabindex="-1">devinfoi <a class="header-anchor" href="#devinfoi" aria-label="Permalink to &quot;devinfoi {#devinfoi}&quot;">​</a></h2><p>デバイス情報値取得</p><p><strong>パラメーター</strong>:</p><p>var,&quot;name&quot; var : 結果が代入される変数名 &quot;name&quot; : デバイス情報名</p><p><strong>説明</strong>:</p><p>特定のOS、及びデバイスに依存した情報を取得します。 文字列&quot;name&quot;で示された情報を、varで指定した変数に代入します。(代入される情報は整数型の配列となります。) 実行後に、正しく情報が取得された場合は、システム変数statが0以上になります。 情報が存在しないか、エラーが発生した場合はシステム変数statがマイナスの値となります。</p><p><strong>参照</strong>:</p><p>devinfo</p><h2 id="devprm" tabindex="-1">devprm <a class="header-anchor" href="#devprm" aria-label="Permalink to &quot;devprm {#devprm}&quot;">​</a></h2><p>デバイス制御用のパラメーター設定</p><p><strong>パラメーター</strong>:</p><p>&quot;name&quot;,&quot;value&quot; &quot;name&quot; : パラメーター名を示す文字列 &quot;value&quot; : 設定する文字列</p><p><strong>説明</strong>:</p><p>devcontrol命令によりデバイス制御する際のパラメーター(付加情報)を設定します。 実行後に、正しく実行が行なわれた場合は、システム変数statが0以上の値になります。 パラメーターが存在しないか、エラーが発生した場合はシステム変数statがマイナスの値となります。</p><p><strong>参照</strong>:</p><p>devcontrol</p><h2 id="devcontrol" tabindex="-1">devcontrol <a class="header-anchor" href="#devcontrol" aria-label="Permalink to &quot;devcontrol {#devcontrol}&quot;">​</a></h2><p>デバイス制御を実行する</p><p><strong>パラメーター</strong>:</p><p>&quot;command&quot;,p1,p2,p3 &quot;command&quot; : コマンド名を示す文字列 p1(0) : 制御パラメーター1 p2(0) : 制御パラメーター2 p3(0) : 制御パラメーター3</p><p><strong>説明</strong>:</p><p>特定のOS、及びデバイスに依存したデバイス制御を実行します。 実行後に、正しく実行が行なわれた場合は、システム変数statが0以上の値になります。 パラメーターが存在しないか、エラーが発生した場合はシステム変数statがマイナスの値となります。</p><p><strong>参照</strong>:</p><p>devprm</p><h2 id="setcls" tabindex="-1">setcls <a class="header-anchor" href="#setcls" aria-label="Permalink to &quot;setcls {#setcls}&quot;">​</a></h2><p>画面クリア設定</p><p><strong>グループ</strong>:</p><p>拡張マルチメディア制御命令</p><p><strong>パラメーター</strong>:</p><p>mode,color,tex mode(0) : 画面クリアのモード color(0) : 画面クリア色(24bitRGBコード)</p><p><strong>説明</strong>:</p><p>redraw 0による画面初期化時に行なわれる画面クリアのための設定を行ないます。 mode値の設定により、画面クリアを行なうためのモードを設定します。 1を設定した場合はクリア、0の場合はクリアを行ないません。 スクリプト内で画面のクリアを行なっている場合は、システム側で背景クリアをしない方が処理速度の向上につながります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	モード値  内容</span></span>
<span class="line"><span>	------------------------------------------------------</span></span>
<span class="line"><span>	    0     画面クリアを行なわない</span></span>
<span class="line"><span>	    1     画面クリアを行なう</span></span></code></pre></div><p>colorでクリアする際の色を設定することができます。色は、24bitRGBコード($rrggbb)の数値で設定します。</p><p><strong>参照</strong>:</p><p>redraw</p><h2 id="celputm" tabindex="-1">celputm <a class="header-anchor" href="#celputm" aria-label="Permalink to &quot;celputm {#celputm}&quot;">​</a></h2><p>複数のセルをまとめて描画</p><p><strong>グループ</strong>:</p><p>拡張マルチメディア制御命令</p><p><strong>パラメーター</strong>:</p><p>vxpos,vypos,vcelid,bufid,count vxpos : 表示X座標が格納された整数型配列変数名 vypos : 表示Y座標が格納された整数型配列変数名 vcelid : セルIDが格納された整数型配列変数名 bufid(0) : セルが格納されているバッファID count(1) : 配列変数から取り出す項目数</p><p><strong>説明</strong>:</p><p>整数型の配列変数に代入された座標、セルIDをもとにcelputと同様の表示を配列要素ごとに実行します。 配列に保存された複数の項目について、一度に処理が行なわれるため効率化と高速化につながります。 countで配列変数から取り出す項目の数を指定します。配列変数からは、要素0から順番に値が取り出されます。 vxposにはX座標、vyposにはY座標、vcelidにはセルIDが代入されている必要があります。 セルIDがマイナス値の場合は、描画は行なわれません。 celputm命令の実行後、実際に表示されたセルの数がシステム変数statに代入されます。</p><p><strong>参照</strong>:</p><p>celput</p><h2 id="httpload" tabindex="-1">httpload <a class="header-anchor" href="#httpload" aria-label="Permalink to &quot;httpload {#httpload}&quot;">​</a></h2><p>http通信の開始</p><p><strong>グループ</strong>:</p><p>拡張入出力制御命令</p><p><strong>パラメーター</strong>:</p><p>&quot;url&quot;,&quot;postdata&quot; &quot;url&quot; : リクエストを行なうファイル名 &quot;postdata&quot; : POSTを行なう際の文字列データ</p><p><strong>説明</strong>:</p><p>指定されたURLに対して、http通信を開始します。 この命令は、通信のリクエストを開始するだけで、すぐに結果は取得されません。 通信の結果は、httpinfo命令を使用して正しくデータを受信したことを確認した上で、取得する必要があります。</p><p>httploadは、通常は&quot;url&quot;の指定でリクエストを行なうURLスキーム(「<a href="http://www.onionsoft.net/about.html%E3%80%8D%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E6%96%87%E5%AD%97%E5%88%97" target="_blank" rel="noreferrer">http://www.onionsoft.net/about.html」のような文字列</a>)を指定することで、HTTP通信を開始します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>;例:</span></span>
<span class="line"><span>;	URLを指定して通信を開始する</span></span>
<span class="line"><span>httpload &quot;http://www.onionsoft.net/about.html&quot;</span></span></code></pre></div><p>CGIやWebAPIなどにアクセスするために、POST形式で通信を行なう場合は、&quot;postdata&quot;にパラメーター文字列を指定してください。 (&quot;postdata&quot;の指定を省略した場合は、通常のGET形式によるHTTP通信が行なわれます。)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>;例:</span></span>
<span class="line"><span>;	URLを指定してPOST形式の通信を開始する</span></span>
<span class="line"><span>httpload &quot;http://www.onionsoft.net/hsp/beta/betabbs.cgi&quot;,&quot;mode=find&amp;cond=and&amp;log=0&amp;word=script&quot;</span></span></code></pre></div><p>POST形式の通信は、&quot;postdata&quot;の形式や仕様については、CGIやhttpリクエストについての知識がある人に向けて用意されているものです。 httpload命令が実行された後は、システム変数statにリクエスト処理が行なわれたかを示す数値が代入されます。 システム変数statが、0の場合は正しくリクエストが完了しています。システム変数statが、0以外の場合は、エラーによりリクエストができなかったことを示しています。 httpload命令で正常にhttp通信を開始した後は、httpinfo命令による受信確認とデータ取得処理をスクリプト側で行なう必要があります。 。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>;例:</span></span>
<span class="line"><span>	;	URLを指定して通信を開始する</span></span>
<span class="line"><span>	httpload &quot;http://www.onionsoft.net/about.html&quot;</span></span>
<span class="line"><span>	if stat : goto *bad	; 正しくリクエストができなかった</span></span>
<span class="line"><span>*main</span></span>
<span class="line"><span>	;	結果待ちのためのループ</span></span>
<span class="line"><span>	httpinfo res,HTTPINFO_MODE		; 現在のモードを取得</span></span>
<span class="line"><span>	if res = HTTPMODE_READY : goto *ok	; 通信が終了した</span></span>
<span class="line"><span>	if res &lt;= HTTPMODE_NONE : goto *bad	; エラーが発生した</span></span>
<span class="line"><span>	await 50				; 時間待ちを行なう</span></span>
<span class="line"><span>	goto *main</span></span>
<span class="line"><span>*bad</span></span>
<span class="line"><span>	;	エラー</span></span>
<span class="line"><span>	httpinfo estr,HTTPINFO_ERROR		; エラー文字列を取得する</span></span>
<span class="line"><span>	dialog &quot;ERROR &quot;+estr</span></span>
<span class="line"><span>	stop</span></span>
<span class="line"><span>*ok</span></span>
<span class="line"><span>	;	完了</span></span>
<span class="line"><span>	httpinfo buf,HTTPINFO_DATA		; 結果データを取得する</span></span>
<span class="line"><span>	httpinfo size,HTTPINFO_SIZE		; データサイズを取得する</span></span></code></pre></div><p>http通信によって取得されるデータは、変数が持つメモリに格納されます。 大きなファイルを取得した場合は、そのサイズだけメモリが消費するので注意してください。 あくまでも、メモリ上に取得できる範囲のサイズを想定した簡易的な通信の仕組みであることをご理解の上使用してください。 Windows上であれば、HSPINETプラグインにより、さらに詳細なHTTP通信を行なうことが可能です。</p><p><strong>参照</strong>:</p><p>httpinfo</p><h2 id="httpinfo" tabindex="-1">httpinfo <a class="header-anchor" href="#httpinfo" aria-label="Permalink to &quot;httpinfo {#httpinfo}&quot;">​</a></h2><p>http通信の情報を取得</p><p><strong>グループ</strong>:</p><p>拡張入出力制御命令</p><p><strong>パラメーター</strong>:</p><p>p1,p2 p1 : データが代入される変数 p2(0) : データの種別ID</p><p><strong>説明</strong>:</p><p>http通信に関する情報を取得します。 httpload命令による、http通信を行なった結果などを取得することができます。 p2で指定された取得モードに対応する内容を、p1で指定された変数に代入します。 取得モードの値は、以下の通りです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	  種別ID              内容</span></span>
<span class="line"><span>	------------------------------------------------------</span></span>
<span class="line"><span>	HTTPINFO_MODE 0       現在の通信モード</span></span>
<span class="line"><span>	HTTPINFO_SIZE 1       データサイズ</span></span>
<span class="line"><span>	HTTPINFO_DATA 16      取得データ(*)</span></span>
<span class="line"><span>	HTTPINFO_ERROR 17     エラー文字列(*)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(*)の項目は、文字列型変数として代入されます。</span></span></code></pre></div><p>受信データ(HTTPINFO_DATA)の読み出しを行なうと、受信データの内容はクリアされるので注意してください。 無効な種別IDが指定された場合は、0または&quot;&quot;(空の文字列)が返されます。</p><p>通信モードの値は、以下の内容になっています。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	  通信モード値        内容</span></span>
<span class="line"><span>	------------------------------------------------------</span></span>
<span class="line"><span>	HTTPMODE_NONE         通信初期化エラー</span></span>
<span class="line"><span>	HTTPMODE_READY        通信可能状態</span></span>
<span class="line"><span>	HTTPMODE_REQUEST      リクエスト通信準備</span></span>
<span class="line"><span>	HTTPMODE_SEND         リクエスト送信</span></span>
<span class="line"><span>	HTTPMODE_DATAWAIT     通信結果待機中</span></span>
<span class="line"><span>	HTTPMODE_DATAEND      通信終了</span></span>
<span class="line"><span>	HTTPMODE_ERROR        エラー発生</span></span></code></pre></div><p><strong>参照</strong>:</p><p>httpload</p><h2 id="gmulcolor" tabindex="-1">gmulcolor <a class="header-anchor" href="#gmulcolor" aria-label="Permalink to &quot;gmulcolor {#gmulcolor}&quot;">​</a></h2><p>テクスチャ乗算値の設定</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3 p1,p2,p3=0〜255(255) : 色コード（R,G,Bの輝度）</p><p><strong>説明</strong>:</p><p>画像(テクスチャ)コピーを行なう際のカラー乗算値を指定します。 p1,p2,p3がそれぞれ、R,G,Bの輝度になります。 gcopy,gzoom,celput,grotate(画像使用時)などでコピーされる画像に対して、指定したR,G,B値が乗算されます。 初期値は、RGBそれぞれ255が指定されています。テクスチャ乗算値を設定することにより、元の画像の色を変化させることができます。 画像コピーの際に、gmode命令で指定されるコピーモードが0または1(アルファチャンネルを反映しない)の場合は、テクスチャ乗算値は無効になるので注意してください。 テクスチャ乗算値は、mes命令による文字の描画、及びgsquare命令には反映されません。また、boxf,line命令など単色の描画には反映されません。</p><p><strong>参照</strong>:</p><p>color gcopy gzoom grotate gsquare celput</p><h2 id="viewcalc" tabindex="-1">viewcalc <a class="header-anchor" href="#viewcalc" aria-label="Permalink to &quot;viewcalc {#viewcalc}&quot;">​</a></h2><p>描画時の座標変換を設定</p><p><strong>パラメーター</strong>:</p><p>p1,p2,p3,p4,p5 p1(0) : 設定モード p2(0.0) : パラメーター1(実数) p3(0.0) : パラメーター2(実数) p4(0.0) : パラメーター3(実数) p5(0.0) : パラメーター4(実数)</p><p><strong>説明</strong>:</p><p>2D描画時のX,Y座標に任意の計算を適用します。 これにより、描画される表示物全体のスケーリングや移動、回転などを行うことができます。 p1パラメーターで設定モードを指定します。 設定モードにより、以降の設定される内容が変わります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	マクロ名            値   内容</span></span>
<span class="line"><span>	-----------------------------------------------------</span></span>
<span class="line"><span>	vptype_off           0   座標変換なし(デフォルト)</span></span>
<span class="line"><span>	vptype_translate     1   移動パラメーターを指定</span></span>
<span class="line"><span>	vptype_rotate        2   回転パラメーターを指定</span></span>
<span class="line"><span>	vptype_scale         3   スケールパラメーターを指定</span></span>
<span class="line"><span>	vptype_3dmatrix      4   4×4マトリクスによる座標変換</span></span>
<span class="line"><span>	vptype_2d            5   2D座標変換を設定</span></span>
<span class="line"><span>	vptype_3d            6   3D座標変換を設定</span></span></code></pre></div><p>vptype_2dは、基本的な2D座標変換を適用します。 パラメーター1〜3で、X,Yのスケール(倍率)、回転角度(ラジアン単位)を設定することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	viewcalc vptype_translate, 移動X, 移動Y</span></span>
<span class="line"><span>	viewcalc vptype_2d, スケールX, スケールY, 回転角度(ラジアン)</span></span></code></pre></div><p>vptype_3dは、3D空間上にマッピングして描画を適用します。 移動、回転、スケールそれぞれのX,Y,Z値を指定することができます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	viewcalc vptype_translate, 移動X, 移動Y, 移動Z</span></span>
<span class="line"><span>	viewcalc vptype_rotate, 回転X, 回転Y, 回転Z</span></span>
<span class="line"><span>	viewcalc vptype_scale, スケールX, スケールY, スケールZ</span></span>
<span class="line"><span>	viewcalc vptype_3d, カメラ角度(FOV), NearZ値, FarZ値</span></span></code></pre></div><p>vptype_3dmatrixは、4×4の行列(マトリクス)を指定して座標変換を行います。 ユーザー自身でマトリクスを作成する場合に使用することができます。 4×4のm00〜m33までのパラメーターを以下のように指定します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	viewcalc vptype_translate, m00, m01, m02, m03</span></span>
<span class="line"><span>	viewcalc vptype_rotate, m10, m11, m12, m13</span></span>
<span class="line"><span>	viewcalc vptype_scale, m20, m21, m22, m23</span></span>
<span class="line"><span>	viewcalc vptype_3dmatrix, m30, m31, m32, m33</span></span></code></pre></div><p>viewcalc命令を設定した以降の描画に、座標変換が適用されます。 画面の初期化時は、座標変換なし(vptype_off)が設定されています。 vptype_3d及びvptype_3dmatrixにより変換設定した場合は、マウスの座標を正しく取得することができなくなるので注意してください。</p><p><strong>参照</strong>:</p><p>pos mes</p><h2 id="celbitmap" tabindex="-1">celbitmap <a class="header-anchor" href="#celbitmap" aria-label="Permalink to &quot;celbitmap {#celbitmap}&quot;">​</a></h2><p>変数バッファを画像データとして適用する</p><p><strong>パラメーター</strong>:</p><p>p1,var,p2 p1(0) : ウインドウID var : イメージを置き換えるための配列変数 p2(0) : 動作オプション</p><p><strong>説明</strong>:</p><p>変数バッファの内容を画像データとして指定されたオフスクリーンバッファを置き換えます。 あらかじめ、buffer命令により作成したオフスクリーンバッファと、置き換えるための変数バッファを初期化する必要があります。 オフスクリーンバッファは、buffer命令でscreen_offscreenのオプションを指定して作成してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	buffer 2,256,256,screen_offscreen</span></span></code></pre></div><p>その後、バッファを置き換えるための変数バッファを作成します。 dim命令により、１次元配列を初期化して作成してください。作成するサイズは、オフスクリーンバッファのXサイズ×Yサイズになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>	dim bitmap, 256*256</span></span></code></pre></div>`,175),f={class:"katex"},q={class:"katex-mathml"},T=i('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mord">204080</span><span class="mord cjk_fallback">」</span><span class="mopen">(</span><span class="mord">16</span><span class="mord cjk_fallback">進数</span><span class="mclose">)</span><span class="mord cjk_fallback">を指定した場合は、</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span></span>',1),k=i(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span> 値  マクロ             動作</span></span>
<span class="line"><span>---------------------------------------------------------</span></span>
<span class="line"><span>  0  celbitmap_rgb      $aabbggrr形式でデータを保持する</span></span>
<span class="line"><span>  1  celbitmap_bgr      $aarrggbb形式でデータを保持する</span></span>
<span class="line"><span>  16 celbitmap_capture  描画画面の内容を変数に読み出す</span></span></code></pre></div><p>通常は、OpenGLの標準に合わせたcelbitmap_rgbの形式が使用されます。オプションにcelbitmap_bgrを指定した場合は、DirectX標準に合わせたARGBの並びになります。 celbitmap_captureを指定した場合は、描画先(ID0)の画面上のデータを配列変数に読み出します。(読み出しのサイズはオフスクリーンバッファのサイズになります) ※celbitmap_captureオプションは、実験的な実装です。現在は、Windows(DirectX版HGIMG4を除く)、Linux版でのみ使用できますのでご了承ください。</p><p><strong>例</strong>:</p><p>#include &quot;hsp3dish.as&quot;</p><pre><code>buffer 2,256,256,screen_offscreen
gsel 0
dim bitmap,256*256
repeat 256*256
bitmap(cnt)=$ff00ffff
loop
</code></pre><p>*main redraw 0 celbitmap 2,bitmap pos 0,0 celput 2 redraw 1 await 1000/30 goto *main</p><p><strong>参照</strong>:</p><p>buffer</p>`,8);function R(E,y,D,P,I,S){const t=n("mi"),c=n("mn"),e=n("mtext"),l=n("mo"),r=n("mrow"),d=n("annotation"),h=n("semantics"),g=n("math");return m(),v("div",null,[b,o("p",null,[p("これで、celbitmap命令を使用する準備が整いました。 celbitmap命令により、オフスクリーンバッファのIDと配列変数を指定することで、変数バッファの内容がそのまま画像イメージとして適用されます。 変数バッファは、1要素あたり1ドットとなります。1ドットは、32bitの要素をR,G,B,Aそれぞれ8bit単位で格納されるRGB形式のデータとなります。 たとえば、「"),o("span",f,[o("span",q,[s(g,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(h,null,{default:a(()=>[s(r,null,{default:a(()=>[s(t,null,{default:a(()=>[p("f")]),_:1}),s(t,null,{default:a(()=>[p("f")]),_:1}),s(c,null,{default:a(()=>[p("204080")]),_:1}),s(e,null,{default:a(()=>[p("」")]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[p("(")]),_:1}),s(c,null,{default:a(()=>[p("16")]),_:1}),s(e,null,{default:a(()=>[p("進数")]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[p(")")]),_:1}),s(e,null,{default:a(()=>[p("を指定した場合は、")]),_:1}),s(t,null,{default:a(()=>[p("A")]),_:1}),s(l,null,{default:a(()=>[p("=")]),_:1})]),_:1}),s(d,{encoding:"application/x-tex"},{default:a(()=>[p("ff204080」(16進数)を指定した場合は、A=")]),_:1})]),_:1})]),_:1})]),T]),p("ff(255)、B=$20(32)、G=$40(64)、R=$80(128)となります。(カッコ内は10進数) 画像データの置き換えは、コストの高い処理になるため、大きなサイズのイメージを置き換える場合、フレームレートが下がることがありますので注意してください。 p2パラメーターにより、置き換えの形式や動作を指定することができます。")]),k])}const C=u(_,[["render",R]]);export{w as __pageData,C as default};
