import{_ as s,c as a,o as n,a as l}from"./app.b419af8d.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"エラー・オブジェクト","slug":"error_objects","link":"#error_objects","children":[{"level":3,"title":"プロパティの概要","slug":"プロパティの概要","link":"#プロパティの概要","children":[]},{"level":3,"title":"トレースバック","slug":"トレースバック","link":"#トレースバック","children":[]},{"level":3,"title":"エラー・ハンドラ（errCreate と errThrow）","slug":"エラー・ハンドラ-errcreate-と-errthrow","link":"#エラー・ハンドラ-errcreate-と-errthrow","children":[]},{"level":3,"title":"現在の制限事項","slug":"現在の制限事項","link":"#現在の制限事項","children":[]}]}],"relativePath":"translation/duktape/guide/error_objects.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/guide/error_objects.md"},o=l(`<h2 id="error_objects" tabindex="-1">エラー・オブジェクト <a class="header-anchor" href="#error_objects" aria-hidden="true">#</a></h2><h3 id="プロパティの概要" tabindex="-1">プロパティの概要 <a class="header-anchor" href="#プロパティの概要" aria-hidden="true">#</a></h3><p>ECMAScript Error オブジェクトには標準的なプロパティがほとんどないため、多くの ECMAScript 実装がかなりの数のカスタムプロパティを追加しています。Duktape は標準の Error プロパティを使用しますが、他の実装で使用されている最も有用なプロパティも借用しています。エラー・オブジェクトの &quot;独自の &quot;プロパティの数は、エラー・オブジェクトをできるだけ小さく保つために最小化されています。</p><p>エラー・オブジェクトは以下のプロパティを持ちます（ほとんどが継承されます）。</p><table><thead><tr><th>Property name</th><th>Compatibility</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>standard</td><td>Name of error, e.g. TypeError, inherited</td></tr><tr><td>message</td><td>standard</td><td>Optional message of error, own property, empty message inherited if absent</td></tr><tr><td>fileName</td><td>Rhino</td><td>Filename related to error source, inherited accessor</td></tr><tr><td>lineNumber</td><td>Rhino</td><td>Linenumber related to error source, inherited accessor</td></tr><tr><td>stack</td><td>V8</td><td>Traceback as a multi-line human redable string, inherited accessor</td></tr></tbody></table><blockquote><p>最も有用なfileNameとlineNumberの割り当ては、やや複雑です。関連する問題と現在の動作は、error-objects.rstに記述されています。</p></blockquote><p>Duktapeがトレースバック・サポート付きでコンパイルされている場合。</p><ul><li>stack, fileName, lineNumber は Error.prototype から継承されたアクセサー・プロパティです。これらのプロパティは、単純に代入することでオーバーライドできます。継承されたセッターは書き込みをキャプチャしますが、通常の代入が行われたように独自のプロパティを作成します。この動作はDuktape 1.4.0で変更され、他のエンジンとより良くマッチするようになりました。</li><li>アクセッサ・プロパティが必要とする生のトレースバック・データは、内部プロパティ (\\x82Tracedata) に格納され、ECMAScript コードからは通常アクセスできません。</li></ul><p>Duktapeがトレースバック・サポートなしでコンパイルされた場合。</p><ul><li>スタックアクセサーはError.prototype.toString()と同等になり、スタックトレースの印刷は常に有用で人間が読め る結果を生成するようになります。 fileName と lineNumber は、Error オブジェクトのプロパティです。このプロパティは、代入によってオーバーライドすることができます。</li><li>エラー・オブジェクトがCコードからDuktape APIを使用して作成され、呼び出し元がメッセージのフォーマット文字列を与えない場合、messageプロパティはAPI呼び出しで与えられた数値のエラー・コードに設定されます。この場合、メッセージのタイプは数値になります。通常、エラー・メッセージは文字列です。最小化されたDuktapeビルドでは、Duktapeが内部的に生成するすべてのエラーは、数値エラー・コードのみを使用します。</li></ul><p>オブジェクトは、その内部プロトタイプ・チェーンが（オリジナルの）Error.prototypeオブジェクトを含んでいれば、「エラー・オブジェクト」と見なされます。この基準に一致するオブジェクトだけが、例えばトレースバック・データで補強されます。</p><h3 id="トレースバック" tabindex="-1">トレースバック <a class="header-anchor" href="#トレースバック" aria-hidden="true">#</a></h3><p>stack プロパティは、エラーに関連する印刷可能なトレースバックを提供するアクセッサ (セッター/ゲッター) プロパティです。トレースバックは、エラー・オブジェクトが作成された (スローされなかった) 時のコール・スタックを反映します。トレースバックデータは自動的に収集され、オブジェクトに追加されます。</p><ul><li>Error インスタンスが構築されたとき。</li><li>Duktape APIを使用したCコードからエラーがスローされたとき。</li><li>Duktape内部からエラーがスローされたとき。</li></ul><p>トレースバックの作成に使用されるデータは、内部プロパティ( \\x82Tracedata) に格納され、内部およびバージョンに依存した形式で error-objects.rst に記述されま す。トレースバックデータに直接アクセスしてはいけません。</p><p>印刷可能なトレースバックのフォーマットは、人間が読むことだけを目的としています。バージョン間で変更される可能性があるため、正確なトレースバック形式に依存してはいけません (例えば、トレースバックは 1.5.0 リリースで改善されました)。現在のトレースバック形式の例として、プログラム。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// shortened from tests/ecmascript/test-dev-traceback-example.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">decodeURIComponent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%e1%a9%01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// invalid utf-8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (e) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>このようなものが印刷されるでしょう。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">URIError:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">invalid</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">input</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">anon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">duk_bi_global.c:343</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">internal</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">decodeURIComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">native</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">strict</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">preventsyield</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">global</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">test</span><span style="color:#FFCB6B;">.js:3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">preventsyield</span></span>
<span class="line"></span></code></pre></div><p>トレースバックが無効なビルドでは、スタックアクセサは、エラー時に toString() を呼び出すのと同じ値を返します。つまり、いつでも e.stack を表示して、有用な出力を得ることができるのです。</p><p>最も移植性の高いトレースバックの印刷方法は、次のようなものです。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">decodeURIComponent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">%e1%a9%01</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// invalid utf-8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (e) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 少なくとも Duktape と V8 ではスタックトレースを表示し、</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// それ以外では標準エラー文字列を表示します。</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">print</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>スタックへの書き込みの試みは、継承されたセッターによって捕捉され、通常の割り当てが行われたかのように、独自のプロパティを作成します。この動作は、スタックがエラーインスタンスの独自のプロパティであるV8とは異なります。</p><h3 id="エラー・ハンドラ-errcreate-と-errthrow" tabindex="-1">エラー・ハンドラ（errCreate と errThrow） <a class="header-anchor" href="#エラー・ハンドラ-errcreate-と-errthrow" aria-hidden="true">#</a></h3><p>Duktape.errCreate が設定されている場合、Duktape がオブジェクトにトレースバック情報を追加した直後に呼び出され、さらにエラーを処理したり、エラー値を完全に置き換えたりすることができます。エラー・ハンドラはErrorインスタンスでのみ呼び出され、その戻り値が最終的なエラー値として使用されます。エラーハンドラがエラーをスローした場合、そのエラーは元のエラーに置き換わります。エラーハンドラは通常、1つのエラーにつき1回だけ呼び出されます。しかし、コンストラクタのコーナーでは、エラーハンドラは 1 つのエラー値に対して複数回呼び出されることがあります。</p><p>エラーハンドラは、オブジェクトにすでに存在するプロパティを上書きすることは避けなければなりません。一般に、エラーハンドラはエラーを投げることを避けるべきです。なぜなら、そのエラーは元のエラーに取って代わるからです。具体的な例としては、拡張不可能なオブジェクトに新しいプロパティを追加しようとすると TypeError が発生するので、エラーハンドラはそれを回避しなければならない。</p><p>以下は、エラー発生時に作成タイムスタンプを追加するエラーハンドラの例である。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">errCreate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Error</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// this check is not really needed because errCreate only gets</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// called with Error instances</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">created</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// already augmented or conflicting property present</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isExtensible</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// object not extensible, don&#39;t try to add a new property</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">created</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>ハンドラを削除するには、そのプロパティを削除してください（例えばnullに設定しても機能せず、Duktapeがnull値を呼び出そうとするとTypeErrorが発生します）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Remove error handler for error creation</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">errCreate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>同様に、Duktape.errThrow が設定されている場合、エラーがスローされる直前に呼び出され、エラー値を処理したり置き換えたりすることができます。ECMAScript は任意の値の型を投げることができるので、エラーハンドラは任意の入力値（Error インスタンスだけでなく）で呼び出されるかもしれません。また、エラーは何度も再スローできるため、同じ値で複数回呼ばれることもあります。</p><p>たとえば、エラーに throw タイムスタンプ (オブジェクトが最初にスローされたときの記録) を追加するには、次のようにします。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">errThrow</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Error</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// refuse to touch anything but Error instances</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">thrown</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// already augmented or conflicting property present</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isExtensible</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// object not extensible, don&#39;t try to add a new property</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">thrown</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>繰り返しになりますが、ハンドラを削除するには、プロパティを削除してください。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Remove error handler for error throwing</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> Duktape</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">errThrow</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="現在の制限事項" tabindex="-1">現在の制限事項 <a class="header-anchor" href="#現在の制限事項" aria-hidden="true">#</a></h3><ul><li>コーズチェーンのサポートがない。原因チェーンは便利ですが、ECMAScript には原因チェーンはありませんし、そのためのデファクトスタンダードもないようです。</li><li>これらは現在、バージョン互換性のある方法で、プログラム的にトレースバック要素にアクセスする方法はありません。しかし、_Tracedata hidden Symbol (C コードから DUK_HIDDEN_SYMBOL(&quot;Tracedata&quot;)) にアクセスすることはできますが、生の tracedata のフォーマットはマイナーバージョンでも変更される可能性があります。.stackプロパティを直接上書きすることも可能です。</li><li>エラーがカスタム・エラー・クラスへの非コンストラクタ関数呼び出しで作成された場合（new MyError(&#39;msg&#39;) の代わりに MyError(&#39;msg&#39;) ）、トレースバック・データのようなカスタム・フィールドで拡張されることはありません。コンストラクタとして呼び出された場合、Error を継承したカスタム・エラーは通常通り追加されます。組み込みの標準エラー (TypeError など) は、コンストラクタ以外の関数呼び出しで作成された場合でも、常に拡張されます (ただし、エラーの作成方法によって、トレースバックは若干異なって見えます)。</li></ul>`,37),e=[o];function t(r,c,y,i,F,D){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
