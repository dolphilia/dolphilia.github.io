import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.43c433ff.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_xmove_top.md","filePath":"translation/duktape/api/duk_xmove_top.md","lastUpdated":1676126774000}'),p={name:"translation/duktape/api/duk_xmove_top.md"},o=l(`<h2 id="duk-xmove-top" tabindex="-1">duk_xmove_top() <a class="header-anchor" href="#duk-xmove-top" aria-label="Permalink to &quot;duk_xmove_top()&quot;">​</a></h2><p>1.0.0 stack slice</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_xmove_top</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">to_ctx</span><span style="color:#E1E4E8;">, duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">from_ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_xmove_top</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">to_ctx</span><span style="color:#24292E;">, duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">from_ctx</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">count</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | val1 | ... | valN | -&gt; | ... | (on source stack, from_ctx) | ... | -&gt; | ... | val1 | ... | valN | (on target stack, to_ctx)</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>ソーススタックの最上位から count 引数を取り除き、ターゲットスタックにプッシュします。呼び出し側は、例えば duk_require_stack() を使って、ターゲット・スタックに十分な割り当て領域があることを確認しなければなりません。ソースとターゲットの両方のスタックは、同じ Duktape ヒープに存在しなければなりません。</p><p>もしソースとターゲットのスタックが同じであれば、現在エラーが投げられています。</p><p>Lua の lua_xmove() と比較して、スタックからスタックへの順序が逆になっています。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* A Duktape/C function which executes a given function in a new thread.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">duk_ret_t</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_in_thread</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">duk_idx_t</span><span style="color:#E1E4E8;"> nargs;</span></span>
<span class="line"><span style="color:#E1E4E8;">    duk_context </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">new_ctx;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Arguments: func, arg1, ... argN. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    nargs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_get_top</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nargs </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DUK_RET_TYPE_ERROR;</span><span style="color:#6A737D;">  /* missing func | argument */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Create a new context. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_push_thread</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    new_ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_require_context</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Move arguments to the new context.  Note that we need to extend</span></span>
<span class="line"><span style="color:#6A737D;">     * the target stack allocation explicitly.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_require_stack</span><span style="color:#E1E4E8;">(new_ctx, nargs);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_xmove_top</span><span style="color:#E1E4E8;">(new_ctx, ctx, nargs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Call the function; new_ctx is now: [ func | arg1 ... argN ]. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_call</span><span style="color:#E1E4E8;">(new_ctx, nargs </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Return the function call result by copying it to the original stack. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">duk_xmove_top</span><span style="color:#E1E4E8;">(ctx, new_ctx, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* A Duktape/C function which executes a given function in a new thread.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">duk_ret_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_in_thread</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">duk_idx_t</span><span style="color:#24292E;"> nargs;</span></span>
<span class="line"><span style="color:#24292E;">    duk_context </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">new_ctx;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Arguments: func, arg1, ... argN. */</span></span>
<span class="line"><span style="color:#24292E;">    nargs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_get_top</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nargs </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DUK_RET_TYPE_ERROR;</span><span style="color:#6A737D;">  /* missing func | argument */</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Create a new context. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_push_thread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    new_ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_require_context</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Move arguments to the new context.  Note that we need to extend</span></span>
<span class="line"><span style="color:#6A737D;">     * the target stack allocation explicitly.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_require_stack</span><span style="color:#24292E;">(new_ctx, nargs);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_xmove_top</span><span style="color:#24292E;">(new_ctx, ctx, nargs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Call the function; new_ctx is now: [ func | arg1 ... argN ]. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_call</span><span style="color:#24292E;">(new_ctx, nargs </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Return the function call result by copying it to the original stack. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">duk_xmove_top</span><span style="color:#24292E;">(ctx, new_ctx, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_xcopy_top</p>`,14),e=[o];function t(c,r,E,y,i,_){return n(),a("div",null,e)}const x=s(p,[["render",t]]);export{u as __pageData,x as default};
