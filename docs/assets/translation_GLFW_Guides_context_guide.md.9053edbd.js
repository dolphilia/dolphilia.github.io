import{_ as a,c as s,o as n,Q as e}from"./chunks/framework.44f152d8.js";const w=JSON.parse('{"title":"GLFWコンテキストガイド（日本語訳）","description":"","frontmatter":{},"headers":[],"relativePath":"translation/GLFW/Guides/context_guide.md","lastUpdated":1676126774000}'),l={name:"translation/GLFW/Guides/context_guide.md"},p=e(`<h1 id="glfwコンテキストガイド-日本語訳" tabindex="-1">GLFWコンテキストガイド（日本語訳） <a class="header-anchor" href="#glfwコンテキストガイド-日本語訳" aria-label="Permalink to &quot;GLFWコンテキストガイド（日本語訳）&quot;">​</a></h1><p><a href="https://www.glfw.org/docs/latest/context_guide.html" target="_blank" rel="noreferrer">原文</a></p><p>このガイドでは，GLFWのOpenGLおよびOpenGL ESのコンテキスト関連機能を紹介する．このカテゴリの特定の関数の詳細については、<a href="https://www.glfw.org/docs/latest/group__context.html" target="_blank" rel="noreferrer">コンテキストのリファレンス</a>を参照してください。また、GLFW API の他の領域のガイドもあります。</p><ul><li><a href="https://www.glfw.org/docs/latest/intro_guide.html" target="_blank" rel="noreferrer">API紹介</a></li><li><a href="https://www.glfw.org/docs/latest/window_guide.html" target="_blank" rel="noreferrer">ウィンドウズガイド</a></li><li><a href="https://www.glfw.org/docs/latest/vulkan_guide.html" target="_blank" rel="noreferrer">Vulkanガイド</a></li><li><a href="https://www.glfw.org/docs/latest/monitor_guide.html" target="_blank" rel="noreferrer">モニターガイド</a></li><li><a href="https://www.glfw.org/docs/latest/input_guide.html" target="_blank" rel="noreferrer">入力ガイド</a></li></ul><h2 id="コンテキストオブジェクト" tabindex="-1">コンテキストオブジェクト <a class="header-anchor" href="#コンテキストオブジェクト" aria-label="Permalink to &quot;コンテキストオブジェクト&quot;">​</a></h2><p>ウィンドウオブジェクトはトップレベルのウィンドウとOpenGLまたはOpenGL ESのコンテキストをカプセル化します。作成は<a href="https://www.glfw.org/docs/latest/group__window.html#ga3555a418df92ad53f917597fe2f64aeb" target="_blank" rel="noreferrer">glfwCreateWindow</a>で、破棄は<a href="https://www.glfw.org/docs/latest/group__window.html#gacdf43e51376051d2c091662e9fe3d7b2" target="_blank" rel="noreferrer">glfwDestroyWindow</a>または<a href="https://www.glfw.org/docs/latest/group__init.html#gaaae48c0a18607ea4a4ba951d939f0901" target="_blank" rel="noreferrer">glfwTerminate</a>で行います。より詳細な情報は<a href="https://www.glfw.org/docs/latest/window_guide.html#window_creation" target="_blank" rel="noreferrer">ウィンドウの作成</a>を参照してください．</p><p>ウィンドウとコンテキストは不可分にリンクされているので、ウィンドウオブジェクトはコンテキストハンドルとßしても機能します。</p><p>さまざまな種類のコンテキストの作成をテストし、そのプロパティを見るには、glfwinfo テストプログラムを実行してください。</p><blockquote><p>Vulkan はコンテキストを持たず、Vulkan インスタンスは Vulkan API 自体を経由して作成されます。Vulkan を使用してウィンドウにレンダリングする場合は、GLFW_CLIENT_API ヒントを GLFW_NO_API に設定することで、コンテキストの生成を無効にしてください。詳細については、Vulkan ガイドを参照してください。</p></blockquote><h3 id="コンテキスト作成のヒント" tabindex="-1">コンテキスト作成のヒント <a class="header-anchor" href="#コンテキスト作成のヒント" aria-label="Permalink to &quot;コンテキスト作成のヒント&quot;">​</a></h3><p>どのようなコンテキストが作成されるかに関連する、<a href="https://www.glfw.org/docs/latest/group__window.html#ga7d9c8c62384b1e2821c4dc48952d2033" target="_blank" rel="noreferrer">glfwWindowHint</a>を使用して指定されるいくつかのヒントがあります。ウィンドウガイドの<a href="https://www.glfw.org/docs/latest/window_guide.html#window_hints_ctx" target="_blank" rel="noreferrer">コンテキスト関連のヒント</a>を参照してください。</p><h2 id="コンテキストオブジェクトの共有" tabindex="-1">コンテキストオブジェクトの共有 <a class="header-anchor" href="#コンテキストオブジェクトの共有" aria-label="Permalink to &quot;コンテキストオブジェクトの共有&quot;">​</a></h2><p><a href="https://www.glfw.org/docs/latest/group__window.html#ga3555a418df92ad53f917597fe2f64aeb" target="_blank" rel="noreferrer">glfwCreateWindow</a>でウィンドウとそのOpenGLまたはOpenGL ESコンテキストを作成するとき、新しいウィンドウがそのオブジェクト（テクスチャ、頂点と要素バッファなど）を共有する必要がある別のウィンドウのコンテキストを指定することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> second_window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Second Window</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> first_window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>オブジェクトの共有は、オペレーティングシステムとグラフィックスドライバによって実装されます。どのタイプのオブジェクトを共有するかを選択できるプラットフォームでは、GLFWはすべてのタイプのオブジェクトを共有するよう要求する。</p><p>詳しくは<a href="https://www.opengl.org/registry/" target="_blank" rel="noreferrer">OpenGL</a>または<a href="https://www.khronos.org/opengles/" target="_blank" rel="noreferrer">OpenGL ES</a>のリファレンスドキュメントの関連する章を参照してください。この章の名前と番号は、残念ながらバージョンとAPIによって異なりますが、共有オブジェクトとマルチコンテキストという名前だったこともあります。</p><p>GLFWには、sharingと呼ばれる素のオブジェクト共有のサンプルプログラムが付属しています。</p><p>###オフスクリーンコンテキスト</p><p>GLFW は、関連するウィンドウのないコンテキストの作成をサポートしていない。しかし、隠されたウィンドウを持つコンテキストは、<a href="https://www.glfw.org/docs/latest/window_guide.html#GLFW_VISIBLE_hint" target="_blank" rel="noreferrer">GLFW_VISIBLE</a>ウィンドウヒントを用いて作成することができる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwWindowHint</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLFW_VISIBLE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> GLFW_FALSE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> offscreen_context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span></code></pre></div><p>ウィンドウは決して表示する必要がなく、そのコンテキストはプレーンなオフスクリーンコンテキストとして使用することができます。ウィンドウマネージャによっては、隠されたウィンドウのフレームバッファのサイズを使用または変更できないことがあるので、そのようなコンテキストでレンダリングする場合はフレームバッファオブジェクトを使用することをお勧めします。</p><p>少なくとも1つのウィンドウがある限り、たとえどのウィンドウも表示されていなくても、<a href="https://www.glfw.org/docs/latest/input_guide.html#events" target="_blank" rel="noreferrer">イベントを処理</a>する必要があります。</p><p>macOS: 最初にウィンドウを作成するときに、メニューバーが作成されます。これは、例えば、コマンドラインのみのアプリケーションを書くときには望ましくありません。メニューバーの作成は、<a href="https://www.glfw.org/docs/latest/group__init.html#ga71e0b4ce2f2696a84a9b8c5e12dc70cf" target="_blank" rel="noreferrer">GLFW_COCOA_MENUBAR</a>initヒントで無効にすることができます。</p><h3 id="コンテキストのないウィンドウ" tabindex="-1">コンテキストのないウィンドウ <a class="header-anchor" href="#コンテキストのないウィンドウ" aria-label="Permalink to &quot;コンテキストのないウィンドウ&quot;">​</a></h3><p><a href="https://www.glfw.org/docs/latest/window_guide.html#GLFW_CLIENT_API_hint" target="_blank" rel="noreferrer">GLFW_CLIENT_API</a>ヒントを GLFW_NO_API に設定することにより、 コンテキストの生成を無効にすることができる。コンテキストのない Windows は <a href="https://www.glfw.org/docs/latest/group__context.html#ga1c04dc242268f827290fe40aa1c91157" target="_blank" rel="noreferrer">glfwMakeContextCurrent</a> や <a href="https://www.glfw.org/docs/latest/group__window.html#ga15a5a1ee5b3c2ca6b15ca209a12efd14" target="_blank" rel="noreferrer">glfwSwapBuffers</a> に渡してはならない．</p><h2 id="現在の状況" tabindex="-1">現在の状況 <a class="header-anchor" href="#現在の状況" aria-label="Permalink to &quot;現在の状況&quot;">​</a></h2><p>OpenGLやOpenGL ESの呼び出しを行う前に、正しいタイプの現在のコンテキストを持つ必要があります。コンテキストは一度に1つのスレッドに対してのみカレントとなり、スレッドは一度に1つのコンテキストしかカレントとすることができません。</p><p>スレッド間でコンテキストを移動する場合、古いスレッドで非カレントにしてから新しいスレッドでカレントにする必要があります。</p><p>ウィンドウのコンテキストは <a href="https://www.glfw.org/docs/latest/group__context.html#ga1c04dc242268f827290fe40aa1c91157" target="_blank" rel="noreferrer">glfwMakeContextCurrent</a> でカレントにされる。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">glfwMakeContextCurrent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>現在のコンテキストのウィンドウは <a href="https://www.glfw.org/docs/latest/group__context.html#gad94e80185397a6cf5fe2ab30567af71c" target="_blank" rel="noreferrer">glfwGetCurrentContext</a> で返されます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">GLFWwindow</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetCurrentContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p>以下の GLFW 関数は、現在のコンテキストを必要とします。現在のコンテキストを持たずにこれらの関数を呼び出すと、 <a href="https://www.glfw.org/docs/latest/group__errors.html#gaa8290386e9528ccb9e42a3a4e16fc0d0" target="_blank" rel="noreferrer">GLFW_NO_CURRENT_CONTEXT</a> エラーが発生する。</p><ul><li><a href="https://www.glfw.org/docs/latest/group__context.html#ga6d4e0cdf151b5e579bd67f13202994ed" target="_blank" rel="noreferrer">glfwSwapInterval</a></li><li><a href="https://www.glfw.org/docs/latest/group__context.html#ga87425065c011cef1ebd6aac75e059dfa" target="_blank" rel="noreferrer">glfwExtensionSupported</a></li><li><a href="https://www.glfw.org/docs/latest/group__context.html#ga35f1837e6f666781842483937612f163" target="_blank" rel="noreferrer">glfwGetProcAddress</a></li></ul><h2 id="バッファスワッピング" tabindex="-1">バッファスワッピング <a class="header-anchor" href="#バッファスワッピング" aria-label="Permalink to &quot;バッファスワッピング&quot;">​</a></h2><p>ウィンドウガイドの<a href="https://www.glfw.org/docs/latest/window_guide.html#buffer_swap" target="_blank" rel="noreferrer">バッファスワッピング</a>を参照してください。</p><h2 id="openglおよびopengl-esの拡張機能" tabindex="-1">OpenGLおよびOpenGL ESの拡張機能 <a class="header-anchor" href="#openglおよびopengl-esの拡張機能" aria-label="Permalink to &quot;OpenGLおよびOpenGL ESの拡張機能&quot;">​</a></h2><p>OpenGLとOpenGL ESの利点の1つは、その拡張性です。ハードウェアベンダは、その機能がOpenGLまたはOpenGL ES仕様の新バージョンに含まれる前に、APIを拡張する拡張機能をその実装に含めることができます。また、拡張機能の中には、決して含まれず、陳腐化するまで拡張機能のままであるものもあります。</p><p>拡張機能は次のように定義されます。</p><ul><li>An extension name (e.g. GL_ARB_gl_spirv)</li><li>New OpenGL tokens (e.g. GL_SPIR_V_BINARY_ARB)</li><li>New OpenGL functions (e.g. glSpecializeShaderARB)</li></ul><p>ARBのアフィックスは、Architecture Review Boardの略で、公式の拡張子に使用されることに注意してください。上の拡張子はARBによって作成されたものですが、NvidiaにはNV、AMDにはAMDというように、さまざまな接頭辞が存在します。また、どのグループも一般的なEXT接頭辞を使用することができます。拡張機能の一覧とその仕様は、<a href="https://www.opengl.org/registry/" target="_blank" rel="noreferrer">OpenGL Registry</a>と<a href="https://www.khronos.org/registry/gles/" target="_blank" rel="noreferrer">OpenGL ES Registry</a>に掲載されています。</p><h3 id="ローダーライブラリで拡張機能をロードする" tabindex="-1">ローダーライブラリで拡張機能をロードする <a class="header-anchor" href="#ローダーライブラリで拡張機能をロードする" aria-label="Permalink to &quot;ローダーライブラリで拡張機能をロードする&quot;">​</a></h3><p>拡張ローダーライブラリは、OpenGLとOpenGL ESの拡張と、コアOpenGLまたはOpenGL ES APIの現代版の両方にアクセスする最も簡単で最良の方法です。彼らは、あなたが必要とするすべてのものを宣言し、ロードするためのすべての詳細を引き受けます。そのようなライブラリの1つがgladで、他にもいくつかあります。</p><p>以下の例では、gladを使用しますが、すべての拡張ローダーライブラリは同様に動作します。</p><p>まず、glad Pythonスクリプトを使用してソースファイルを生成する必要があります。この例では、任意のバージョンのOpenGL用のローダーを生成しています。これはGLFWとgladの両方のデフォルトですが、OpenGL ES用のローダーや、特定のAPIバージョンと拡張セット用のローダーも生成可能です。生成されたファイルは出力ディレクトリに書き込まれます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">python main.py </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">generator c </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">no</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">path output</span></span>
<span class="line"></span></code></pre></div><p>--no-loader オプションが追加されたのは、GLFWがすでにOpenGLとOpenGL ESの関数ポインタを読み込むための関数を提供しており、選択したコンテキスト作成APIを自動的に使用するもので、gladは独自に実装する代わりにこれを呼び出すことができるからです。他にもいくつかのコマンドラインオプションがあります。詳しくはgladのドキュメントを参照してください。</p><p>生成された output/src/glad.c, output/include/glad/glad.h, output/include/KHR/khrplatform.h ファイルをビルドに追加してください。次に、開発環境のOpenGLヘッダを置き換えるgladヘッダファイルをインクルードする必要があります。gladヘッダをGLFWヘッダの前にインクルードすることで、開発環境のOpenGLまたはOpenGL ESヘッダを抑制することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/glad.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>最後に、適切な現在のコンテキストが得られたら、gladを初期化する必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwCreateWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">640</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">480</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My Window</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">glfwMakeContextCurrent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">gladLoadGLLoader</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">GLADloadproc</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">glfwGetProcAddress</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>gladがロードされると、作成したコンテキストと生成したgladローダーの両方がサポートするすべてのOpenGLコアおよび拡張関数にアクセスできるようになり、レンダリングを開始する準備ができます。</p><p><a href="https://www.glfw.org/docs/latest/window_guide.html#window_hints_ctx" target="_blank" rel="noreferrer">コンテキストヒント</a>で、最低限必要なOpenGLまたはOpenGL ESバージョンを指定することができます。より複雑なニーズがある場合は、<a href="https://www.glfw.org/docs/latest/window_guide.html#window_attribs_ctx" target="_blank" rel="noreferrer">コンテキスト属性</a>で実際のOpenGLまたはOpenGL ESのバージョンを確認するか、またはGLAD_GL_VERSION_x_xブール値を使用して特定のバージョンが現在のコンテキストでサポートされているかどうかを確認することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLAD_GL_VERSION_3_2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Call OpenGL 3.2+ specific code</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>特定の拡張機能がサポートされているかどうかを確認するには、GLAD_GL_xxxブール値を使用します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GLAD_GL_ARB_gl_spirv</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Use GL_ARB_gl_spirv</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="拡張機能を手動で読み込む" tabindex="-1">拡張機能を手動で読み込む <a class="header-anchor" href="#拡張機能を手動で読み込む" aria-label="Permalink to &quot;拡張機能を手動で読み込む&quot;">​</a></h3><p>絶対に必要な場合以外は、このテクニックを使わないでください。<a href="https://www.glfw.org/docs/latest/context_guide.html#context_glext_auto" target="_blank" rel="noreferrer">拡張ローダーライブラリ</a>を使えば、面倒で繰り返しの多い、エラーを起こしやすい作業を大幅に減らすことができます。</p><p>ある拡張機能を使うには、まずコンテキストがその拡張機能をサポートしているか どうか確認し、新しい関数が導入されていれば、その関数へのポインタを取得する必要があ ります。GLFW は，拡張や新しい API 関数を手動で読み込むために，<a href="https://www.glfw.org/docs/latest/group__context.html#ga87425065c011cef1ebd6aac75e059dfa" target="_blank" rel="noreferrer">glfwExtensionSupported</a> と <a href="https://www.glfw.org/docs/latest/group__context.html#ga35f1837e6f666781842483937612f163" target="_blank" rel="noreferrer">glfwGetProcAddress</a> を提供しています．</p><p>このセクションでは、OpenGL拡張の手動ロードを実演します。OpenGL ES拡張のロードは、拡張ヘッダーの名前以外は同じです。</p><h4 id="glext-h-ヘッダー" tabindex="-1">glext.h ヘッダー <a class="header-anchor" href="#glext-h-ヘッダー" aria-label="Permalink to &quot;glext.h ヘッダー&quot;">​</a></h4><p>glext.h拡張ヘッダーは、すべてのOpenGL拡張のためのインターフェイスを定義する継続的に更新されるファイルです。これの最新版は、常に<a href="https://www.opengl.org/registry/" target="_blank" rel="noreferrer">OpenGLレジストリ</a>で見つけることができます。また、OpenGL ESのさまざまなバージョンのための拡張ヘッダが<a href="https://www.khronos.org/registry/gles/" target="_blank" rel="noreferrer">OpenGL ES Registry</a>にあります。開発環境に含まれているものは数年前のものであったり、使いたい拡張機能が含まれていない可能性があるので、拡張ヘッダーのコピーを自分で使うことを強くお勧めします。</p><p>ヘッダーは、サポートするすべての拡張機能のすべての関数に対する関数ポインタの型を定義しています。これらはPFNGLSPECIALIZESHADERARBPROC（glSpecializeShaderARB用）のような名前で、つまり名前を大文字にしてPFN（関数へのポインタ）とPROC（手続き）を末尾に追加しています。</p><p>拡張ヘッダをインクルードするには、GLFWヘッダをインクルードする前に、<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_INCLUDE_GLEXT" target="_blank" rel="noreferrer">GLFW_INCLUDE_GLEXT</a>を定義してください。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GLFW_INCLUDE_GLEXT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="拡張子のチェック" tabindex="-1">拡張子のチェック <a class="header-anchor" href="#拡張子のチェック" aria-label="Permalink to &quot;拡張子のチェック&quot;">​</a></h4><p>与えられたマシンは、実際には拡張機能をサポートしていないかもしれません (古いドライバや必要なハードウェア機能が不足しているグラフィックカードを使っているかもしれません) 。これは <a href="https://www.glfw.org/docs/latest/group__context.html#ga87425065c011cef1ebd6aac75e059dfa" target="_blank" rel="noreferrer">glfwExtensionSupported</a> で行われます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">glfwExtensionSupported</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GL_ARB_gl_spirv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// The extension is supported by the current context</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>引数はヌル文字で終端する ASCII 文字列で、拡張機能名を指定する。拡張機能がサポートされている場合、<a href="https://www.glfw.org/docs/latest/group__context.html#ga87425065c011cef1ebd6aac75e059dfa" target="_blank" rel="noreferrer">glfwExtensionSupported</a> は GLFW_TRUE を返し、そうでない場合は GLFW_FALSE を返します。</p><h4 id="関数ポインタの取得" tabindex="-1">関数ポインタの取得 <a class="header-anchor" href="#関数ポインタの取得" aria-label="Permalink to &quot;関数ポインタの取得&quot;">​</a></h4><p>すべてではありませんが、多くの拡張機能では、新しい OpenGL 関数を使用する必要があります。これらの関数は、オペレーティングシステムのクライアントAPIライブラリにエントリポイントを持たないことが多く、実行時にそれらを取得する必要があります。これらの関数へのポインタは、<a href="https://www.glfw.org/docs/latest/group__context.html#ga35f1837e6f666781842483937612f163" target="_blank" rel="noreferrer">glfwGetProcAddress</a>で取得することができます。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">PFNGLSPECIALIZESHADERARBPROC pfnSpecializeShaderARB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">glfwGetProcAddress</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">glSpecializeShaderARB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>一般に、関数ポインタ変数に関数と（全く）同じ名前をつけるのは避けるべきです。その代わり、上記のような別の接頭辞をつけるか、他の命名法を用いることができます。</p><p>さて、すべてのパーツが紹介されましたが、これらを一緒に使用するとどのようになるでしょうか。</p><div class="language-cß"><button title="Copy Code" class="copy"></button><span class="lang">cß</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#define GLFW_INCLUDE_GLEXT</span></span>
<span class="line"><span style="color:#A6ACCD;">#include &lt;GLFW/glfw3.h&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">#define glSpecializeShaderARB pfnSpecializeShaderARB</span></span>
<span class="line"><span style="color:#A6ACCD;">PFNGLSPECIALIZESHADERARBPROC pfnSpecializeShaderARB;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">// Flag indicating whether the extension is supported</span></span>
<span class="line"><span style="color:#A6ACCD;">int has_ARB_gl_spirv = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">void load_extensions(void)</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (glfwExtensionSupported(&quot;GL_ARB_gl_spirv&quot;))</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        pfnSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC)</span></span>
<span class="line"><span style="color:#A6ACCD;">            glfwGetProcAddress(&quot;glSpecializeShaderARB&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        has_ARB_gl_spirv = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">void some_function(void)</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (has_ARB_gl_spirv)</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">        // Now the extension function can be called as usual</span></span>
<span class="line"><span style="color:#A6ACCD;">        glSpecializeShaderARB(...);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,75),t=[p];function o(r,c,i,g,d,D){return n(),s("div",null,t)}const f=a(l,[["render",o]]);export{w as __pageData,f as default};
