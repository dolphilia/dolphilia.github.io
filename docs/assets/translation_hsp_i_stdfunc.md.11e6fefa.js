import{_ as p,c as s,o as n,Q as a}from"./chunks/framework.44f152d8.js";const u=JSON.parse('{"title":"基本関数","description":"","frontmatter":{},"headers":[],"relativePath":"translation/hsp/i_stdfunc.md","lastUpdated":1676126774000}'),t={name:"translation/hsp/i_stdfunc.md"},o=a(`<h1 id="基本関数" tabindex="-1">基本関数 <a class="header-anchor" href="#基本関数" aria-label="Permalink to &quot;基本関数&quot;">​</a></h1><p><strong>対応</strong>:</p><ul><li>Win</li><li>Cli</li><li>Let</li></ul><h2 id="int" tabindex="-1">int <a class="header-anchor" href="#int" aria-label="Permalink to &quot;int {#int}&quot;">​</a></h2><p>整数値に変換</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 変換元の値または変数</p><p><strong>説明</strong>:</p><p>p1で指定された値を整数にしたものを返します。 値が実数の場合は、小数点以下が切り捨てられます。 値が文字列の場合は、数値文字列の場合はその数値に、 それ以外は0になります。</p><p><strong>参照</strong>:</p><p>str double</p><h2 id="rnd" tabindex="-1">rnd <a class="header-anchor" href="#rnd" aria-label="Permalink to &quot;rnd {#rnd}&quot;">​</a></h2><p>乱数を発生</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=1〜32768 : 乱数の範囲</p><p><strong>説明</strong>:</p><p>0から(p1-1)の範囲で整数の乱数値を発生させます。 p1の値は範囲に含まれません。たとえば、</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">例 ：</span></span>
<span class="line"><span style="color:#A6ACCD;">    a=rnd(10)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>は、変数aに、0〜9までの乱数を代入します。 rnd関数は、プログラム起動してからは一定のパターンで乱数を発生させます。 乱数のパターンを一定でないものにする場合は、 randomize命令を使用してください。</p><p><strong>参照</strong>:</p><p>randomize</p><h2 id="strlen" tabindex="-1">strlen <a class="header-anchor" href="#strlen" aria-label="Permalink to &quot;strlen {#strlen}&quot;">​</a></h2><p>文字列の長さを調べる</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 文字列の長さを調べたい文字列かまたは文字列型の変数名</p><p><strong>説明</strong>:</p><p>p1で指定された文字列または、文字列型変数が持っている文字列の長さ(メモリサイズ)を返します。 文字列に全角文字(日本語)が含まれる場合は、1文字でも2文字分に計算されます。 (ただしHSP64,UTF-8ランタイムの場合は文字の長さが異なる場合があります)</p><p><strong>参照</strong>:</p><h2 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length {#length}&quot;">​</a></h2><p>配列の1次元要素数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 配列を調べる変数</p><p><strong>説明</strong>:</p><p>p1で指定された変数が持つ配列要素数(1次元)を返します。 配列要素数が５だった場合は、p1(0)〜p1(4)が存在することになります。</p><p><strong>参照</strong>:</p><p>length2 length3 length4</p><h2 id="length2" tabindex="-1">length2 <a class="header-anchor" href="#length2" aria-label="Permalink to &quot;length2 {#length2}&quot;">​</a></h2><p>配列の2次元要素数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 配列を調べる変数</p><p><strong>説明</strong>:</p><p>p1で指定された変数が持つ配列要素数(2次元)を返します。 配列要素数が５だった場合は、p1(0,0)〜p1(?,4)が存在することになります。 配列の次元が存在しない場合は、0が返ります。</p><p><strong>参照</strong>:</p><p>length length3 length4</p><h2 id="length3" tabindex="-1">length3 <a class="header-anchor" href="#length3" aria-label="Permalink to &quot;length3 {#length3}&quot;">​</a></h2><p>配列の3次元要素数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 配列を調べる変数</p><p><strong>説明</strong>:</p><p>p1で指定された変数が持つ配列要素数(3次元)を返します。 配列要素数が５だった場合は、p1(0,0,0)〜p1(?,?,4)が存在することになります。配列の次元が存在しない場合は、0が返ります。</p><p><strong>参照</strong>:</p><p>length length2 length4</p><h2 id="length4" tabindex="-1">length4 <a class="header-anchor" href="#length4" aria-label="Permalink to &quot;length4 {#length4}&quot;">​</a></h2><p>配列の4次元要素数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 配列を調べる変数</p><p><strong>説明</strong>:</p><p>p1で指定された変数が持つ配列要素数(4次元)を返します。 配列要素数が５だった場合は、p1(0,0,0,0)〜p1(?,?,?,4)が存在することになります。配列の次元が存在しない場合は、0が返ります。</p><p><strong>参照</strong>:</p><p>length length2 length3</p><h2 id="vartype" tabindex="-1">vartype <a class="header-anchor" href="#vartype" aria-label="Permalink to &quot;vartype {#vartype}&quot;">​</a></h2><p>変数の型を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 型を調べる変数、または文字列</p><p><strong>説明</strong>:</p><p>p1で指定された変数が格納している値の型を調べて返します。 返される値は、型を示す整数値となります。型の値は、以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 : ラベル型</span></span>
<span class="line"><span style="color:#A6ACCD;"> 2 : 文字列型</span></span>
<span class="line"><span style="color:#A6ACCD;"> 3 : 実数型</span></span>
<span class="line"><span style="color:#A6ACCD;"> 4 : 整数型</span></span>
<span class="line"><span style="color:#A6ACCD;"> 5 : モジュール型</span></span>
<span class="line"><span style="color:#A6ACCD;"> 6 : COMオブジェクト型</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>プラグイン等で型が拡張されている場合は、これ以外の値が返されます。 また、p1に文字列を指定した場合には、型を示す型名として扱われます。 型名は、登録されているものと大文字小文字を含めて完全に一致させる必要があります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;int&quot;    : 整数型</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;str&quot;    : 文字列型</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;double&quot; : 実数型</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;struct&quot; : モジュール型</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>標準的な型名として、使用できるも文字列は上の通りです。ただし、これ以外にもプラグイン等で型が拡張されている場合は、指定できる型名も追加されます。</p><p><strong>参照</strong>:</p><p>varptr varsize</p><h2 id="varptr" tabindex="-1">varptr <a class="header-anchor" href="#varptr" aria-label="Permalink to &quot;varptr {#varptr}&quot;">​</a></h2><p>変数データのポインタを返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : ポインタを調べる変数、または命令</p><p><strong>説明</strong>:</p><p>p1で指定された変数が格納しているデータがあるメモリアドレスを返します。 p1に外部拡張命令(#funcで定義されているDLL呼び出し用の命令)を指定した場合には、実際に実行される外部関数のアドレスを返します。 この関数は、 外部DLLにポインタを渡したい時など特殊な場合に使用するもので、通常は覚えておく必要のないものです。 varptrによって取得したポインタは、配列の拡張や内容の更新などにより変化する可能性があるため、値を参照する直前で使用するようにしてください。</p><p><strong>参照</strong>:</p><p>varsize vartype libptr</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="varsize" tabindex="-1">varsize <a class="header-anchor" href="#varsize" aria-label="Permalink to &quot;varsize {#varsize}&quot;">​</a></h2><p>変数データのバッファサイズを返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : バッファサイズを調べる変数</p><p><strong>説明</strong>:</p><p>p1で指定された変数が格納しているデータのバッファサイズ(確保されているメモリサイズ)を返します。 varsizeによって取得したサイズは、内容の更新などにより変化する可能性があるため、値を参照する直前で使用するようにしてください。</p><p><strong>参照</strong>:</p><p>varptr vartype libptr</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="gettime" tabindex="-1">gettime <a class="header-anchor" href="#gettime" aria-label="Permalink to &quot;gettime {#gettime}&quot;">​</a></h2><p>時間・日付を取得する</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0〜7(0) : 取得するタイプ</p><p><strong>説明</strong>:</p><p>p1で指定したタイプの日付・時刻情報を返します。 取得するタイプは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    0 : 年(Year)</span></span>
<span class="line"><span style="color:#A6ACCD;">    1 : 月(Month)</span></span>
<span class="line"><span style="color:#A6ACCD;">    2 : 曜日(DayOfWeek)</span></span>
<span class="line"><span style="color:#A6ACCD;">    3 : 日(Day)</span></span>
<span class="line"><span style="color:#A6ACCD;">    4 : 時(Hour)</span></span>
<span class="line"><span style="color:#A6ACCD;">    5 : 分(Minute)</span></span>
<span class="line"><span style="color:#A6ACCD;">    6 : 秒(Second)</span></span>
<span class="line"><span style="color:#A6ACCD;">    7 : ミリ秒(Milliseconds)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>たとえば、</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">例 ：</span></span>
<span class="line"><span style="color:#A6ACCD;">    a=gettime(4)   ; いま何時?</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>は、変数aに現在時刻が何時かを代入します。</p><p><strong>参照</strong>:</p><h2 id="str" tabindex="-1">str <a class="header-anchor" href="#str" aria-label="Permalink to &quot;str {#str}&quot;">​</a></h2><p>文字列に変換</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 変換元の値または変数</p><p><strong>説明</strong>:</p><p>p1で指定された値を文字列にしたものを返します。</p><p><strong>参照</strong>:</p><p>int double</p><h2 id="dirinfo" tabindex="-1">dirinfo <a class="header-anchor" href="#dirinfo" aria-label="Permalink to &quot;dirinfo {#dirinfo}&quot;">​</a></h2><p>ディレクトリ情報の取得</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0〜5 : 取得するタイプ</p><p><strong>説明</strong>:</p><p>p1で指定したタイプのディレクトリ名を返します。 取得するタイプは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    0 : カレント(現在の)ディレクトリ(dir_cur)</span></span>
<span class="line"><span style="color:#A6ACCD;">    1 : HSPの実行ファイルがあるディレクトリ(dir_exe)</span></span>
<span class="line"><span style="color:#A6ACCD;">    2 : Windowsディレクトリ(dir_win)</span></span>
<span class="line"><span style="color:#A6ACCD;">    3 : Windowsのシステムディレクトリ(dir_sys)</span></span>
<span class="line"><span style="color:#A6ACCD;">    4 : コマンドライン文字列(dir_cmdline)</span></span>
<span class="line"><span style="color:#A6ACCD;">    5 : HSPTVディレクトリ(dir_tv)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>p1を省略することはできません。 また、p1に0x10000以上の値を指定した場合は、ビット0〜15までをCSIDL値として特殊フォルダの取得を行ないます。 これにより、デスクトップ(0x10000)やマイドキュメント(0x10005)等のシステムが管理しているほとんどのフォルダを取得することができます。 通常は、hspdef.as内で定義されてる「dir_*」マクロを通してご使用ください。</p><p><strong>参照</strong>:</p><p>dir_cur dir_exe dir_win dir_sys dir_cmdline dir_tv</p><h2 id="double" tabindex="-1">double <a class="header-anchor" href="#double" aria-label="Permalink to &quot;double {#double}&quot;">​</a></h2><p>実数値に変換</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 変換元の値または変数</p><p><strong>説明</strong>:</p><p>p1で指定された値を実数にしたものを返します。 値が文字列の場合は、数値文字列の場合はその数値に、 それ以外は0になります。</p><p><strong>参照</strong>:</p><p>int str</p><h2 id="sin" tabindex="-1">sin <a class="header-anchor" href="#sin" aria-label="Permalink to &quot;sin {#sin}&quot;">​</a></h2><p>サイン値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=(0.0) : 角度値(ラジアン)</p><p><strong>説明</strong>:</p><p>p1のサイン(正弦)値を実数で返します。 p1で指定する単位はラジアン(2πが360度)になります。</p><p><strong>参照</strong>:</p><p>cos tan atan</p><h2 id="cos" tabindex="-1">cos <a class="header-anchor" href="#cos" aria-label="Permalink to &quot;cos {#cos}&quot;">​</a></h2><p>コサイン値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=(0.0) : 角度値(ラジアン)</p><p><strong>説明</strong>:</p><p>p1のコサイン(余弦)値を実数で返します。 p1で指定する単位はラジアン(2πが360度)になります。</p><p><strong>参照</strong>:</p><p>sin tan atan</p><h2 id="tan" tabindex="-1">tan <a class="header-anchor" href="#tan" aria-label="Permalink to &quot;tan {#tan}&quot;">​</a></h2><p>タンジェント値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=(0.0) : 角度値(ラジアン)</p><p><strong>説明</strong>:</p><p>p1のタンジェント(正接)値を実数で返します。 p1で指定する単位はラジアン(2πが360度)になります。</p><p><strong>参照</strong>:</p><p>sin cos atan</p><h2 id="atan" tabindex="-1">atan <a class="header-anchor" href="#atan" aria-label="Permalink to &quot;atan {#atan}&quot;">​</a></h2><p>アークタンジェント値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1 : Y値 p2(1.0) : X値</p><p><strong>説明</strong>:</p><p>p1をY、p2をXの値として、 Y/Xの角度(アークタンジェント値)を実数のラジアン単位(2πが360度)で返します。 p2を省略した場合は1.0が使用されます。</p><p><strong>参照</strong>:</p><p>sin cos tan</p><h2 id="sqrt" tabindex="-1">sqrt <a class="header-anchor" href="#sqrt" aria-label="Permalink to &quot;sqrt {#sqrt}&quot;">​</a></h2><p>ルート値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0.0〜(0.0) : ルートを求める値</p><p><strong>説明</strong>:</p><p>p1のルート(平方根)値を、実数で返します。 p1にマイナス値を指定することはできません。</p><p><strong>参照</strong>:</p><h2 id="sysinfo" tabindex="-1">sysinfo <a class="header-anchor" href="#sysinfo" aria-label="Permalink to &quot;sysinfo {#sysinfo}&quot;">​</a></h2><p>システム情報の取得</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0〜 : 取得するタイプ</p><p><strong>説明</strong>:</p><p>p1で指定したタイプのシステム情報値を返します。 取得できるタイプは以下の通りです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  0 : 文字列 OS名とバージョン番号</span></span>
<span class="line"><span style="color:#A6ACCD;">  1 : 文字列 ログイン中のユーザー名</span></span>
<span class="line"><span style="color:#A6ACCD;">  2 : 文字列 ネットワーク上のコンピュータ名</span></span>
<span class="line"><span style="color:#A6ACCD;">  3 : 数値 HSPが使用する言語(0=英語/1=日本語)</span></span>
<span class="line"><span style="color:#A6ACCD;"> 16 : 数値 使用しているCPUの種類(コード)</span></span>
<span class="line"><span style="color:#A6ACCD;"> 17 : 数値 使用しているCPUの数</span></span>
<span class="line"><span style="color:#A6ACCD;"> 33 : 数値 物理メモリサイズの使用量(単位%)</span></span>
<span class="line"><span style="color:#A6ACCD;"> 34 : 数値 全体の物理メモリサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"> 35 : 数値 空き物理メモリサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"> 36 : 数値 スワップファイルのトータルサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"> 37 : 数値 スワップファイルの空きサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"> 38 : 数値 仮想メモリを含めた全メモリサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"> 39 : 数値 仮想メモリを含めた空きメモリサイズ</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>参照</strong>:</p><h2 id="peek" tabindex="-1">peek <a class="header-anchor" href="#peek" aria-label="Permalink to &quot;peek {#peek}&quot;">​</a></h2><p>バッファから1byte読み出し</p><p><strong>グループ</strong>:</p><p>メモリ管理関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1=変数 : 内容を読み出す元の変数名 p2=0〜 : バッファのインデックス(Byte単位)</p><p><strong>説明</strong>:</p><p>変数に保存されたデータメモリ上の任意の場所にある1バイト(8bit)の内容を数値として返します。 関数の戻り値は、0〜255までの整数値になります。</p><p><strong>参照</strong>:</p><p>wpeek lpeek</p><h2 id="wpeek" tabindex="-1">wpeek <a class="header-anchor" href="#wpeek" aria-label="Permalink to &quot;wpeek {#wpeek}&quot;">​</a></h2><p>バッファから2byte読み出し</p><p><strong>グループ</strong>:</p><p>メモリ管理関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1=変数 : 内容を読み出す元の変数名 p2=0〜 : バッファのインデックス(Byte単位)</p><p><strong>説明</strong>:</p><p>変数に保存されたデータメモリ上の任意の場所にある2バイト(16bit)の内容を数値として返します。 関数の戻り値は、0〜65535までの整数値になります。</p><p><strong>参照</strong>:</p><p>peek lpeek</p><h2 id="lpeek" tabindex="-1">lpeek <a class="header-anchor" href="#lpeek" aria-label="Permalink to &quot;lpeek {#lpeek}&quot;">​</a></h2><p>バッファから4byte読み出し</p><p><strong>グループ</strong>:</p><p>メモリ管理関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1=変数 : 内容を読み出す元の変数名 p2=0〜 : バッファのインデックス(Byte単位)</p><p><strong>説明</strong>:</p><p>変数に保存されたデータメモリ上の任意の場所にある4バイト(32bit)の内容を数値として返します。 関数の戻り値は、0〜$ffffffffまでの整数値になります。</p><p><strong>参照</strong>:</p><p>peek wpeek</p><h2 id="callfunc" tabindex="-1">callfunc <a class="header-anchor" href="#callfunc" aria-label="Permalink to &quot;callfunc {#callfunc}&quot;">​</a></h2><p>外部関数の呼び出し</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2,p3) p1 : パラメーターが格納されている配列変数 p2 : 関数アドレス p3 : パラメーター数</p><p><strong>説明</strong>:</p><p>p2で指定されているアドレスをネイティブな関数として呼び出します。 呼び出しの引数として、p1で指定された数値型配列変数に格納されている値を使用します。p3でパラメーター数を指定することができます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">例 :</span></span>
<span class="line"><span style="color:#A6ACCD;">	a.0=1</span></span>
<span class="line"><span style="color:#A6ACCD;">	a.1=2</span></span>
<span class="line"><span style="color:#A6ACCD;">	a.2=3</span></span>
<span class="line"><span style="color:#A6ACCD;">	res = callfunc( a, proc, 3 )</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上の例では、procが示すアドレスの関数を(1,2,3)という引数で呼び出します。 呼び出した関数の戻り値が、そのままcallfuncの戻り値となります。 この関数は、自前で関数アドレスを用意して呼び出す特殊な状況に使用するものです。 通常は使用する必要がありません。また、外部関数呼び出しに失敗した場合には、フリーズや予期しない結果が起こる場合があるので、十分に注意して使用するようにしてください。</p><p><strong>参照</strong>:</p><p>#uselib #func</p><h2 id="absf" tabindex="-1">absf <a class="header-anchor" href="#absf" aria-label="Permalink to &quot;absf {#absf}&quot;">​</a></h2><p>実数の絶対値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 絶対値に変換する実数値</p><p><strong>説明</strong>:</p><p>p1の絶対値を実数で返します。 整数の絶対値が必要な場合は、abs関数を使用してください。</p><p><strong>参照</strong>:</p><p>abs</p><h2 id="abs" tabindex="-1">abs <a class="header-anchor" href="#abs" aria-label="Permalink to &quot;abs {#abs}&quot;">​</a></h2><p>整数の絶対値を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 絶対値に変換する整数値</p><p><strong>説明</strong>:</p><p>p1の絶対値を整数で返します。 実数の絶対値が必要な場合は、absf関数を使用してください。</p><p><strong>参照</strong>:</p><p>absf</p><h2 id="logf" tabindex="-1">logf <a class="header-anchor" href="#logf" aria-label="Permalink to &quot;logf {#logf}&quot;">​</a></h2><p>対数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0.0〜(0.0) : 対数を求める値</p><p><strong>説明</strong>:</p><p>p1の対数(log)値を、実数で返します。 p1に0を指定した場合は無限大(INF)を返します。</p><p><strong>参照</strong>:</p><p>expf</p><h2 id="expf" tabindex="-1">expf <a class="header-anchor" href="#expf" aria-label="Permalink to &quot;expf {#expf}&quot;">​</a></h2><p>指数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1=0.0〜(0.0) : 指数を求める値</p><p><strong>説明</strong>:</p><p>p1の指数(exp)値を、実数で返します。 オーバーフローした場合は無限(INF)を返し、アンダーフローした場合は0を返します。</p><p><strong>参照</strong>:</p><p>logf</p><h2 id="limit" tabindex="-1">limit <a class="header-anchor" href="#limit" aria-label="Permalink to &quot;limit {#limit}&quot;">​</a></h2><p>一定範囲内の整数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2,p3) p1 : 対象となる値 p2 : 最小値 p3 : 最大値</p><p><strong>説明</strong>:</p><p>p1に指定した値を、p2〜p3の範囲内に収まる整数に変換したものを返します。 p1の値がp2よりも小さい場合は、p2の値が返され、p1の値がp3よりも大きい場合にはp3の値が返されます。 これにより、limit関数が返す値は、必ずp2〜p3の範囲内となります。 p2パラメーターを省略した場合は、最小値の制限を行ないません。 p3パラメーターを省略した場合は、最大値の制限を行ないません。 実数の範囲を求める場合には、limitf関数を使用してください。</p><p><strong>参照</strong>:</p><p>limitf</p><h2 id="limitf" tabindex="-1">limitf <a class="header-anchor" href="#limitf" aria-label="Permalink to &quot;limitf {#limitf}&quot;">​</a></h2><p>一定範囲内の実数を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2,p3) p1 : 対象となる値 p2 : 最小値 p3 : 最大値</p><p><strong>説明</strong>:</p><p>p1に指定した値を、p2〜p3の範囲内に収まる実数に変換したものを返します。 p1の値がp2よりも小さい場合は、p2の値が返され、p1の値がp3よりも大きい場合にはp3の値が返されます。 これにより、limitf関数が返す値は、必ずp2〜p3の範囲内となります。 p2パラメーターを省略した場合は、最小値の制限を行ないません。 p3パラメーターを省略した場合は、最大値の制限を行ないません。 整数の範囲を求める場合には、limit関数を使用してください。</p><p><strong>参照</strong>:</p><p>limit</p><h2 id="varuse" tabindex="-1">varuse <a class="header-anchor" href="#varuse" aria-label="Permalink to &quot;varuse {#varuse}&quot;">​</a></h2><p>変数の使用状況を返す</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 使用状況を調べる変数</p><p><strong>説明</strong>:</p><p>p1に指定した変数の使用状況を返します。 varuseは、モジュール型やCOMオブジェクト型の変数など、 実態を持たない状況が発生する場合にのみ有効です。 指定された変数が有効であれば1を、そうでなければ0を返します。 モジュール型変数であれば、未使用(0)か、初期化済み(1)、または他の変数のクローン(2)かどうかを調べることができます。 COMオブジェクト型であれば、有効なCOMオブジェクトを保持しているかを調べられます。</p><p><strong>参照</strong>:</p><p>newmod delmod</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="libptr" tabindex="-1">libptr <a class="header-anchor" href="#libptr" aria-label="Permalink to &quot;libptr {#libptr}&quot;">​</a></h2><p>外部呼出しコマンドの情報アドレスを得る</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : アドレスを調べるコマンド</p><p><strong>説明</strong>:</p><p>p1に指定したコマンドの情報アドレスを取得して整数値として返します。 外部DLL呼び出しコマンドや関数をパラメーターとして指定することで、コマンドに関する情報が格納されているSTRUCTDAT構造体のアドレスを取得することができます。 STRUCTDAT構造体は、HSPSDK内で以下のように定義されています。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	typedef struct STRUCTDAT {</span></span>
<span class="line"><span style="color:#A6ACCD;">	short	index;           // base LIBDAT index</span></span>
<span class="line"><span style="color:#A6ACCD;">	short	subid;           // struct index</span></span>
<span class="line"><span style="color:#A6ACCD;">	int	prmindex;            // STRUCTPRM index(MINFO)</span></span>
<span class="line"><span style="color:#A6ACCD;">	int	prmmax;              // number of STRUCTPRM</span></span>
<span class="line"><span style="color:#A6ACCD;">	int	nameidx;             // name index (DS)</span></span>
<span class="line"><span style="color:#A6ACCD;">	int	size;                // struct size (stack)</span></span>
<span class="line"><span style="color:#A6ACCD;">	int	otindex;             // OT index(Module)  / cleanup flag(Dll)</span></span>
<span class="line"><span style="color:#A6ACCD;">	union {</span></span>
<span class="line"><span style="color:#A6ACCD;">		void	*proc;       // proc address</span></span>
<span class="line"><span style="color:#A6ACCD;">		int	funcflag;        // function flags(Module)</span></span>
<span class="line"><span style="color:#A6ACCD;">	};</span></span>
<span class="line"><span style="color:#A6ACCD;">	} STRUCTDAT;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>p1にCOM呼び出しコマンドやユーザー定義命令、 ユーザー定義関数を指定した場合も同様にSTRUCTDAT構造体のアドレスが取得されます。 libptr関数は、HSPが使用している内部データへのアクセスを補助するもので、ここで扱う情報の内容について十分な知識を持った上で使用するようにしてください。 通常の使用範囲では、この関数を利用したり覚えておく必要はありません。</p><p>STRUCTDAT構造体を参照することで、 外部呼出しDLLのアドレスや、DLLハンドルなどの情報を得ることが可能です。</p><p><strong>参照</strong>:</p><p>varptr</p><p><strong>例</strong>:</p><pre><code>#uselib &quot;user32.dll&quot;
#func MessageBoxA &quot;MessageBoxA&quot; int,sptr,sptr,int

ladr=libptr( MessageBoxA )
dupptr lptr,ladr,28	; STRUCTDAT構造体を取得
lib_id=wpeek(lptr,0)
mes &quot;LIB#&quot;+lib_id
mref hspctx,68
linf_adr=lpeek( hspctx, 832 )
dupptr linf,linf_adr + lib_id*16,16	; LIBDAT構造体を取得
dll_flag = linf(0)
dll_name = linf(1)
dll_handle = linf(2)
mes &quot;FLAG(&quot;+dll_flag+&quot;) NAME_ID#&quot;+dll_name
mes &quot;HANDLE=&quot;+strf(&quot;%x&quot;,dll_handle)
stop
</code></pre><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="comevdisp" tabindex="-1">comevdisp <a class="header-anchor" href="#comevdisp" aria-label="Permalink to &quot;comevdisp {#comevdisp}&quot;">​</a></h2><p>COMイベントの内容を確認</p><p><strong>グループ</strong>:</p><p>COMオブジェクト操作関数</p><p><strong>パラメーター</strong>:</p><p>(p1) p1 : 変数名</p><p><strong>説明</strong>:</p><p>p1で指定された変数(COMオブジェクト型)のイベントサブルーチン内で、イベントのディスパッチID(DISPID)を取得します。 p1で指定された変数は、comevent命令により初期化されている必要があります。 また、取得は必ずイベントサブルーチン内で行なう必要があります。</p><p><strong>参照</strong>:</p><p>comevent comevarg</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="powf" tabindex="-1">powf <a class="header-anchor" href="#powf" aria-label="Permalink to &quot;powf {#powf}&quot;">​</a></h2><p>累乗（べき乗）を求める</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1, p2) p1 : 底（0以上） p2 : 指数</p><p><strong>説明</strong>:</p><p>p1をp2乗した値を求めます。結果は実数で与えられます。 p1は必ず正でなければなりません。負の場合はエラーにはなりませんが、非数（-1.#IND00）が返ります。 p2は正負どちらでも構いません。また、実数を指定することも可能です。</p><p><strong>例</strong>:</p><pre><code>repeat 5, -2
	mes &quot;10の&quot; + cnt + &quot;乗は&quot; + powf(10, cnt) + &quot;です。&quot;
loop
stop
</code></pre><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="getease" tabindex="-1">getease <a class="header-anchor" href="#getease" aria-label="Permalink to &quot;getease {#getease}&quot;">​</a></h2><p>イージング値を整数で取得</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1(0) : 時間経過値(整数値) p2(4096) : 時間経過値の最大(整数値)</p><p><strong>説明</strong>:</p><p>決められた範囲の数値を任意の計算式で補間するイージング関数の計算結果値を整数で取得します。 イージング関数を使用する際には、必ず先にsetease命令により出力される最小値、最大値および計算式を設定しておく必要があります。 p1で指定する時間経過値は、0から始まる整数値で、時間経過値の最大(p2パラメーター)までを指定することで、イージング関数の計算結果を返します。 最大値(p2パラメーター)を省略した場合は、4096が使用されます。 通常は、時間経過値がマイナスの値だった場合は、0とみなされます。また、時間経過値が最大値(p2パラメーター)を超えた場合も、最大値として扱われます。 (ただし、setease命令による計算式のタイプ設定で、ease_loop(補間のループ)を加算した場合は、範囲外の値も含めて補間のループ(繰り返し)を行ないます。)</p><p><strong>参照</strong>:</p><p>setease geteasef</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul><h2 id="geteasef" tabindex="-1">geteasef <a class="header-anchor" href="#geteasef" aria-label="Permalink to &quot;geteasef {#geteasef}&quot;">​</a></h2><p>イージング値を実数で取得</p><p><strong>グループ</strong>:</p><p>基本入出力関数</p><p><strong>パラメーター</strong>:</p><p>(p1,p2) p1(0) : 時間経過値(実数値) p2(1.0) : 時間経過値の最大(実数値)</p><p><strong>説明</strong>:</p><p>決められた範囲の数値を任意の計算式で補間するイージング関数の計算結果値を実数で取得します。 イージング関数を使用する際には、必ず先にsetease命令により出力される最小値、最大値および計算式を設定しておく必要があります。 p1で指定する時間経過値は、0から始まる実数値で、時間経過値の最大(p2パラメーター)までを指定することで、イージング関数の計算結果を返します。 最大値(p2パラメーター)を省略した場合は、1.0が使用されます。 通常は、時間経過値がマイナスの値だった場合は、0とみなされます。また、時間経過値が最大値(p2パラメーター)を超えた場合も、最大値として扱われます。 (ただし、setease命令による計算式のタイプ設定で、ease_loop(補間のループ)を加算した場合は、範囲外の値も含めて補間のループ(繰り返し)を行ないます。) geteasef命令はより細かいイージング関数の計算結果を取得します。通常の座標値など整数で渡される値を取得する場合は、getease関数を使用した方が高速になります。</p><p><strong>参照</strong>:</p><p>setease getease</p><p><strong>非対応</strong>:</p><ul><li>Let</li></ul>`,395),e=[o];function l(r,i,g,c,d,h){return n(),s("div",null,e)}const A=p(t,[["render",l]]);export{u as __pageData,A as default};
