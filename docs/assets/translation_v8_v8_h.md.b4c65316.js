import{_ as a,o as l,c as e,Q as i}from"./chunks/framework.92ce8a2a.js";const v=JSON.parse('{"title":"V8 APIリファレンスガイド","description":"","frontmatter":{},"headers":[],"relativePath":"translation/v8/v8_h.md","filePath":"translation/v8/v8_h.md","lastUpdated":1693982070000}'),o={name:"translation/v8/v8_h.md"},t=i('<h1 id="v8-apiリファレンスガイド" tabindex="-1">V8 APIリファレンスガイド <a class="header-anchor" href="#v8-apiリファレンスガイド" aria-label="Permalink to &quot;V8 APIリファレンスガイド&quot;">​</a></h1><ul><li><a href="https://v8.github.io/api/head/index.html" target="_blank" rel="noreferrer">Doxygen</a></li></ul><nav class="table-of-contents"><ul><li><a href="#v8パブリックc-api">V8パブリックC++ API</a><ul><li><a href="#概要">概要</a></li><li><a href="#v8インスタンスの設定と実行">V8インスタンスの設定と実行</a></li><li><a href="#ecmascriptのような機能">ECMAScriptのような機能</a></li><li><a href="#apiオブジェクト">APIオブジェクト</a></li><li><a href="#v8インスペクター">V8インスペクター</a></li></ul></li><li><a href="#oilpan-c-のガベージコレクション">Oilpan: C++のガベージコレクション</a><ul><li><a href="#主要特性">主要特性</a></li><li><a href="#スレッディング・モデル">スレッディング・モデル</a></li><li><a href="#ヒープ分割">ヒープ分割</a></li><li><a href="#正確で保守的なガベージコレクション">正確で保守的なガベージコレクション</a></li><li><a href="#アトミック、インクリメンタル、コンカレント・ガベージコレクション">アトミック、インクリメンタル、コンカレント・ガベージコレクション</a></li><li><a href="#マーキング段階">マーキング段階</a></li><li><a href="#スイープフェーズ">スイープフェーズ</a></li></ul></li></ul></nav><hr><p>V8はGoogleのオープンソースJavaScriptエンジンである。</p><p>この一連の文書は、include/サブディレクトリにあるV8ヘッダーファイルから生成された参考資料を提供する。</p><p>その他の文書については、<a href="https://v8.dev/%E3%80%82" target="_blank" rel="noreferrer">https://v8.dev/。</a></p><p>V8_*接頭辞は、V8パブリックAPIで定義されたマクロのために予約され、エンベッダーのコードと名前の衝突がないことを前提としています。</p><h2 id="v8パブリックc-api" tabindex="-1">V8パブリックC++ API <a class="header-anchor" href="#v8パブリックc-api" aria-label="Permalink to &quot;V8パブリックC++ API&quot;">​</a></h2><h3 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h3><p>V8のパブリックC++ APIは、次の4つのユースケースをサポートすることを目的としています。:</p><ol><li>V8を組み込むアプリケーション(エンベッダーと呼ばれます)が、1つまたは複数のV8インスタンスを設定し、実行できるようにします。</li><li>ECMAScriptのような機能をエンベッダーに公開する。</li><li>APIオブジェクトを公開することで、エンベッダーがECMAScriptと対話できるようにする。</li><li>V8デバッガ（インスペクタ）へのアクセスを提供する。</li></ol><h3 id="v8インスタンスの設定と実行" tabindex="-1">V8インスタンスの設定と実行 <a class="header-anchor" href="#v8インスタンスの設定と実行" aria-label="Permalink to &quot;V8インスタンスの設定と実行&quot;">​</a></h3><p>V8は、スレッド上で作業をスケジューリングしたり、メモリを割り当てたりする機能など、特定のOSレベルのプリミティブにアクセスする必要がある。</p><p>エンベッダは、<code>v8::Platform</code> インターフェースを通して、これらのプリミティブへのアクセス方法を定義することができます。V8は基本的な実装をバンドルしていますが、エンベッダ自身が <code>v8::Platform</code> を実装することを強く推奨します。</p><p>現在、<code>v8::ArrayBuffer::Allocator</code> は <code>v8::Isolate</code> ファクトリーメソッドに渡される。しかし、すべてのV8インスタンスが1つのアロケータを共有する必要があるので、概念的には<code>v8::Platform</code>の一部でもあるはずだ。</p><p><code>v8::Platform</code>が設定されると、<code>v8::Isolate</code>を作成することができる。 それ以降の V8 とのやり取りはすべて、参照する <code>v8::Isolate</code> を明示的に参照しなければならない。全てのAPIメソッドは最終的に <code>v8::Isolate</code> パラメータを取るべきである。</p><p>V8のインスタンスが不要になったとき、それぞれの <code>v8::Isolate</code> を破棄することで破棄できる。. エンベッダが<code>v8::Isolate</code>に関連する全てのメモリを解放したい場合、まず、その<code>v8::Isolate</code>に関連する全てのグローバルハンドルをクリアしなければなりません。</p><h3 id="ecmascriptのような機能" tabindex="-1">ECMAScriptのような機能 <a class="header-anchor" href="#ecmascriptのような機能" aria-label="Permalink to &quot;ECMAScriptのような機能&quot;">​</a></h3><p>一般的に、C++ APIは、V8で動作するスクリプトで利用できない機能を有効にすべきではありません。 経験上、このようなAPIメソッドを長期的に維持することは不可能だ。 しかし、スクリプトでも利用できる機能、つまりECMAScript標準に定義されている機能は、そのまま残りますし、エンベッダーに安全に公開することができます。</p><p>また、C++ APIは使い心地がよく、新しいパラダイムを学ぶ必要もないはずだ。 スクリプトに公開されるAPIが人間工学的に優れたものを提供することを目指しているのと同様に、このAPIサーフェスに対しても、合理的な開発者体験を提供することを目指すべきである。</p><p>ECMAScriptは例外を多用しますが、V8のC++コードはC++の例外を使いません。 そのため、例外を投げることができるすべての API メソッドは、 <code>v8::Maybe&lt;&gt;</code> または <code>v8::MaybeLocal&lt;&gt;</code> の結果を返し、どのコンテキストで例外が発生するかを示す <code>v8::Local&lt;v8::Context&gt;</code> パラメータを取ることでそのことを示すべきである。</p><h3 id="apiオブジェクト" tabindex="-1">APIオブジェクト <a class="header-anchor" href="#apiオブジェクト" aria-label="Permalink to &quot;APIオブジェクト&quot;">​</a></h3><p>V8では、エンベッダーに特別なオブジェクトを定義し、スクリプトに追加の機能やAPIを公開することができます。最も顕著な例は、BlinkにおけるHTML DOMの公開です。他の例としては、node.jsなどがあります。このAPIサーフェスを通じてどのような機能を公開したいかは、あまり明確ではない。経験則として、私たちはWebIDLとHTML仕様で定義された操作を公開したいと考えています。これらの要件はある程度安定しており、node.jsを含む他のエンベッダーの要件のスーパーセットであると想定しています。</p><p>理想的には、これらの仕様で定義されたAPIサーフェスがECMAScript仕様にフックされることで、APIの長期的な安定性が保証される。</p><h3 id="v8インスペクター" tabindex="-1">V8インスペクター <a class="header-anchor" href="#v8インスペクター" aria-label="Permalink to &quot;V8インスペクター&quot;">​</a></h3><p>V8のすべてのデバッグ機能は、インスペクタ・プロトコルで公開されるべきです。ただし、v8-profiler.hを介して公開されるプロファイリング機能は例外です。インスペクタのプロトコルを変更する場合は、後方互換性と保守性を確保する必要があります。</p><h2 id="oilpan-c-のガベージコレクション" tabindex="-1">Oilpan: C++のガベージコレクション <a class="header-anchor" href="#oilpan-c-のガベージコレクション" aria-label="Permalink to &quot;Oilpan: C++のガベージコレクション&quot;">​</a></h2><p>Oilpanは、C++用のオープンソースのガベージコレクションライブラリであり、スタンドアロンで、またはV8のJavaScriptガベージコレクタと連携して使用することができる。Oilpanは、（オブジェクトのサブセットに対して）限定的なコンパクションを伴うマークアンドスイープガベージコレクション（GC）を実装する。</p><h3 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h3><ul><li>トレースベースのガベージコレクション</li><li>インクリメンタルマーキングとコンカレントマーキング</li><li>インクリメンタルおよびコンカレント・スイープ</li><li>正確なオンヒープ・メモリ・レイアウト</li><li>保守的なオンスタック・メモリ・レイアウト</li><li>スタックを考慮した収集と考慮しない収集が可能</li><li>選択されたスペースに対する非インクリメンタルかつ非同時のコンパクション</li></ul><p>C++コードの管理にOilpanを使い始める方法については、Hello Worldの例を参照。</p><p>OilpanはV8のプロジェクト組織に従っており、コントリビュートを受け入れ、安定したAPIを提供する方法などを参照。</p><h3 id="スレッディング・モデル" tabindex="-1">スレッディング・モデル <a class="header-anchor" href="#スレッディング・モデル" aria-label="Permalink to &quot;スレッディング・モデル&quot;">​</a></h3><p>Oilpanはスレッドローカルガベージコレクションを特徴としており、ヒープはスレッド間で共有されないと仮定している。言い換えると、オブジェクトは、それらを割り当てたのと同じスレッド上のガベージコレクタによってアクセスされ、最終的に取り戻される。これによりOilpanは、他のスレッドで実行されているミューテータと並行してガベージコレクションを実行できる。</p><p>他のスレッドのヒープに属するオブジェクトへの参照は、クロススレッドルートを使用してモデル化される。これは、オンヒープからオンヒープへの参照にも当てはまる。</p><p>Oilpanのヒープは、特に断りのない限り、通常、異なるスレッドからアクセスすることはできません。</p><h3 id="ヒープ分割" tabindex="-1">ヒープ分割 <a class="header-anchor" href="#ヒープ分割" aria-label="Permalink to &quot;ヒープ分割&quot;">​</a></h3><p>Oilpanのヒープはスペースに分割される。オブジェクトのためのスペースは、いくつかの基準によって選択される。例えば：</p><ul><li>64KiB以上のオブジェクトはラージオブジェクトスペースに割り当てられる。</li><li>オブジェクトは専用のカスタムスペースに割り当てることができる。カスタムスペースはコンパクトにすることもできます。</li><li>その他のオブジェクトは、サイズに応じてバケット化された通常のページスペースのいずれかに割り当てられます。</li></ul><h3 id="正確で保守的なガベージコレクション" tabindex="-1">正確で保守的なガベージコレクション <a class="header-anchor" href="#正確で保守的なガベージコレクション" aria-label="Permalink to &quot;正確で保守的なガベージコレクション&quot;">​</a></h3><p>Oilpanは2種類のGCをサポートする：</p><ol><li>保守的GC。GCが保守的と呼ばれるのは、通常のネイティブスタックが空でない間に実行される場合である。この場合、ネイティブスタックは、Oilpanのヒープ内のオブジェクトへの参照を含むかもしれない。GCはネイティブスタックをスキャンし、ネイティブスタックを介して発見されたポインタをルートセットの一部として扱う。この種のGCは不正確であると考えられている。なぜなら、スタック上の参照以外の値が、誤ってヒープ上のオブジェクトへの参照として現れる可能性があり、これは、実際の参照としてアプリケーションから到達できないにもかかわらず、これらのオブジェクトが生かされることを意味するからである。</li><li>正確なGC。正確なGCは、プラットフォームを介してエンベッダによって制御されるイベントループの終了時にトリガされます。この時点で、Oilpanのヒープを指すオンスタック参照がないことが保証される。これは、他の値型を参照と混同するリスクがないことを意味する。Oilpanは、ヒープ上のオブジェクトレイアウトに関する正確な知識を持っているため、メモリ上のどこにポインタがあるかを正確に知っている。Oilpanは、通常のルートセットからマークを開始するだけで、すべてのガベージを正確に収集できる。</li></ol><h3 id="アトミック、インクリメンタル、コンカレント・ガベージコレクション" tabindex="-1">アトミック、インクリメンタル、コンカレント・ガベージコレクション <a class="header-anchor" href="#アトミック、インクリメンタル、コンカレント・ガベージコレクション" aria-label="Permalink to &quot;アトミック、インクリメンタル、コンカレント・ガベージコレクション&quot;">​</a></h3><p>Oilpanには3つの動作モードがある：</p><ol><li>アトミックGC。すべてのフェーズ（例えば、マーキングとスイープを参照）を含むGCサイクル全体が、1回の休止で前後に実行される。この動作モードは、Stop-The-World（STW）ガベージコレクションとしても知られている。この動作モードは、（1回の長い休止のために）最もジャンクが多くなりますが、全体的には最も効率的です（例えば、書き込みバリアが不要です）。</li><li>インクリメンタルGC。ガベージ・コレクション作業は、ミューテーターとインターリーブされた複数のステップに分割される。各ステップは、ミューテーター・タスクの間の専用タスクとして、あるいは必要に応じてミューテーター・タスクの間に実行される小さな作業の塊です。インクリメンタルGCを使用すると、オブジェクト・グラフへの変更を記録する書き込みバリアが必要になる。インクリメンタルなステップの後には、ガベージコレクションを確定するために、より小さなアトミックな休止時間が続く。作業チャンクが小さくなるため、休止時間が短くなり、ジャンクの低減に役立つ。</li><li>コンカレントGC。これはGCの最も一般的なタイプである。これはインクリメンタルGCの上に構築され、ガベージコレクション作業の多くをミューテーター・スレッドからバックグラウンド・スレッドにオフロードします。コンカレントGCを使用することで、ミューテーター・スレッドはGCに費やす時間を減らし、実際のミューテーターにより多くの時間を費やすことができます。</li></ol><h3 id="マーキング段階" tabindex="-1">マーキング段階 <a class="header-anchor" href="#マーキング段階" aria-label="Permalink to &quot;マーキング段階&quot;">​</a></h3><p>マーキング段階は以下のステップからなる：</p><p>1.ルートセット内のすべてのオブジェクトにマークを付ける。 2.2. 各オブジェクトに定義された <code>Trace()</code> メソッドを呼び出して、ルートセットから遷移的に到達可能なすべてのオブジェクトをマークする。 3.到達不可能なオブジェクトへの弱いハンドルをすべて消去し、弱いコールバックを実行する。</p><p>マーキングフェーズは、3つのステップを次々に実行するストップ・ザ・ワールド方式でアトミックに実行することができる。</p><p>また、インクリメンタル/コンカレントに実行することもできる。インクリメンタル／コンカレント・マーキングでは、ステップ1はミューテーターが制御を回復するまでの短い休止の間に実行される。ステップ 2 は、ミューテーターとインターリーブされた形で繰り返し実行される。GCがファイナライズする準備ができたとき、すなわちステップ2が（ほぼ）終了したとき、別の短い休止がトリガされ、その間にステップ2が終了し、ステップ3が実行される。</p><p>ユーザーアフターフリー（UAF）の問題を防ぐために、Oilpanはオブジェクトグラフのすべてのエッジについて知っている必要がある。これは、オンスタックポインタを除くすべてのポインタが、Oilpanのハンドル（すなわち、<code>Persistent&lt;&gt;</code>、<code>Member&lt;&gt;</code>、<code>WeakMember&lt;&gt;</code>）でラップされなければならないことを意味する。オンヒープオブジェクトへの未加工ポインタは、Oilpanが観察できないエッジを作り、UAF問題を引き起こす。 したがって、未加工ポインタは、オンヒープオブジェクトを参照するために使用してはならない（ネイティブスタック上の未加工ポインタを除く）。</p><h3 id="スイープフェーズ" tabindex="-1">スイープフェーズ <a class="header-anchor" href="#スイープフェーズ" aria-label="Permalink to &quot;スイープフェーズ&quot;">​</a></h3><p>スイープ段階は以下のステップで構成される。:</p><ol><li>プリファイナライザーを起動する。この時点では、デストラクタは起動されておらず、メモリも回収されていない。プリファイナライザは、デストラクションされる可能性のあるオブジェクトであっても、他のすべてのオンヒープ・オブジェクトにアクセスすることが許される。</li><li>スイープは、死んだ（到達不可能な）オブジェクトのデストラクタを呼び出し、将来の割り当てで再利用されるメモリを取り戻す。</li></ol><p>デストラクタの順番や実行のタイミングについて仮定してはならない。デストラクタが呼び出される順番は保証されていない。そのため、デストラクタは（すでにデストラクトされているかもしれない）他のオンヒープ・オブジェクトにアクセスしてはならない。あるデストラクタがやむを得ず他のオンヒープ・オブジェクトにアクセスする必要がある場合、それはプリファイナライザに変換されなければならない。プリファイナライザは、他のオンヒープ・オブジェクトにアクセスすることが許される。</p><p>ミューテーターは、すべてのデストラクターが実行される前に再開されます。例えば、XがYのクライアントで、Yがクライアントのリストを保持している場合を考えてみよう。XのデストラクタがXをリストから削除することに依存するコードでは、Yがリストを反復してXのメソッドを呼び出し、他のオンヒープ・オブジェクトに触れる可能性があります。これはuse-after-freeを引き起こす。Xのデストラクタに依存しない方法（例えばプリファイナライザ）でミューテータが実行を再開する前に、Xが明示的にリストから削除されるように注意しなければなりません。</p><p>マーキングと同様に、掃引はアトミックなstop-the-world方式で実行することも、インクリメンタル／同時実行することもできます。インクリメンタル／同時スイープの場合、ステップ2はミューテーターとインターリーブされる。インクリメンタル/並行掃引は、別のGCサイクルをトリガーする必要がある場合に備えて、アトミックに終了させることができる。並行掃引の場合でも、C++のセマンティクスを維持するために、デストラクタはオブジェクトが割り当てられたスレッドで実行されることが保証されている。</p><div class="info custom-block"><p class="custom-block-title">備考</p><ul><li>弱い処理が実行されるのは、WeakMemberのホルダー・オブジェクトがポインテッド・オブジェクトより長生きしているときだけです。ホルダー・オブジェクトとポインテッド・オブジェクトが同時に死んだ場合、弱い処理は実行されない。弱い処理が常に実行されることを前提にコードを書くのは間違っている。</li><li>プリファイナライザが重いのは、どのプリファイナライザを呼び出すべきかを決定するために、スレッドが掃引フェーズごとにすべてのプリファイナライザをスキャンする必要があるからです（スレッドは、死んだオブジェクトのプリファイナライザを呼び出す必要があります）。頻繁に生成されるオブジェクトにプリファイナライザを追加することは避けるべきです。</li></ul></div>',59),r=[t];function p(c,h,d,n,s,u){return l(),e("div",null,r)}const P=a(o,[["render",p]]);export{v as __pageData,P as default};
