import{_ as s,c as n,o as a,a as l}from"./app.e18c80f2.js";const A=JSON.parse('{"title":"プログラミングで波形を生成する","description":"","frontmatter":{},"headers":[{"level":2,"title":"C言語で波形を生成する","slug":"c言語で波形を生成する","link":"#c言語で波形を生成する","children":[]},{"level":2,"title":"HSPで波形を生成して再生する","slug":"hspで波形を生成して再生する","link":"#hspで波形を生成して再生する","children":[]},{"level":2,"title":"JavaScriptを使って波形を生成して再生する方法","slug":"javascriptを使って波形を生成して再生する方法","link":"#javascriptを使って波形を生成して再生する方法","children":[]},{"level":2,"title":"まとめ","slug":"まとめ","link":"#まとめ","children":[]}],"relativePath":"note/puroguramingu-de-hakei.md","lastUpdated":1676126774000}'),p={name:"note/puroguramingu-de-hakei.md"},o=l(`<h1 id="プログラミングで波形を生成する" tabindex="-1">プログラミングで波形を生成する <a class="header-anchor" href="#プログラミングで波形を生成する" aria-hidden="true">#</a></h1><p>コンピュータは歴史的に見ても音との相性が良いとは言いがたいところがありました。とくにインターネット上での音声の扱いは難しく再生には Flash や QuickTimePlayer などのプラグインを必要としていました。そのため、音に関するプログラミングは文章や画像と比べると扱いにくさを感じるかもしれません。</p><p>でも、ずっとそうだったわけではありません。NECの作ったPC-98シリーズでは音楽のプログラムを作って演奏することができました。任天堂のファミコンには３種類の波形とノイズを出力するための命令が用意されていました。そして現在、以前と比べると音がずっと扱いやすくなっています。音楽ファイルをブラウザ上で再生できるようになりました。動画も再生できます。</p><p>サウンドプログラミングで最初にぶつかる壁があります。それはどうやって音を鳴らすかという点です。この記事では３つのプログラミング言語を例に解説します。この記事を作成するうえで、次のソースコードを参考にしました。<a href="http://jsdo.it/haii/aMdC%EF%BC%88%E4%BD%9C%E8%80%85%EF%BC%9Ahaii%E3%80%81%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%EF%BC%9AMIT" target="_blank" rel="noreferrer">http://jsdo.it/haii/aMdC（作者：haii、ライセンス：MIT</a> License）</p><h2 id="c言語で波形を生成する" tabindex="-1">C言語で波形を生成する <a class="header-anchor" href="#c言語で波形を生成する" aria-hidden="true">#</a></h2><p>C言語はコンピュータを作る基礎となったプログラミング言語です。C言語そのものには音を再生する機能はありません。そこで波形を生成して再生するために、２通つの方法が用いられます。１つ目はWAVなどのファイルを直接作って出力する方法で、２つ目はOpenALなどを利用してサウンド出力装置を操作する方法です。</p><ol><li>C言語の基本</li></ol><p>WAVファイルを作成して出力するとは、ハードディスクなどの記憶装置にWAVのデータが保存されるということです。まずメモリ上にWAVファイルを生成し、それを記憶装置に保存します。そして保存されたWAVファイルを一般的な再生ソフトを使って再生します。</p><p>C言語では、最初に読み込まれるmainという関数があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>関数とは幾つかの処理をひとまとまりにしたようなものです。main関数はプログラムを実行したら最初に読み込まれる箇所です。C言語で関数は、まず戻り値の型を記述して、関数名と引数の型と名前を記述します。戻り値は処理をしたあとの結果として帰る値で、引数は関数が使われる場面によって変わる値、数学の関数 f(x) の x のようなものです。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">戻り値 関数名(引数) { ...処理... }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>プログラムで戻り値はintで引数はvoidとなっています。intは数値を表す型で、voidは何もないことを表しています</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> ... </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>さらにプログラムを展開すると、main関数の末尾に return 0; という記述があります。その処理で 0 という戻り値を結果として返しています。0 そのものに固有の意味はありませんが、ここでは正常にプログラムが終了したことを表しています。</p><ol start="2"><li>WAVファイル生成のための変数</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>この関数は、変数の宣言で始まります。それぞれプログラムでの役割を持っています。size は波形データのサイズ（バイト単位）、channel は音声ファイルのチャンネル数（1がモノラルで2がステレオ）、bytesPerSec はサンプリング周波数、bitsPerSampleはビット数を表します。これらはWAVファイルのヘッダーを記述するのに必要な情報です。ヘッダーにはそのファイルのサイズやチャンネル数など基本的な情報が含まれています。offset という変数はヘッダーのサイズを表しています。WAVファイルのヘッダーのサイズは44バイトです。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>bytes はヘッダーと波形データの両方を収めるための変数です。このプログラムでもっとも重要な変数です。unsigned char という型は、符号なしでサイズは１バイトであることを表しています。offset はヘッダーサイズを size は波形データのサイズで、その合計の数の配列を作成しています。</p><ol start="2"><li>データをメモリに書き込むための3つの関数</li></ol><p>WAVのヘッダーに１バイトずつ直接書き込むことは可能ですが、プログラムを簡潔にするために３つの関数が作られています。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>１つ目が文字列を文字列分だけバイト列に書き込む関数です。１つ目の引数として符号なしのchar型へのポインタを、２つ目の引数に文字列を受け取ります。ここでのポインタはbytesデータへのオフセットの役割をします。書き込みたい位置のbytesポインタを受け取るので、そのポインタを１ずつ加算してデータへのオフセットを１バイトずつずらしていきます。そこに２つ目の引数の該当する文字を１字ずつ書き込みます。文字列の長さを取得するのに strlen() という関数を使っていますが、これを使用するためには string.h をインクルードする必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>32ビットつまり4バイト書き込むための関数です。１つ目の引数は先ほどの引数と同じで、２つ目の引数に４バイトの符号付き整数 long型を受け取ります。３行目の *bytes = val &amp; 255; は、整数値の8ビット分を取得しています。2進数での8の位までを取得しています。</p><p>&amp; は論理積を表していて、論理積は比較した両方のビットが1の場合だけ1にし、それ以外では0にします。255は、2進数（ビット）で表すと11111111となり、16進数では0xffとなります。255を2バイト整数かつ16進数で表すと0xff00となり、２進数では９の位以降が0となります。論理積ではどちらかが 0 であれば 0 とするので、この計算によって8ビット分だけを取得することができます。</p><p>val = val &gt;&gt; 8; で、ビットを右へ 8 ビットシフトしています。これは9の位から右にあるビットを１のくらいまでずらして持ってきたことになります。そのため２回目のループで論理積を求めるときは元の９〜１６の位の値を取得することができ、３回目、４回目も同じく次の位の８ビット分を取得する、という仕組みになっています。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>２バイト分を書き込む関数です。仕組みは３つ目の関数と同じです。これら３つの関数を使って、WAVデータのためのバイト列を作っていきます。</p><ol start="3"><li>WAVファイルのヘッダー部分を書き込む</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> RIFF</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // RIFF ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">       // ファイルサイズ - 8</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> WAVE</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // WAVE ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> fmt </span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // fmt チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                     // fmt チャンクのバイト数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                      // フォーマットID</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // チャンネル数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">            // サンプリングレート</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // データ速度</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // ブロックサイズ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bitsPerSample</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">          // サンプルあたりのビット数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // data チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                   // 波形データのバイト数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>それぞれコメントで説明されているデータを書き込んでゆきます。bytes配列のポインタをオフセット値として渡して、オフセット値からbytesにデータを書き込んでいます。コメント部分は参考にしたソースコードのものをそのまま引用しています。</p><ol start="4"><li>波形生成してデータを書き込む</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> RIFF</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // RIFF ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">       // ファイルサイズ - 8</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> WAVE</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // WAVE ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> fmt </span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // fmt チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                     // fmt チャンクのバイト数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                      // フォーマットID</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // チャンネル数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">            // サンプリングレート</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // データ速度</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // ブロックサイズ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bitsPerSample</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">          // サンプルあたりのビット数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // data チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                   // 波形データのバイト数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> M_PI</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>この箇所で波形を生成しています。forループでの変数iはオフセット値としても使用しているので増分が2バイトを表す２になっています。M_PIやsin関数を使用するには math.h をインクルードする必要があります。またコンパイルオプションとして -lm を指定することも必要です。</p><ol start="5"><li>生成したデータをファイルに書き込む</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> RIFF</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // RIFF ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">       // ファイルサイズ - 8</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> WAVE</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                 // WAVE ヘッダ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> fmt </span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // fmt チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                     // fmt チャンクのバイト数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                      // フォーマットID</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // チャンネル数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">            // サンプリングレート</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // データ速度</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // ブロックサイズ</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bitsPerSample</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">          // サンプルあたりのビット数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // data チャンク</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                   // 波形データのバイト数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> M_PI</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    FILE </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">fp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">filename </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sample</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wav</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">fp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fopen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wb</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;">sのオープンに失敗しました.\\\\n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> filename</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fwrite</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fclose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>C言語でファイルを読み込んだり書き込んだりするのに、次のような手順でおこないます。まずファイルポインタの宣言を行ない、次にファイルのオープン、次にファイルの読み書き、そしてファイルのクローズをします。ファイルポインタとはFILE型へのポインタのことで、FILE型にはファイルの入出力を行うのに必要な情報を管理しています。fopen関数によってファイルポインタを取得することができます。</p><p>bytes配列に作成したデータは、そのままwavファイルと同等の構造になっています。fwrite関数で、bytes配列の内容をそのままファイルに出力することにより、WAVファイルを作成することができます。</p><ol start="6"><li>C言語でWAVファイルを生成するプログラムの例。</li></ol><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// コンパイルするときの例：gcc test.c -lm -std=c99 -o test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">math.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">M_PI</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.141592</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">val</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">++,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">++)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">bytes </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">255</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        val </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> val </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">88200</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> channel </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> bitsPerSample </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">44</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> RIFF</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> WAVE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> fmt </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">24</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">28</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bytesPerSec </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bitsPerSample </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> channel</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">34</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> bitsPerSample</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeString</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">writeInt32</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">offset </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> M_PI</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    FILE </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">fp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">filename </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sample</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wav</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">fp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fopen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> wb</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">fprintf</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;">sのオープンに失敗しました.\\\\n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> filename</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fwrite</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> fp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fclose</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="hspで波形を生成して再生する" tabindex="-1">HSPで波形を生成して再生する <a class="header-anchor" href="#hspで波形を生成して再生する" aria-hidden="true">#</a></h2><p>HSPはゲーム開発で人気のあるプログラミング言語です。機械語にコンパイルせずに逐次実行していくためインタプリタ言語とも呼ばれます。プログラムは上から１行ずつ実行されます。</p><p>HSPには１バイト、２バイト、４バイトを書き込む命令が標準で実装されています。またメモリ上にあるファイルを画像あるいは音声として読み込むこともできるので、行数がC言語に比べると短くなります。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>WAVデータを作成するのに必要な変数を作成します。内容はC言語の例と同様で、それぞれ波形データのサイズ・チャンネル数・サンプリング周波数・ビット数・ヘッダーのサイズです。HSPではプログラムを実行する前にソースをあらかじめ調べて変数を確保する仕組みになっています。変数がプログラム中に宣言なしに現れても 0 が格納された変数として扱われます。型は代入される内容によって自動的に判別されて変換されます。整数を格納すると数値型として機能するので、上記の変数はすべて数値型です。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sdim bytes, offset + size + 2</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>波形データを格納する bytes 変数を作成しています。HSPは必要に応じて自動的に変数のサイズを変更します。しかし変数に直接バイトを書き込むなどの操作をするときは、あらかじめ必要なメモリを確保しておく必要があります。sdim は文字列変数のメモリをあらかじめ確保しておくための命令です。文字列変数はc言語でいう char 型に近いものです。ここではヘッダーサイズと波形データサイズを足して、またオーバーフローのエラーを回避するために２バイト余分に確保します。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sdim bytes, offset + size + 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 0, RIFF</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 4, offset + size - 8</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 8, WAVE</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 12, fmt </span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 16, 16</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 20, 1</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 22, channel</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 24, bytesPerSec</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 28, bytesPerSec * (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 32, (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 34, bitsPerSample</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 36, data</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 40, size</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>ヘッダー情報を bytes 変数に書き込みます。ここで使われている３つの命令 poke と wpoke と lpoke はそれぞれ１バイト・２バイト・４バイトを書き込むための命令です。poke は文字列を書き込むことも可能です。命令の引数も３つあり１つ目が書き込み先の変数・２つ目が書き込むバイト単位のオフセット値・３つ目が書き込む数値もしくは文字列となっています。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sdim bytes, offset + size + 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 0, RIFF</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 4, offset + size - 8</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 8, WAVE</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 12, fmt </span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 16, 16</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 20, 1</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 22, channel</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 24, bytesPerSec</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 28, bytesPerSec * (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 32, (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 34, bitsPerSample</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 36, data</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 40, size</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">i = 0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">repeat</span></span>
<span class="line"><span style="color:#A6ACCD;">    if i &gt; size : break</span></span>
<span class="line"><span style="color:#A6ACCD;">    wpoke bytes, offset + i, int(sin(i / 4 / M_PI) * 4096)</span></span>
<span class="line"><span style="color:#A6ACCD;">    i += 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>波形データを bytes 変数に格納します。HSPではループ制御をするのに repeat – loop を用います。この命令を使うときは無限ループにならないように、ループを抜ける条件をどこかに記述する必要があります。このプログラムでは if i &gt; size : break がそれにあたります。HSPのバージョン3.0以降からは関数も使えるようになり、sin 関数も用意されています。また標準のマクロとして M_PI が用意されています。sin 関数は結果を 0 から 1 の少数として返すので、十分な音量を確保するために 4096 をかけています。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sdim bytes, offset + size + 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 0, RIFF</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 4, offset + size - 8</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 8, WAVE</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 12, fmt </span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 16, 16</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 20, 1</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 22, channel</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 24, bytesPerSec</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 28, bytesPerSec * (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 32, (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 34, bitsPerSample</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 36, data</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 40, size</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">i = 0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">repeat</span></span>
<span class="line"><span style="color:#A6ACCD;">    if i &gt; size : break</span></span>
<span class="line"><span style="color:#A6ACCD;">    wpoke bytes, offset + i, int(sin(i / 4 / M_PI) * 4096)</span></span>
<span class="line"><span style="color:#A6ACCD;">    i += 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">memfile bytes, 0 , size + offset</span></span>
<span class="line"><span style="color:#A6ACCD;">mmload MEM:a.wav, 0,1</span></span>
<span class="line"><span style="color:#A6ACCD;">mmplay 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>HSPでメモリ上のファイルを再生するための箇所です。memfile で bytes 変数をメモリ上にあるファイルとみなします。mmload はHSP標準の音声ファイルを読み込むための命令で、ファイル名の先頭に MEM: をつけることにより、メモリ上のファイルを参照することができます。ファイル名はダミーのファイル名を指定し、WAVファイルを読み込むので拡張子は wav とします。mmplay 命令は音声を再生するための命令です。</p><p>これまでの例をつなげてみます。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">size = 88200</span></span>
<span class="line"><span style="color:#A6ACCD;">channel = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">bytesPerSec = 44100</span></span>
<span class="line"><span style="color:#A6ACCD;">bitsPerSample = 16</span></span>
<span class="line"><span style="color:#A6ACCD;">offset = 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">sdim bytes, offset + size + 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 0, RIFF</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 4, offset + size - 8</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 8, WAVE</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 12, fmt </span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 16, 16</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 20, 1</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 22, channel</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 24, bytesPerSec</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 28, bytesPerSec * (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 32, (bitsPerSample / 8) * channel</span></span>
<span class="line"><span style="color:#A6ACCD;">wpoke bytes, 34, bitsPerSample</span></span>
<span class="line"><span style="color:#A6ACCD;">poke bytes, 36, data</span></span>
<span class="line"><span style="color:#A6ACCD;">lpoke bytes, 40, size</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">i = 0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">repeat</span></span>
<span class="line"><span style="color:#A6ACCD;">    if i &gt; size : break</span></span>
<span class="line"><span style="color:#A6ACCD;">    wpoke bytes, offset + i, int(sin(i / 4 / M_PI) * 4096)</span></span>
<span class="line"><span style="color:#A6ACCD;">    i += 2.0</span></span>
<span class="line"><span style="color:#A6ACCD;">loop</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">memfile bytes, 0 , size + offset</span></span>
<span class="line"><span style="color:#A6ACCD;">mmload MEM:a.wav, 0,1</span></span>
<span class="line"><span style="color:#A6ACCD;">mmplay 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>これでHSPによるWAV生成プログラムはすべて見たことなります。</p><h2 id="javascriptを使って波形を生成して再生する方法" tabindex="-1">JavaScriptを使って波形を生成して再生する方法 <a class="header-anchor" href="#javascriptを使って波形を生成して再生する方法" aria-hidden="true">#</a></h2><p>JavaScriptでの音声を再生するプログラムは、haiiさんの作成されたソースコードが分かりやすいので、それを用いて解説したいと思います。この記事ではソースを全文掲載はしないので、必要な方はリンクをたどって入手するようになさってください。</p><ol><li>audioタグのsrc属性には文字列による音声が使える</li></ol><p>ブラウザ上で音を生成するためのいくつかの方法があり、HSPの例と同様の方法がブラウザ上でも行えます。JavaScriptで作成したWAVデータを読み込ませるのにHTML5のaudioタグを用います。普通audioタグは</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// バイト配列を文字列に変換</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> temp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>生成したWAVデータをBase64のデータに変換するのに btoa 関数が用いられます。そして btoa 関数の引数として扱えるようにまずWAVデータは文字列に変換しています。Base64データはアルファベットや数字や記号を含めた64+1文字を使って作成されます。</p><p>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ それぞれ左から0から63という数値に対応しています。この64の文字（数値）を組み合わせることにより、元のデータを完全に再現することができるようになります。Base64に変換している箇所は btoa(temp) です。btoaの引数には文字列を使用するので、そのためにバイト配列を文字列に変換する処理を行っています。</p><p>Base64変換の仕組みは、まず3バイト（24ビット）を１つのまとまりとします。そのまとまりを6ビットずつに分け４等分します。6ビット数は全部で64の通りの組み合わせがあり、64の文字でそれに対応させることができます。例えば 000001 は A が対応しています。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// audio タグ作成</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> audio </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">audio</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">audio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">controls </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">audio</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> datauri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(audio)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Base64に変換されたデータはAudioタグの src 属性に渡されます。Javascriptの document.createElement メソッドでaudio要素を生成し、document.body.appendChild メソッドで要素をページに追加しています。その際、Javascriptで直接Audioタグの src 属性にBase64形式の音声データを渡しています。</p><p>このプログラムではJavascriptでAudio要素を追加していますが、他の方法として document.getElementById(”要素のID”).innerHTML = … ; のようにする方法もあります。この方法では仮に div 要素などを作っておき、Javascriptでその内容をAudioタグに書き換えます。その際は … innerHTML = &lt;audio src=” + datauri +”&gt;; というように、src 属性にBase64に変換した音声データを渡すようにします。</p><p>HTML側:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">audio1</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>JavaScript側：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">audio1</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">audio</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> + </span><span style="color:#C792EA;">datauri</span><span style="color:#89DDFF;"> + </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">audio</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span></code></pre></div><p>WAVデータを作成するために、プログラムでは Uint8Arrayというオブジェクトを使用しています。Javascriptでバイナリデータを扱うためのArrayBufferクラスを操作するためのArrayBufferViewの１つです。Uint8Arrayではデータを8ビット符号なし整数として扱うことができます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bytes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(offset </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> size)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>bytes はUint8Arrayオブジェクトですが、配列と同じようにアクセスして読み書きすることができます。この配列にWAVファイルのヘッダー44バイトを書き込み、それに続き波形データを書き込みます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 波形データ書き込み (サイン波)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// サイン波の書き込み処理</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>44バイトのヘッダー情報が格納されたbytes配列に波形データを書き込んでいます。Math.sin メソッドでサイン波の値を求め、音量を上げるために4096倍しています。もしサイン波ではなく矩形波を書き込みたい場合は、次のように書き換えることができます。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4000</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">writeInt16</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bytes</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">offset</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="まとめ" tabindex="-1">まとめ <a class="header-anchor" href="#まとめ" aria-hidden="true">#</a></h2><p>この記事では波形を生成するプログラムをC言語・HSP・Javascriptでどのように行なうかを学ぶことができました。それにはWAVファイルのヘッダーと波形データを作成することが含まれていました。また、それぞれの言語で問題なくWAVデータを作成できることが分かりました。</p>`,81),e=[o];function t(c,r,F,y,D,i){return a(),n("div",null,e)}const b=s(p,[["render",t]]);export{A as __pageData,b as default};
