import{_ as s,c as a,o as l,a as n}from"./app.e18c80f2.js";const F=JSON.parse('{"title":"GLFWビルディングアプリケーション（日本語訳）","description":"","frontmatter":{},"headers":[{"level":2,"title":"GLFWヘッダーファイルのインクルード","slug":"glfwヘッダーファイルのインクルード","link":"#glfwヘッダーファイルのインクルード","children":[]},{"level":2,"title":"GLFWヘッダーオプションマクロ","slug":"glfwヘッダーオプションマクロ","link":"#glfwヘッダーオプションマクロ","children":[]},{"level":2,"title":"適切なライブラリとのリンク","slug":"適切なライブラリとのリンク","link":"#適切なライブラリとのリンク","children":[]},{"level":2,"title":"WindowsでMinGWまたはVisual C++を使用した場合","slug":"windowsでmingwまたはvisual-c-を使用した場合","link":"#windowsでmingwまたはvisual-c-を使用した場合","children":[]},{"level":2,"title":"CMakeとGLFWのソースで","slug":"cmakeとglfwのソースで","link":"#cmakeとglfwのソースで","children":[]},{"level":2,"title":"CMakeとインストールされたGLFWバイナリで","slug":"cmakeとインストールされたglfwバイナリで","link":"#cmakeとインストールされたglfwバイナリで","children":[]},{"level":2,"title":"Unixでmakefileとpkg-configを使用した場合","slug":"unixでmakefileとpkg-configを使用した場合","link":"#unixでmakefileとpkg-configを使用した場合","children":[]},{"level":2,"title":"macOSのXcodeで","slug":"macosのxcodeで","link":"#macosのxcodeで","children":[]},{"level":2,"title":"macOSのコマンドラインで","slug":"macosのコマンドラインで","link":"#macosのコマンドラインで","children":[]}],"relativePath":"translation/GLFW/Guides/building_applications.md","lastUpdated":1676126774000}'),e={name:"translation/GLFW/Guides/building_applications.md"},p=n(`<h1 id="glfwビルディングアプリケーション-日本語訳" tabindex="-1">GLFWビルディングアプリケーション（日本語訳） <a class="header-anchor" href="#glfwビルディングアプリケーション-日本語訳" aria-hidden="true">#</a></h1><p><a href="https://www.glfw.org/docs/latest/build_guide.html" target="_blank" rel="noreferrer">原文</a></p><p>GLFWを使ったアプリケーションのコンパイルとリンクについて扱います。アプリケーションの書き方については<a href="https://www.glfw.org/docs/latest/quick_guide.html" target="_blank" rel="noreferrer">入門チュートリアル</a>から始めてください。GLFWライブラリ自体のコンパイル方法については<a href="https://www.glfw.org/docs/latest/compile_guide.html" target="_blank" rel="noreferrer">GLFWのコンパイル</a>を参照してください。</p><p>このガイドはコンパイルやリンクのためのチュートリアルではありません。Cプログラムのコンパイルとリンクの方法、およびあなたが選んだ開発環境の特定のコンパイラの使用方法についての基本的な理解を前提としています。コンパイルとリンクのプロセスは、C言語プログラミングの教材や開発環境のドキュメントで説明されているはずです。</p><h2 id="glfwヘッダーファイルのインクルード" tabindex="-1">GLFWヘッダーファイルのインクルード <a class="header-anchor" href="#glfwヘッダーファイルのインクルード" aria-hidden="true">#</a></h2><p>OpenGLまたはGLFWを使用するソースファイルには、GLFWヘッダをインクルードする必要があります。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>このヘッダはGLFW APIのすべての定数を定義し、すべての型と関数プロトタイプを宣言しています。デフォルトでは開発環境にあるOpenGLヘッダも含まれます。OpenGL ESヘッダを選択する方法などは<a href="https://www.glfw.org/docs/latest/build_guide.html#build_macros" target="_blank" rel="noreferrer">オプションマクロ</a>を参照してください。</p><p>GLFWヘッダはOpenGLヘッダが必要とするプラットフォーム固有のマクロも定義しているので、ウィンドウシステムヘッダを必要とせずにインクルードすることができます。</p><p>これは必要なときだけ行なうので、ウィンドウシステムヘッダが含まれていても、 GLFWヘッダはそれらのシンボルを再定義しません。逆にWin32のシンボルがすでに定義されている場合はwindows.hは対処できません。</p><p>要点：</p><ul><li>OpenGLまたはOpenGL ESヘッダをポータブルにインクルードするにはGLFWヘッダを使用します</li><li>これらのAPIを直接使用するのでなければウィンドウシステムヘッダを含めないでください</li><li>このようなヘッダが必要な場合はGLFWヘッダの前にインクルードしてください。</li></ul><p><a href="https://github.com/Dav1dde/glad" target="_blank" rel="noreferrer">glad</a>のようなOpenGL拡張ローダーライブラリを使用している場合、拡張ローダーヘッダはGLFWのものよりも先に含まれる必要があります。GLFWは、それ以前に含まれるOpenGLまたはOpenGL ESヘッダー、あるいは拡張ローダーヘッダーを検出しようとし、その後デフォルトのOpenGLヘッダーの包含を無効にします。ほとんどの拡張ローダーはそれ以下の類似のヘッダーを無効にするマクロを定義します。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/gl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>これらのメカニズムは両方とも、拡張ローダーヘッダが既知のマクロを定義することに依存します。そうでない場合、あるいはユーザーがどちらを選ぶかわからない場合、<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_INCLUDE_NONE" target="_blank" rel="noreferrer">GLFW_INCLUDE_NONE</a>マクロはGLFWヘッダーがOpenGLヘッダーを含むことを明示的に防止します。これはまた、2つのヘッダを任意の順序でインクルードすることを可能にします。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GLFW_INCLUDE_NONE</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">GLFW/glfw3.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">glad/gl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="glfwヘッダーオプションマクロ" tabindex="-1">GLFWヘッダーオプションマクロ <a class="header-anchor" href="#glfwヘッダーオプションマクロ" aria-hidden="true">#</a></h2><p>これらのマクロはGLFWヘッダをインクルードする前に定義され、その動作に影響を与えることがあります。</p><p>GLFW_DLLは、WindowsでGLFW DLLを使用する場合に必要であり、コンパイラにGLFW関数がDLLで定義されていることを知らせます。</p><p>以下のマクロは、どのOpenGLまたはOpenGL ES APIヘッダを含めるかを制御します。一度に定義できるのはこれらのうちの1つだけです。</p><blockquote><p>Note: GLFWでは、以下に挙げるAPIヘッダは提供していません。これらはあなたの開発環境、あるいはOpenGL、OpenGL ES、Vulkan SDKから提供され、そのほとんどはKhronos Registryからダウンロードすることができます。</p></blockquote><p>GLFW_INCLUDE_GLCOREARBはGLFWヘッダーに、通常のOpenGLヘッダーの代わりに最新のGL/glcorearb.hヘッダー（macOSではOpenGL/gl3.h）を含ませるようにします。</p><p>GLFW_INCLUDE_ES1はGLFWヘッダーに、通常のOpenGLヘッダーの代わりにOpenGL ES 1.x GLES/gl.hヘッダーをインクルードするようにします。</p><p>GLFW_INCLUDE_ES2はGLFWヘッダーに、通常のOpenGLヘッダーの代わりにOpenGL ES 2.0 GLES2/gl2.hヘッダーをインクルードするようにします。</p><p>GLFW_INCLUDE_ES3はGLFWヘッダーに、通常のOpenGLヘッダーの代わりにOpenGL ES 3.0 GLES3/gl3.hヘッダーを含めるようにします。</p><p>GLFW_INCLUDE_ES31はGLFWヘッダーに、通常のOpenGLヘッダーの代わりにOpenGL ES 3.1 GLES3/gl31.hヘッダーをインクルードするようにsimasu 。</p><p>GLFW_INCLUDE_ES32はGLFWヘッダーに、通常のOpenGLヘッダーの代わりにOpenGL ES 3.2 GLES3/gl32.hヘッダーをインクルードするようにしました。</p><p>GLFW_INCLUDE_NONEはGLFWヘッダーがOpenGLまたはOpenGL ES APIヘッダーを一切含まないようにします。これは拡張ローディング・ライブラリとの組み合わせで有効です。</p><p>上記のインクルードマクロのいずれも定義されていない場合、GLFWが知っているOpenGL、OpenGL ES、拡張ローダーヘッダのインクルードガードを検出しない限り、標準のOpenGL GL/gl.h (macOSではOpenGL/gl.h)がインクルードされます．</p><p>以下のマクロは、追加のAPIヘッダーの包含を制御します。これらのうちのいくつでも、同時に、そして/または、上記のマクロのうちの1つと一緒に定義することができます。</p><p>GLFW_INCLUDE_VULKANは、GLFWヘッダーに、選択されたOpenGLまたはOpenGL ESヘッダーに加え、Vulkan vulkan/vulkan.hヘッダーを含めるようにします。</p><p>GLFW_INCLUDE_GLEXT は、GLFW ヘッダーに、上で選択された OpenGL または OpenGL ES ヘッダーの後に、そのヘッダーに加え、適切な拡張ヘッダーをインクルードするようにします。</p><p>GLFW_INCLUDE_GLUは、ヘッダーに、上で選択されたヘッダーに加え、GLUヘッダーをインクルードするようにします。これは、標準のOpenGLヘッダと一緒に、レガシーコードとの互換性のためにのみ、使用されるべきです。GLUは非推奨であり、新しいコードで使用するべきではありません。</p><blockquote><p>これらのマクロは、GLFW自体のコンパイル中には定義してはいけません。もし、あなたのビルドがGLFWを含み、あなたのビルドファイルでこれらを定義した場合、それらがGLFWのソースに適用されないことを確認してください。</p></blockquote><h2 id="適切なライブラリとのリンク" tabindex="-1">適切なライブラリとのリンク <a class="header-anchor" href="#適切なライブラリとのリンク" aria-hidden="true">#</a></h2><p>GLFWは本質的に、様々なプラットフォーム固有のAPIのラッパーであり、そのため、多くの異なるシステムライブラリに対してリンクする必要があります。GLFWを共有ライブラリ/ダイナミックライブラリ/DLLとして使用する場合、これらのリンクはGLFWが行います。しかし、GLFW を静的ライブラリとして使っている場合は、あなたの実行ファイル がこれらのライブラリにリンクする必要があります。</p><p>WindowsとmacOSでは、システムライブラリのリストは静的で、ビルド環境にハードコードすることができます。以下の開発環境に関するセクションを参照してください。Linuxやその他のUnix系OSの場合、リストは様々ですが、以下のように様々な方法で取得することができます。</p><p>リンクの一般的な入門書としては、David Drysdale著 <a href="https://www.lurklurk.org/linkers/linkers.html" target="_blank" rel="noreferrer">Beginner&#39;s Guide to Linkers</a> がよいでしょう。</p><h2 id="windowsでmingwまたはvisual-c-を使用した場合" tabindex="-1">WindowsでMinGWまたはVisual C++を使用した場合 <a class="header-anchor" href="#windowsでmingwまたはvisual-c-を使用した場合" aria-hidden="true">#</a></h2><p>GLFWライブラリの静的バージョンはglfw3という名前です。このバージョンを使用する場合、GLFWが使用するいくつかのライブラリとのリンクも必要です。</p><p>MinGWを使用してGLFWの静的バージョンとアプリケーションをリンクする場合、明示的にgdi32ともリンクする必要があります。MinGW-w64を含む他のツールチェーンでは、user32やkernel32などの他の依存関係とともに、デフォルトのライブラリのセットに含まれています。</p><p>GLFW DLLのリンクライブラリはglfw3dllという名前です．GLFWのDLL版を使うアプリケーションをコンパイルするときは、 GLFWヘッダをインクルードする前に、<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_DLL" target="_blank" rel="noreferrer">GLFW_DLL</a>マクロを定義する必要があります。これは、コンパイラのスイッチか、ソースコードに定義することで可能です。</p><h2 id="cmakeとglfwのソースで" tabindex="-1">CMakeとGLFWのソースで <a class="header-anchor" href="#cmakeとglfwのソースで" aria-hidden="true">#</a></h2><p>このセクションでは、CMakeを使って、アプリケーションと一緒にGLFWをコンパイル・リンクする方法について説明します。もし、代わりにインストールされたバイナリを使いたい場合は、 [CMakeとインストールされたGLFWバイナリ(<a href="https://www.glfw.org/docs/latest/build_guide.html#build_link_cmake_package" target="_blank" rel="noreferrer">https://www.glfw.org/docs/latest/build_guide.html#build_link_cmake_package</a>)を参照して下さい。</p><p>CMakeLists.txtを少し変更するだけで、アプリケーションと一緒にGLFWのソースツリーをビルドすることができます。</p><p>GLFWをビルドの一部として含める場合、おそらくGLFWのテスト、サンプル、ドキュメントをビルドしたくないと思います。これらを無効にするには、GLFWソースツリーを追加する前に、対応するキャッシュ変数を設定します。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">set</span><span style="color:#FFCB6B;">(GLFW_BUILD_DOCS</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OFF</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CACHE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BOOL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FORCE</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">set</span><span style="color:#FFCB6B;">(GLFW_BUILD_TESTS</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OFF</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CACHE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BOOL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FORCE</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">set</span><span style="color:#FFCB6B;">(GLFW_BUILD_EXAMPLES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OFF</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CACHE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BOOL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FORCE</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWのソースツリーのルートディレクトリをプロジェクトに追加します。これで、glfwターゲットがプロジェクトに追加されます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">add_subdirectory(path/to/glfw</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWが追加されたら、あなたのアプリケーションをglfwターゲットに対してリンクしてください。これにより、現在設定されている GLFW ライブラリとそのリンク時の依存関係、 GLFW ヘッダのインクルードディレクトリ、そして、該当する場合は<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_DLL" target="_blank" rel="noreferrer">GLFW_DLL</a>マクロが追加されます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">target_link_libraries(myapp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">glfw</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWはランタイムに必要なOpenGL、OpenGL ESまたはVulkanライブラリをロードするので、glfwターゲットはOpenGLに依存しないことに注意してください。もしあなたのアプリケーションが、最新の<a href="https://www.glfw.org/docs/latest/context_guide.html#context_glext_auto" target="_blank" rel="noreferrer">拡張ローダーライブラリ</a>を使う代わりに、OpenGLを直接呼び出すなら、OpenGL CMakeパッケージを使ってください。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">find_package(OpenGL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">REQUIRED</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>OpenGLが見つかった場合、OpenGL::GLターゲットがあなたのプロジェクトに追加され、ライブラリとインクルードディレクトリのパスが含まれます。他のライブラリと同様に、これに対してリンクしてください。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">target_link_libraries(myapp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OpenGL::GL</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>CMakeでビルドしたプログラムとGLFWソースの最小限の例については、GitHubの<a href="https://github.com/juliettef/GLFW-CMake-starter" target="_blank" rel="noreferrer">GLFW CMake Starter</a>をご覧ください。</p><h2 id="cmakeとインストールされたglfwバイナリで" tabindex="-1">CMakeとインストールされたGLFWバイナリで <a class="header-anchor" href="#cmakeとインストールされたglfwバイナリで" aria-hidden="true">#</a></h2><p>この節では、GLFWがビルドされインストールされた後、CMakeを使って GLFWをリンクする方法について説明します。もし、あなたのアプリケーションと一緒にビルドしたいのであれば、 <a href="https://www.glfw.org/docs/latest/build_guide.html#build_link_cmake_source" target="_blank" rel="noreferrer">CMakeとGLFWのソース</a>を使ってをご覧ください。</p><p>CMakeLists.txtを少し変更するだけで、GLFWのインストール時に生成されるパッケージとターゲットファイルの場所を特定することができます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">find_package(glfw3</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">REQUIRED</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWがプロジェクトに追加されたら、glfwターゲットでそれに対してリンクします。これにより、GLFWライブラリとそのリンク時の依存関係、GLFWヘッダのインクルードディレクトリ、そして、該当する場合は、<a href="https://www.glfw.org/docs/latest/build_guide.html#GLFW_DLL" target="_blank" rel="noreferrer">GLFW_DLL</a>マクロが追加されます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">target_link_libraries(myapp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">glfw</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWはランタイムに必要なOpenGL、OpenGL ESまたはVulkanライブラリをロードするので、glfwターゲットはOpenGLに依存しないことに注意してください。もしあなたのアプリケーションが、最新の拡張ローダーライブラリを使う代わりに、OpenGLを直接呼び出すなら、OpenGL CMakeパッケージを使ってください。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">find_package(OpenGL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">REQUIRED</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>OpenGLが見つかった場合、OpenGL::GLターゲットがあなたのプロジェクトに追加され、ライブラリとインクルードディレクトリのパスが含まれます。他のライブラリと同様に、これに対してリンクしてください。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">target_link_libraries(myapp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OpenGL::GL</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="unixでmakefileとpkg-configを使用した場合" tabindex="-1">Unixでmakefileとpkg-configを使用した場合 <a class="header-anchor" href="#unixでmakefileとpkg-configを使用した場合" aria-hidden="true">#</a></h2><p>GLFWは<a href="https://www.freedesktop.org/wiki/Software/pkg-config/" target="_blank" rel="noreferrer">pkg-config</a>をサポートしており、glfw3.pcのpkg-configファイルはGLFWライブラリのビルド時に生成され、ライブラリとともにインストールされます。pkg-configファイルにはライブラリを使用するために必要なコンパイル時およびリンク時のフラグと依存関係がすべて記述されています。それらが更新されたとき、あるいはシステム間で異なる場合、自動的に正しいものを取得することができます。</p><p>GLFWライブラリのスタティック版を使用する場合の典型的なコンパイルとリンクのコマンドラインは、次のようになります。</p><p><code>sh cc $(pkg-config --cflags glfw3) -o myprog myprog.c $(pkg-config --static --libs glfw3) </code></p><p>GLFWライブラリの共有版を使用する場合は、--staticフラグを省略します。</p><p><code>sh cc $(pkg-config --cflags glfw3) -o myprog myprog.c $(pkg-config --libs glfw3) </code></p><p>また、PKG_CONFIG_PATH環境変数を使用することで、先にglfw3.pcをインストールせずに使用することも可能です。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">env</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PKG_CONFIG_PATH=path/to/glfw/src</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">pkg-config</span><span style="color:#C3E88D;"> --cflags glfw3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog.c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">pkg-config</span><span style="color:#C3E88D;"> --libs glfw3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>GLFWは必要なOpenGL、OpenGL ES、Vulkanライブラリをランタイムにロードするので、依存関係にOpenGLは含まれません。もしあなたのアプリケーションが、最新の<a href="https://www.glfw.org/docs/latest/context_guide.html#context_glext_auto" target="_blank" rel="noreferrer">拡張ローダーライブラリ</a>を使う代わりに、OpenGLを直接呼び出すのであれば、gl pkg-configパッケージを追加する必要があります。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cc</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">pkg-config</span><span style="color:#C3E88D;"> --cflags glfw3 gl</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog.c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">pkg-config</span><span style="color:#C3E88D;"> --libs glfw3 gl</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="macosのxcodeで" tabindex="-1">macOSのXcodeで <a class="header-anchor" href="#macosのxcodeで" aria-hidden="true">#</a></h2><p>GLFWのダイナミックライブラリ版を使用する場合は、プロジェクトの依存関係に追加してください。</p><p>GLFWのスタティックライブラリ版を使用している場合は、それとCocoa・OpenGL・IOKitの各フレームワークを依存関係としてプロジェクトに追加してください。これらはすべて /System/Library/Frameworks で見つけることができます。</p><h2 id="macosのコマンドラインで" tabindex="-1">macOSのコマンドラインで <a class="header-anchor" href="#macosのコマンドラインで" aria-hidden="true">#</a></h2><p>macOSでコマンドラインからビルドする場合は、pkg-configを使用することをお勧めします。そうすることで、新しい依存関係が自動的に追加されます。それでも手動でビルドしたい場合は、-l と -framework スイッチを使って、必要なフレームワークとライブラリを自分でコマンドラインに追加する必要があります。</p><p>libglfw.3.dylibという名前のダイナミックGLFWライブラリを使用している場合、このように書きます。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myprog.c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-lglfw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-framework</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Cocoa</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-framework</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OpenGL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-framework</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">IOKit</span></span>
<span class="line"></span></code></pre></div><p>libglfw3.aという静的ライブラリを使用する場合は、-lglfwの代わりに-lglfw3としてください。</p><p>なお、コマンドラインからリンクする場合は、フレームワークに.frameworkという拡張子をつけないことに注意してください。</p><blockquote><p>あなたのマシンにはlibGL.*.dylibスタイルのOpenGLライブラリがあるかもしれませんが、それはX Window System用であり、macOSネイティブバージョンのGLFWでは動きません。</p></blockquote>`,86),o=[p];function t(c,r,i,g,C,L){return l(),a("div",null,o)}const y=s(e,[["render",t]]);export{F as __pageData,y as default};
