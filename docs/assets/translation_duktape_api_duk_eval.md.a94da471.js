import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.43c433ff.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"translation/duktape/api/duk_eval.md","filePath":"translation/duktape/api/duk_eval.md","lastUpdated":1676126774000}'),e={name:"translation/duktape/api/duk_eval.md"},p=l(`<h2 id="duk-eval" tabindex="-1">duk_eval() <a class="header-anchor" href="#duk-eval" aria-label="Permalink to &quot;duk_eval()&quot;">​</a></h2><p>1.0.0 compile</p><h3 id="プロトタイプ" tabindex="-1">プロトタイプ <a class="header-anchor" href="#プロトタイプ" aria-label="Permalink to &quot;プロトタイプ&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">duk_eval</span><span style="color:#E1E4E8;">(duk_context </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">duk_eval</span><span style="color:#24292E;">(duk_context </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="スタック" tabindex="-1">スタック <a class="header-anchor" href="#スタック" aria-label="Permalink to &quot;スタック&quot;">​</a></h3><p>| ... | source | -&gt; | ... | result |</p><h3 id="要約" tabindex="-1">要約 <a class="header-anchor" href="#要約" aria-label="Permalink to &quot;要約&quot;">​</a></h3><p>ECMAScript のソースコードをスタックの一番上で評価し、スタックの一番上に単一の戻り値を残す。このようなエラーは自動的には捕捉されません。一時的なeval関数に関連するファイル名は &quot;eval &quot;です。</p><p>このAPIコールは、基本的に次のようなショートカットになっています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;eval&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_compile</span><span style="color:#E1E4E8;">(ctx, DUK_COMPILE_EVAL);</span><span style="color:#6A737D;">  /* [ ... source filename ] -&gt; [ function ] */</span></span>
<span class="line"><span style="color:#B392F0;">duk_call</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;eval&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_compile</span><span style="color:#24292E;">(ctx, DUK_COMPILE_EVAL);</span><span style="color:#6A737D;">  /* [ ... source filename ] -&gt; [ function ] */</span></span>
<span class="line"><span style="color:#6F42C1;">duk_call</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div><p>ソースコードは、明示的な &quot;use strict&quot; 指令を含まない限り、非厳密モードで評価されます。特に、現在のコンテキストの厳密性は eval のコードには反映されません。これにより、Duktape/Cの関数呼び出しの内部でevalを使うか（strictモード）、外部で使うか（non-strictモード）で、evalの厳密性が変わってしまうような混乱が避けられます。</p><p>eval の入力が固定文字列の場合、duk_eval_string() を使うこともできます。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* Eval result in ECMAScript is the last non-empty statement; here, the</span></span>
<span class="line"><span style="color:#6A737D;"> * result of the eval is the number 123.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">duk_push_string</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;print(&#39;Hello world!&#39;); 123;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">duk_eval</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;return value is: </span><span style="color:#79B8FF;">%lf\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">duk_get_number</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#B392F0;">duk_pop</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* Eval result in ECMAScript is the last non-empty statement; here, the</span></span>
<span class="line"><span style="color:#6A737D;"> * result of the eval is the number 123.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">duk_push_string</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;print(&#39;Hello world!&#39;); 123;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">duk_eval</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;return value is: </span><span style="color:#005CC5;">%lf\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">duk_get_number</span><span style="color:#24292E;">(ctx, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6F42C1;">duk_pop</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div><h3 id="参照" tabindex="-1">参照 <a class="header-anchor" href="#参照" aria-label="Permalink to &quot;参照&quot;">​</a></h3><p>duk_peval duk_eval_noresult duk_eval_string duk_eval_string_noresult duk_eval_lstring duk_eval_lstring_noresult</p>`,16),o=[p];function t(c,r,i,u,d,y){return a(),n("div",null,o)}const h=s(e,[["render",t]]);export{_ as __pageData,h as default};
